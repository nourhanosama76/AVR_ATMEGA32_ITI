
EXTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a26  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000a9a  2**0
                  ALLOC
  2 .stab         00000a68  00000000  00000000  00000a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000883  00000000  00000000  00001504  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a1 04 	jmp	0x942	; 0x942 <__vector_1>
   8:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <main>
  74:	0c 94 11 05 	jmp	0xa22	; 0xa22 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_voidSetPinDirection>:
/******************************************************************************/
/*************************Functions' implementation****************************/
/******************************************************************************/

void DIO_voidSetPinDirection(u8 Copy_u8PortID , u8 Copy_u8Pin , u8 Copy_u8PinDirection)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	2d 97       	sbiw	r28, 0x0d	; 13
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
  90:	89 83       	std	Y+1, r24	; 0x01
  92:	6a 83       	std	Y+2, r22	; 0x02
  94:	4b 83       	std	Y+3, r20	; 0x03
	/*switching over ports*/
	switch(Copy_u8PortID)
  96:	89 81       	ldd	r24, Y+1	; 0x01
  98:	28 2f       	mov	r18, r24
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	3d 87       	std	Y+13, r19	; 0x0d
  9e:	2c 87       	std	Y+12, r18	; 0x0c
  a0:	8c 85       	ldd	r24, Y+12	; 0x0c
  a2:	9d 85       	ldd	r25, Y+13	; 0x0d
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	91 05       	cpc	r25, r1
  a8:	09 f4       	brne	.+2      	; 0xac <DIO_voidSetPinDirection+0x30>
  aa:	7b c0       	rjmp	.+246    	; 0x1a2 <DIO_voidSetPinDirection+0x126>
  ac:	2c 85       	ldd	r18, Y+12	; 0x0c
  ae:	3d 85       	ldd	r19, Y+13	; 0x0d
  b0:	22 30       	cpi	r18, 0x02	; 2
  b2:	31 05       	cpc	r19, r1
  b4:	2c f4       	brge	.+10     	; 0xc0 <DIO_voidSetPinDirection+0x44>
  b6:	8c 85       	ldd	r24, Y+12	; 0x0c
  b8:	9d 85       	ldd	r25, Y+13	; 0x0d
  ba:	00 97       	sbiw	r24, 0x00	; 0
  bc:	71 f0       	breq	.+28     	; 0xda <DIO_voidSetPinDirection+0x5e>
  be:	9c c1       	rjmp	.+824    	; 0x3f8 <DIO_voidSetPinDirection+0x37c>
  c0:	2c 85       	ldd	r18, Y+12	; 0x0c
  c2:	3d 85       	ldd	r19, Y+13	; 0x0d
  c4:	22 30       	cpi	r18, 0x02	; 2
  c6:	31 05       	cpc	r19, r1
  c8:	09 f4       	brne	.+2      	; 0xcc <DIO_voidSetPinDirection+0x50>
  ca:	cf c0       	rjmp	.+414    	; 0x26a <DIO_voidSetPinDirection+0x1ee>
  cc:	8c 85       	ldd	r24, Y+12	; 0x0c
  ce:	9d 85       	ldd	r25, Y+13	; 0x0d
  d0:	83 30       	cpi	r24, 0x03	; 3
  d2:	91 05       	cpc	r25, r1
  d4:	09 f4       	brne	.+2      	; 0xd8 <DIO_voidSetPinDirection+0x5c>
  d6:	2d c1       	rjmp	.+602    	; 0x332 <DIO_voidSetPinDirection+0x2b6>
  d8:	8f c1       	rjmp	.+798    	; 0x3f8 <DIO_voidSetPinDirection+0x37c>
	{
		/*in case of setting the direction of a pin in port A*/
		case DIO_PORTA :

			/*switch over different directions*/
			switch(Copy_u8PinDirection)
  da:	8b 81       	ldd	r24, Y+3	; 0x03
  dc:	28 2f       	mov	r18, r24
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	3b 87       	std	Y+11, r19	; 0x0b
  e2:	2a 87       	std	Y+10, r18	; 0x0a
  e4:	8a 85       	ldd	r24, Y+10	; 0x0a
  e6:	9b 85       	ldd	r25, Y+11	; 0x0b
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	91 05       	cpc	r25, r1
  ec:	f1 f0       	breq	.+60     	; 0x12a <DIO_voidSetPinDirection+0xae>
  ee:	2a 85       	ldd	r18, Y+10	; 0x0a
  f0:	3b 85       	ldd	r19, Y+11	; 0x0b
  f2:	22 30       	cpi	r18, 0x02	; 2
  f4:	31 05       	cpc	r19, r1
  f6:	71 f1       	breq	.+92     	; 0x154 <DIO_voidSetPinDirection+0xd8>
  f8:	8a 85       	ldd	r24, Y+10	; 0x0a
  fa:	9b 85       	ldd	r25, Y+11	; 0x0b
  fc:	00 97       	sbiw	r24, 0x00	; 0
  fe:	09 f0       	breq	.+2      	; 0x102 <DIO_voidSetPinDirection+0x86>
 100:	7b c1       	rjmp	.+758    	; 0x3f8 <DIO_voidSetPinDirection+0x37c>
			{
				/*in case of setting the pin to be output*/
				case DIO_PIN_OUTPUT :
					SET_BIT(DDRA , Copy_u8Pin);
 102:	aa e3       	ldi	r26, 0x3A	; 58
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	ea e3       	ldi	r30, 0x3A	; 58
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	48 2f       	mov	r20, r24
 10e:	8a 81       	ldd	r24, Y+2	; 0x02
 110:	28 2f       	mov	r18, r24
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 2e       	mov	r0, r18
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_voidSetPinDirection+0xa4>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_voidSetPinDirection+0xa0>
 124:	84 2b       	or	r24, r20
 126:	8c 93       	st	X, r24
 128:	67 c1       	rjmp	.+718    	; 0x3f8 <DIO_voidSetPinDirection+0x37c>
					break ;

				/*in case of setting the pin direction to be input float*/
				case DIO_PIN_INPUT_FLOAT :
					CLR_BIT(DDRA , Copy_u8Pin);
 12a:	aa e3       	ldi	r26, 0x3A	; 58
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	ea e3       	ldi	r30, 0x3A	; 58
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	48 2f       	mov	r20, r24
 136:	8a 81       	ldd	r24, Y+2	; 0x02
 138:	28 2f       	mov	r18, r24
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 2e       	mov	r0, r18
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_voidSetPinDirection+0xcc>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	0a 94       	dec	r0
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_voidSetPinDirection+0xc8>
 14c:	80 95       	com	r24
 14e:	84 23       	and	r24, r20
 150:	8c 93       	st	X, r24
 152:	52 c1       	rjmp	.+676    	; 0x3f8 <DIO_voidSetPinDirection+0x37c>
					break ;

				/*in case of setting the pin direction to be input pull up*/
				case DIO_PIN_INPUT_PULLUP :
					CLR_BIT(DDRA , Copy_u8Pin);
 154:	aa e3       	ldi	r26, 0x3A	; 58
 156:	b0 e0       	ldi	r27, 0x00	; 0
 158:	ea e3       	ldi	r30, 0x3A	; 58
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	48 2f       	mov	r20, r24
 160:	8a 81       	ldd	r24, Y+2	; 0x02
 162:	28 2f       	mov	r18, r24
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_voidSetPinDirection+0xf4>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	2a 95       	dec	r18
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_voidSetPinDirection+0xf0>
 174:	80 95       	com	r24
 176:	84 23       	and	r24, r20
 178:	8c 93       	st	X, r24
					SET_BIT(PORTA , Copy_u8Pin);
 17a:	ab e3       	ldi	r26, 0x3B	; 59
 17c:	b0 e0       	ldi	r27, 0x00	; 0
 17e:	eb e3       	ldi	r30, 0x3B	; 59
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	48 2f       	mov	r20, r24
 186:	8a 81       	ldd	r24, Y+2	; 0x02
 188:	28 2f       	mov	r18, r24
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	02 2e       	mov	r0, r18
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_voidSetPinDirection+0x11c>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	0a 94       	dec	r0
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_voidSetPinDirection+0x118>
 19c:	84 2b       	or	r24, r20
 19e:	8c 93       	st	X, r24
 1a0:	2b c1       	rjmp	.+598    	; 0x3f8 <DIO_voidSetPinDirection+0x37c>

		/*in case of setting the direction of a pin in port B*/
		case DIO_PORTB :

			/*switch over different directions*/
			switch(Copy_u8PinDirection)
 1a2:	8b 81       	ldd	r24, Y+3	; 0x03
 1a4:	28 2f       	mov	r18, r24
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	39 87       	std	Y+9, r19	; 0x09
 1aa:	28 87       	std	Y+8, r18	; 0x08
 1ac:	88 85       	ldd	r24, Y+8	; 0x08
 1ae:	99 85       	ldd	r25, Y+9	; 0x09
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	91 05       	cpc	r25, r1
 1b4:	f1 f0       	breq	.+60     	; 0x1f2 <DIO_voidSetPinDirection+0x176>
 1b6:	28 85       	ldd	r18, Y+8	; 0x08
 1b8:	39 85       	ldd	r19, Y+9	; 0x09
 1ba:	22 30       	cpi	r18, 0x02	; 2
 1bc:	31 05       	cpc	r19, r1
 1be:	71 f1       	breq	.+92     	; 0x21c <DIO_voidSetPinDirection+0x1a0>
 1c0:	88 85       	ldd	r24, Y+8	; 0x08
 1c2:	99 85       	ldd	r25, Y+9	; 0x09
 1c4:	00 97       	sbiw	r24, 0x00	; 0
 1c6:	09 f0       	breq	.+2      	; 0x1ca <DIO_voidSetPinDirection+0x14e>
 1c8:	17 c1       	rjmp	.+558    	; 0x3f8 <DIO_voidSetPinDirection+0x37c>
			{
				/*in case of setting the pin to be output*/
				case DIO_PIN_OUTPUT :
					SET_BIT(DDRB , Copy_u8Pin);
 1ca:	a7 e3       	ldi	r26, 0x37	; 55
 1cc:	b0 e0       	ldi	r27, 0x00	; 0
 1ce:	e7 e3       	ldi	r30, 0x37	; 55
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	48 2f       	mov	r20, r24
 1d6:	8a 81       	ldd	r24, Y+2	; 0x02
 1d8:	28 2f       	mov	r18, r24
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 2e       	mov	r0, r18
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_voidSetPinDirection+0x16c>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	0a 94       	dec	r0
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_voidSetPinDirection+0x168>
 1ec:	84 2b       	or	r24, r20
 1ee:	8c 93       	st	X, r24
 1f0:	03 c1       	rjmp	.+518    	; 0x3f8 <DIO_voidSetPinDirection+0x37c>
					break ;

				/*in case of setting the pin direction to be input float*/
				case DIO_PIN_INPUT_FLOAT :
					CLR_BIT(DDRB , Copy_u8Pin);
 1f2:	a7 e3       	ldi	r26, 0x37	; 55
 1f4:	b0 e0       	ldi	r27, 0x00	; 0
 1f6:	e7 e3       	ldi	r30, 0x37	; 55
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	48 2f       	mov	r20, r24
 1fe:	8a 81       	ldd	r24, Y+2	; 0x02
 200:	28 2f       	mov	r18, r24
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 2e       	mov	r0, r18
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_voidSetPinDirection+0x194>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	0a 94       	dec	r0
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_voidSetPinDirection+0x190>
 214:	80 95       	com	r24
 216:	84 23       	and	r24, r20
 218:	8c 93       	st	X, r24
 21a:	ee c0       	rjmp	.+476    	; 0x3f8 <DIO_voidSetPinDirection+0x37c>
					break ;

				/*in case of setting the pin direction to be input pull up*/
				case DIO_PIN_INPUT_PULLUP :
					CLR_BIT(DDRB , Copy_u8Pin);
 21c:	a7 e3       	ldi	r26, 0x37	; 55
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	e7 e3       	ldi	r30, 0x37	; 55
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	48 2f       	mov	r20, r24
 228:	8a 81       	ldd	r24, Y+2	; 0x02
 22a:	28 2f       	mov	r18, r24
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_voidSetPinDirection+0x1bc>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	2a 95       	dec	r18
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_voidSetPinDirection+0x1b8>
 23c:	80 95       	com	r24
 23e:	84 23       	and	r24, r20
 240:	8c 93       	st	X, r24
					SET_BIT(PORTB , Copy_u8Pin);
 242:	a8 e3       	ldi	r26, 0x38	; 56
 244:	b0 e0       	ldi	r27, 0x00	; 0
 246:	e8 e3       	ldi	r30, 0x38	; 56
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	48 2f       	mov	r20, r24
 24e:	8a 81       	ldd	r24, Y+2	; 0x02
 250:	28 2f       	mov	r18, r24
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 2e       	mov	r0, r18
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_voidSetPinDirection+0x1e4>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	0a 94       	dec	r0
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_voidSetPinDirection+0x1e0>
 264:	84 2b       	or	r24, r20
 266:	8c 93       	st	X, r24
 268:	c7 c0       	rjmp	.+398    	; 0x3f8 <DIO_voidSetPinDirection+0x37c>

		/*in case of setting the direction of a pin in port C*/
		case DIO_PORTC :

			/*switch over different directions*/
			switch(Copy_u8PinDirection)
 26a:	8b 81       	ldd	r24, Y+3	; 0x03
 26c:	28 2f       	mov	r18, r24
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	3f 83       	std	Y+7, r19	; 0x07
 272:	2e 83       	std	Y+6, r18	; 0x06
 274:	8e 81       	ldd	r24, Y+6	; 0x06
 276:	9f 81       	ldd	r25, Y+7	; 0x07
 278:	81 30       	cpi	r24, 0x01	; 1
 27a:	91 05       	cpc	r25, r1
 27c:	f1 f0       	breq	.+60     	; 0x2ba <DIO_voidSetPinDirection+0x23e>
 27e:	2e 81       	ldd	r18, Y+6	; 0x06
 280:	3f 81       	ldd	r19, Y+7	; 0x07
 282:	22 30       	cpi	r18, 0x02	; 2
 284:	31 05       	cpc	r19, r1
 286:	71 f1       	breq	.+92     	; 0x2e4 <DIO_voidSetPinDirection+0x268>
 288:	8e 81       	ldd	r24, Y+6	; 0x06
 28a:	9f 81       	ldd	r25, Y+7	; 0x07
 28c:	00 97       	sbiw	r24, 0x00	; 0
 28e:	09 f0       	breq	.+2      	; 0x292 <DIO_voidSetPinDirection+0x216>
 290:	b3 c0       	rjmp	.+358    	; 0x3f8 <DIO_voidSetPinDirection+0x37c>
			{
				/*in case of setting the pin to be output*/
				case DIO_PIN_OUTPUT :
					SET_BIT(DDRC , Copy_u8Pin);
 292:	a4 e3       	ldi	r26, 0x34	; 52
 294:	b0 e0       	ldi	r27, 0x00	; 0
 296:	e4 e3       	ldi	r30, 0x34	; 52
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	48 2f       	mov	r20, r24
 29e:	8a 81       	ldd	r24, Y+2	; 0x02
 2a0:	28 2f       	mov	r18, r24
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	02 2e       	mov	r0, r18
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_voidSetPinDirection+0x234>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	0a 94       	dec	r0
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_voidSetPinDirection+0x230>
 2b4:	84 2b       	or	r24, r20
 2b6:	8c 93       	st	X, r24
 2b8:	9f c0       	rjmp	.+318    	; 0x3f8 <DIO_voidSetPinDirection+0x37c>
					break ;

				/*in case of setting the pin direction to be input float*/
				case DIO_PIN_INPUT_FLOAT :
					CLR_BIT(DDRC , Copy_u8Pin);
 2ba:	a4 e3       	ldi	r26, 0x34	; 52
 2bc:	b0 e0       	ldi	r27, 0x00	; 0
 2be:	e4 e3       	ldi	r30, 0x34	; 52
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	48 2f       	mov	r20, r24
 2c6:	8a 81       	ldd	r24, Y+2	; 0x02
 2c8:	28 2f       	mov	r18, r24
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 2e       	mov	r0, r18
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_voidSetPinDirection+0x25c>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	0a 94       	dec	r0
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_voidSetPinDirection+0x258>
 2dc:	80 95       	com	r24
 2de:	84 23       	and	r24, r20
 2e0:	8c 93       	st	X, r24
 2e2:	8a c0       	rjmp	.+276    	; 0x3f8 <DIO_voidSetPinDirection+0x37c>
					break ;

				/*in case of setting the pin direction to be input pull up*/
				case DIO_PIN_INPUT_PULLUP :
					CLR_BIT(DDRC , Copy_u8Pin);
 2e4:	a4 e3       	ldi	r26, 0x34	; 52
 2e6:	b0 e0       	ldi	r27, 0x00	; 0
 2e8:	e4 e3       	ldi	r30, 0x34	; 52
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	48 2f       	mov	r20, r24
 2f0:	8a 81       	ldd	r24, Y+2	; 0x02
 2f2:	28 2f       	mov	r18, r24
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_voidSetPinDirection+0x284>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	2a 95       	dec	r18
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_voidSetPinDirection+0x280>
 304:	80 95       	com	r24
 306:	84 23       	and	r24, r20
 308:	8c 93       	st	X, r24
					SET_BIT(PORTC , Copy_u8Pin);
 30a:	a5 e3       	ldi	r26, 0x35	; 53
 30c:	b0 e0       	ldi	r27, 0x00	; 0
 30e:	e5 e3       	ldi	r30, 0x35	; 53
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	48 2f       	mov	r20, r24
 316:	8a 81       	ldd	r24, Y+2	; 0x02
 318:	28 2f       	mov	r18, r24
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	02 2e       	mov	r0, r18
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_voidSetPinDirection+0x2ac>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	0a 94       	dec	r0
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_voidSetPinDirection+0x2a8>
 32c:	84 2b       	or	r24, r20
 32e:	8c 93       	st	X, r24
 330:	63 c0       	rjmp	.+198    	; 0x3f8 <DIO_voidSetPinDirection+0x37c>

		/*in case of setting the direction of a pin in port D*/
		case DIO_PORTD :

			/*switch over different directions*/
			switch(Copy_u8PinDirection)
 332:	8b 81       	ldd	r24, Y+3	; 0x03
 334:	28 2f       	mov	r18, r24
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	3d 83       	std	Y+5, r19	; 0x05
 33a:	2c 83       	std	Y+4, r18	; 0x04
 33c:	8c 81       	ldd	r24, Y+4	; 0x04
 33e:	9d 81       	ldd	r25, Y+5	; 0x05
 340:	81 30       	cpi	r24, 0x01	; 1
 342:	91 05       	cpc	r25, r1
 344:	f1 f0       	breq	.+60     	; 0x382 <DIO_voidSetPinDirection+0x306>
 346:	2c 81       	ldd	r18, Y+4	; 0x04
 348:	3d 81       	ldd	r19, Y+5	; 0x05
 34a:	22 30       	cpi	r18, 0x02	; 2
 34c:	31 05       	cpc	r19, r1
 34e:	71 f1       	breq	.+92     	; 0x3ac <DIO_voidSetPinDirection+0x330>
 350:	8c 81       	ldd	r24, Y+4	; 0x04
 352:	9d 81       	ldd	r25, Y+5	; 0x05
 354:	00 97       	sbiw	r24, 0x00	; 0
 356:	09 f0       	breq	.+2      	; 0x35a <DIO_voidSetPinDirection+0x2de>
 358:	4f c0       	rjmp	.+158    	; 0x3f8 <DIO_voidSetPinDirection+0x37c>
			{
				/*in case of setting the pin to be output*/
				case DIO_PIN_OUTPUT :
					SET_BIT(DDRD , Copy_u8Pin);
 35a:	a1 e3       	ldi	r26, 0x31	; 49
 35c:	b0 e0       	ldi	r27, 0x00	; 0
 35e:	e1 e3       	ldi	r30, 0x31	; 49
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	48 2f       	mov	r20, r24
 366:	8a 81       	ldd	r24, Y+2	; 0x02
 368:	28 2f       	mov	r18, r24
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 2e       	mov	r0, r18
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_voidSetPinDirection+0x2fc>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	0a 94       	dec	r0
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_voidSetPinDirection+0x2f8>
 37c:	84 2b       	or	r24, r20
 37e:	8c 93       	st	X, r24
 380:	3b c0       	rjmp	.+118    	; 0x3f8 <DIO_voidSetPinDirection+0x37c>
					break ;

				/*in case of setting the pin direction to be input float*/
				case DIO_PIN_INPUT_FLOAT :
					CLR_BIT(DDRD , Copy_u8Pin);
 382:	a1 e3       	ldi	r26, 0x31	; 49
 384:	b0 e0       	ldi	r27, 0x00	; 0
 386:	e1 e3       	ldi	r30, 0x31	; 49
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	48 2f       	mov	r20, r24
 38e:	8a 81       	ldd	r24, Y+2	; 0x02
 390:	28 2f       	mov	r18, r24
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	02 2e       	mov	r0, r18
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_voidSetPinDirection+0x324>
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	0a 94       	dec	r0
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_voidSetPinDirection+0x320>
 3a4:	80 95       	com	r24
 3a6:	84 23       	and	r24, r20
 3a8:	8c 93       	st	X, r24
 3aa:	26 c0       	rjmp	.+76     	; 0x3f8 <DIO_voidSetPinDirection+0x37c>
					break ;

				/*in case of setting the pin direction to be input pull up*/
				case DIO_PIN_INPUT_PULLUP :
					CLR_BIT(DDRD , Copy_u8Pin);
 3ac:	a1 e3       	ldi	r26, 0x31	; 49
 3ae:	b0 e0       	ldi	r27, 0x00	; 0
 3b0:	e1 e3       	ldi	r30, 0x31	; 49
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 81       	ld	r24, Z
 3b6:	48 2f       	mov	r20, r24
 3b8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ba:	28 2f       	mov	r18, r24
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_voidSetPinDirection+0x34c>
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	2a 95       	dec	r18
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_voidSetPinDirection+0x348>
 3cc:	80 95       	com	r24
 3ce:	84 23       	and	r24, r20
 3d0:	8c 93       	st	X, r24
					SET_BIT(PORTD , Copy_u8Pin);
 3d2:	a2 e3       	ldi	r26, 0x32	; 50
 3d4:	b0 e0       	ldi	r27, 0x00	; 0
 3d6:	e2 e3       	ldi	r30, 0x32	; 50
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	48 2f       	mov	r20, r24
 3de:	8a 81       	ldd	r24, Y+2	; 0x02
 3e0:	28 2f       	mov	r18, r24
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	02 2e       	mov	r0, r18
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_voidSetPinDirection+0x374>
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	0a 94       	dec	r0
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_voidSetPinDirection+0x370>
 3f4:	84 2b       	or	r24, r20
 3f6:	8c 93       	st	X, r24
					break ;
			}
			break ;
	}
}
 3f8:	2d 96       	adiw	r28, 0x0d	; 13
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	f8 94       	cli
 3fe:	de bf       	out	0x3e, r29	; 62
 400:	0f be       	out	0x3f, r0	; 63
 402:	cd bf       	out	0x3d, r28	; 61
 404:	cf 91       	pop	r28
 406:	df 91       	pop	r29
 408:	08 95       	ret

0000040a <DIO_voidSetPinValue>:



void DIO_voidSetPinValue(u8 Copy_u8PortID , u8 Copy_u8Pin , u8 Copy_u8PinValue)
{
 40a:	df 93       	push	r29
 40c:	cf 93       	push	r28
 40e:	00 d0       	rcall	.+0      	; 0x410 <DIO_voidSetPinValue+0x6>
 410:	00 d0       	rcall	.+0      	; 0x412 <DIO_voidSetPinValue+0x8>
 412:	0f 92       	push	r0
 414:	cd b7       	in	r28, 0x3d	; 61
 416:	de b7       	in	r29, 0x3e	; 62
 418:	89 83       	std	Y+1, r24	; 0x01
 41a:	6a 83       	std	Y+2, r22	; 0x02
 41c:	4b 83       	std	Y+3, r20	; 0x03
	    /*switching over ports*/
		switch(Copy_u8PortID)
 41e:	89 81       	ldd	r24, Y+1	; 0x01
 420:	28 2f       	mov	r18, r24
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	3d 83       	std	Y+5, r19	; 0x05
 426:	2c 83       	std	Y+4, r18	; 0x04
 428:	4c 81       	ldd	r20, Y+4	; 0x04
 42a:	5d 81       	ldd	r21, Y+5	; 0x05
 42c:	41 30       	cpi	r20, 0x01	; 1
 42e:	51 05       	cpc	r21, r1
 430:	09 f4       	brne	.+2      	; 0x434 <DIO_voidSetPinValue+0x2a>
 432:	40 c0       	rjmp	.+128    	; 0x4b4 <DIO_voidSetPinValue+0xaa>
 434:	8c 81       	ldd	r24, Y+4	; 0x04
 436:	9d 81       	ldd	r25, Y+5	; 0x05
 438:	82 30       	cpi	r24, 0x02	; 2
 43a:	91 05       	cpc	r25, r1
 43c:	2c f4       	brge	.+10     	; 0x448 <DIO_voidSetPinValue+0x3e>
 43e:	ec 81       	ldd	r30, Y+4	; 0x04
 440:	fd 81       	ldd	r31, Y+5	; 0x05
 442:	30 97       	sbiw	r30, 0x00	; 0
 444:	71 f0       	breq	.+28     	; 0x462 <DIO_voidSetPinValue+0x58>
 446:	b0 c0       	rjmp	.+352    	; 0x5a8 <DIO_voidSetPinValue+0x19e>
 448:	2c 81       	ldd	r18, Y+4	; 0x04
 44a:	3d 81       	ldd	r19, Y+5	; 0x05
 44c:	22 30       	cpi	r18, 0x02	; 2
 44e:	31 05       	cpc	r19, r1
 450:	09 f4       	brne	.+2      	; 0x454 <DIO_voidSetPinValue+0x4a>
 452:	59 c0       	rjmp	.+178    	; 0x506 <DIO_voidSetPinValue+0xfc>
 454:	4c 81       	ldd	r20, Y+4	; 0x04
 456:	5d 81       	ldd	r21, Y+5	; 0x05
 458:	43 30       	cpi	r20, 0x03	; 3
 45a:	51 05       	cpc	r21, r1
 45c:	09 f4       	brne	.+2      	; 0x460 <DIO_voidSetPinValue+0x56>
 45e:	7c c0       	rjmp	.+248    	; 0x558 <DIO_voidSetPinValue+0x14e>
 460:	a3 c0       	rjmp	.+326    	; 0x5a8 <DIO_voidSetPinValue+0x19e>
		{
			/*in case of setting the direction of a pin in port A*/
			case DIO_PORTA :
				WRT_BIT(PORTA , Copy_u8Pin , Copy_u8PinValue);
 462:	6b e3       	ldi	r22, 0x3B	; 59
 464:	70 e0       	ldi	r23, 0x00	; 0
 466:	8b 81       	ldd	r24, Y+3	; 0x03
 468:	28 2f       	mov	r18, r24
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	8a 81       	ldd	r24, Y+2	; 0x02
 46e:	88 2f       	mov	r24, r24
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	f9 01       	movw	r30, r18
 474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_voidSetPinValue+0x70>
 476:	ee 0f       	add	r30, r30
 478:	ff 1f       	adc	r31, r31
 47a:	8a 95       	dec	r24
 47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_voidSetPinValue+0x6c>
 47e:	cf 01       	movw	r24, r30
 480:	58 2f       	mov	r21, r24
 482:	ab e3       	ldi	r26, 0x3B	; 59
 484:	b0 e0       	ldi	r27, 0x00	; 0
 486:	eb e3       	ldi	r30, 0x3B	; 59
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	48 2f       	mov	r20, r24
 48e:	8a 81       	ldd	r24, Y+2	; 0x02
 490:	28 2f       	mov	r18, r24
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	02 2e       	mov	r0, r18
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <DIO_voidSetPinValue+0x96>
 49c:	88 0f       	add	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	0a 94       	dec	r0
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <DIO_voidSetPinValue+0x92>
 4a4:	80 95       	com	r24
 4a6:	84 23       	and	r24, r20
 4a8:	8c 93       	st	X, r24
 4aa:	8c 91       	ld	r24, X
 4ac:	85 2b       	or	r24, r21
 4ae:	fb 01       	movw	r30, r22
 4b0:	80 83       	st	Z, r24
 4b2:	7a c0       	rjmp	.+244    	; 0x5a8 <DIO_voidSetPinValue+0x19e>
				break ;

			/*in case of setting the direction of a pin in port B*/
			case DIO_PORTB :
				WRT_BIT(PORTB , Copy_u8Pin , Copy_u8PinValue);
 4b4:	68 e3       	ldi	r22, 0x38	; 56
 4b6:	70 e0       	ldi	r23, 0x00	; 0
 4b8:	8b 81       	ldd	r24, Y+3	; 0x03
 4ba:	28 2f       	mov	r18, r24
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	8a 81       	ldd	r24, Y+2	; 0x02
 4c0:	88 2f       	mov	r24, r24
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	a9 01       	movw	r20, r18
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <DIO_voidSetPinValue+0xc2>
 4c8:	44 0f       	add	r20, r20
 4ca:	55 1f       	adc	r21, r21
 4cc:	8a 95       	dec	r24
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <DIO_voidSetPinValue+0xbe>
 4d0:	ca 01       	movw	r24, r20
 4d2:	58 2f       	mov	r21, r24
 4d4:	a8 e3       	ldi	r26, 0x38	; 56
 4d6:	b0 e0       	ldi	r27, 0x00	; 0
 4d8:	e8 e3       	ldi	r30, 0x38	; 56
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	80 81       	ld	r24, Z
 4de:	48 2f       	mov	r20, r24
 4e0:	8a 81       	ldd	r24, Y+2	; 0x02
 4e2:	28 2f       	mov	r18, r24
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	02 2e       	mov	r0, r18
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <DIO_voidSetPinValue+0xe8>
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	0a 94       	dec	r0
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <DIO_voidSetPinValue+0xe4>
 4f6:	80 95       	com	r24
 4f8:	84 23       	and	r24, r20
 4fa:	8c 93       	st	X, r24
 4fc:	8c 91       	ld	r24, X
 4fe:	85 2b       	or	r24, r21
 500:	fb 01       	movw	r30, r22
 502:	80 83       	st	Z, r24
 504:	51 c0       	rjmp	.+162    	; 0x5a8 <DIO_voidSetPinValue+0x19e>
				break ;

			/*in case of setting the direction of a pin in port C*/
			case DIO_PORTC :
				WRT_BIT(PORTC , Copy_u8Pin , Copy_u8PinValue);
 506:	65 e3       	ldi	r22, 0x35	; 53
 508:	70 e0       	ldi	r23, 0x00	; 0
 50a:	8b 81       	ldd	r24, Y+3	; 0x03
 50c:	28 2f       	mov	r18, r24
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	8a 81       	ldd	r24, Y+2	; 0x02
 512:	88 2f       	mov	r24, r24
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	a9 01       	movw	r20, r18
 518:	02 c0       	rjmp	.+4      	; 0x51e <DIO_voidSetPinValue+0x114>
 51a:	44 0f       	add	r20, r20
 51c:	55 1f       	adc	r21, r21
 51e:	8a 95       	dec	r24
 520:	e2 f7       	brpl	.-8      	; 0x51a <DIO_voidSetPinValue+0x110>
 522:	ca 01       	movw	r24, r20
 524:	58 2f       	mov	r21, r24
 526:	a5 e3       	ldi	r26, 0x35	; 53
 528:	b0 e0       	ldi	r27, 0x00	; 0
 52a:	e5 e3       	ldi	r30, 0x35	; 53
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	80 81       	ld	r24, Z
 530:	48 2f       	mov	r20, r24
 532:	8a 81       	ldd	r24, Y+2	; 0x02
 534:	28 2f       	mov	r18, r24
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	02 2e       	mov	r0, r18
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_voidSetPinValue+0x13a>
 540:	88 0f       	add	r24, r24
 542:	99 1f       	adc	r25, r25
 544:	0a 94       	dec	r0
 546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_voidSetPinValue+0x136>
 548:	80 95       	com	r24
 54a:	84 23       	and	r24, r20
 54c:	8c 93       	st	X, r24
 54e:	8c 91       	ld	r24, X
 550:	85 2b       	or	r24, r21
 552:	fb 01       	movw	r30, r22
 554:	80 83       	st	Z, r24
 556:	28 c0       	rjmp	.+80     	; 0x5a8 <DIO_voidSetPinValue+0x19e>
				break ;

			/*in case of setting the direction of a pin in port D*/
			case DIO_PORTD :
				WRT_BIT(PORTD , Copy_u8Pin , Copy_u8PinValue);
 558:	62 e3       	ldi	r22, 0x32	; 50
 55a:	70 e0       	ldi	r23, 0x00	; 0
 55c:	8b 81       	ldd	r24, Y+3	; 0x03
 55e:	28 2f       	mov	r18, r24
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	8a 81       	ldd	r24, Y+2	; 0x02
 564:	88 2f       	mov	r24, r24
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	a9 01       	movw	r20, r18
 56a:	02 c0       	rjmp	.+4      	; 0x570 <DIO_voidSetPinValue+0x166>
 56c:	44 0f       	add	r20, r20
 56e:	55 1f       	adc	r21, r21
 570:	8a 95       	dec	r24
 572:	e2 f7       	brpl	.-8      	; 0x56c <DIO_voidSetPinValue+0x162>
 574:	ca 01       	movw	r24, r20
 576:	58 2f       	mov	r21, r24
 578:	a2 e3       	ldi	r26, 0x32	; 50
 57a:	b0 e0       	ldi	r27, 0x00	; 0
 57c:	e2 e3       	ldi	r30, 0x32	; 50
 57e:	f0 e0       	ldi	r31, 0x00	; 0
 580:	80 81       	ld	r24, Z
 582:	48 2f       	mov	r20, r24
 584:	8a 81       	ldd	r24, Y+2	; 0x02
 586:	28 2f       	mov	r18, r24
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	02 2e       	mov	r0, r18
 590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_voidSetPinValue+0x18c>
 592:	88 0f       	add	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	0a 94       	dec	r0
 598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_voidSetPinValue+0x188>
 59a:	80 95       	com	r24
 59c:	84 23       	and	r24, r20
 59e:	8c 93       	st	X, r24
 5a0:	8c 91       	ld	r24, X
 5a2:	85 2b       	or	r24, r21
 5a4:	fb 01       	movw	r30, r22
 5a6:	80 83       	st	Z, r24
				break ;
		}
}
 5a8:	0f 90       	pop	r0
 5aa:	0f 90       	pop	r0
 5ac:	0f 90       	pop	r0
 5ae:	0f 90       	pop	r0
 5b0:	0f 90       	pop	r0
 5b2:	cf 91       	pop	r28
 5b4:	df 91       	pop	r29
 5b6:	08 95       	ret

000005b8 <DIO_voidSetPortDirection>:



void DIO_voidSetPortDirection(u8 Copy_u8PortID  , u8 Copy_u8PortDirection)
{
 5b8:	df 93       	push	r29
 5ba:	cf 93       	push	r28
 5bc:	cd b7       	in	r28, 0x3d	; 61
 5be:	de b7       	in	r29, 0x3e	; 62
 5c0:	2c 97       	sbiw	r28, 0x0c	; 12
 5c2:	0f b6       	in	r0, 0x3f	; 63
 5c4:	f8 94       	cli
 5c6:	de bf       	out	0x3e, r29	; 62
 5c8:	0f be       	out	0x3f, r0	; 63
 5ca:	cd bf       	out	0x3d, r28	; 61
 5cc:	89 83       	std	Y+1, r24	; 0x01
 5ce:	6a 83       	std	Y+2, r22	; 0x02
    /*switching over ports*/
	switch(Copy_u8PortID)
 5d0:	89 81       	ldd	r24, Y+1	; 0x01
 5d2:	28 2f       	mov	r18, r24
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	3c 87       	std	Y+12, r19	; 0x0c
 5d8:	2b 87       	std	Y+11, r18	; 0x0b
 5da:	8b 85       	ldd	r24, Y+11	; 0x0b
 5dc:	9c 85       	ldd	r25, Y+12	; 0x0c
 5de:	81 30       	cpi	r24, 0x01	; 1
 5e0:	91 05       	cpc	r25, r1
 5e2:	e1 f1       	breq	.+120    	; 0x65c <DIO_voidSetPortDirection+0xa4>
 5e4:	2b 85       	ldd	r18, Y+11	; 0x0b
 5e6:	3c 85       	ldd	r19, Y+12	; 0x0c
 5e8:	22 30       	cpi	r18, 0x02	; 2
 5ea:	31 05       	cpc	r19, r1
 5ec:	2c f4       	brge	.+10     	; 0x5f8 <DIO_voidSetPortDirection+0x40>
 5ee:	8b 85       	ldd	r24, Y+11	; 0x0b
 5f0:	9c 85       	ldd	r25, Y+12	; 0x0c
 5f2:	00 97       	sbiw	r24, 0x00	; 0
 5f4:	71 f0       	breq	.+28     	; 0x612 <DIO_voidSetPortDirection+0x5a>
 5f6:	9e c0       	rjmp	.+316    	; 0x734 <DIO_voidSetPortDirection+0x17c>
 5f8:	2b 85       	ldd	r18, Y+11	; 0x0b
 5fa:	3c 85       	ldd	r19, Y+12	; 0x0c
 5fc:	22 30       	cpi	r18, 0x02	; 2
 5fe:	31 05       	cpc	r19, r1
 600:	09 f4       	brne	.+2      	; 0x604 <DIO_voidSetPortDirection+0x4c>
 602:	51 c0       	rjmp	.+162    	; 0x6a6 <DIO_voidSetPortDirection+0xee>
 604:	8b 85       	ldd	r24, Y+11	; 0x0b
 606:	9c 85       	ldd	r25, Y+12	; 0x0c
 608:	83 30       	cpi	r24, 0x03	; 3
 60a:	91 05       	cpc	r25, r1
 60c:	09 f4       	brne	.+2      	; 0x610 <DIO_voidSetPortDirection+0x58>
 60e:	6f c0       	rjmp	.+222    	; 0x6ee <DIO_voidSetPortDirection+0x136>
 610:	91 c0       	rjmp	.+290    	; 0x734 <DIO_voidSetPortDirection+0x17c>
	{
			/*in case of setting the direction of port A*/
			case DIO_PORTA :

				switch(Copy_u8PortDirection)
 612:	8a 81       	ldd	r24, Y+2	; 0x02
 614:	28 2f       	mov	r18, r24
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	3a 87       	std	Y+10, r19	; 0x0a
 61a:	29 87       	std	Y+9, r18	; 0x09
 61c:	89 85       	ldd	r24, Y+9	; 0x09
 61e:	9a 85       	ldd	r25, Y+10	; 0x0a
 620:	81 30       	cpi	r24, 0x01	; 1
 622:	91 05       	cpc	r25, r1
 624:	79 f0       	breq	.+30     	; 0x644 <DIO_voidSetPortDirection+0x8c>
 626:	29 85       	ldd	r18, Y+9	; 0x09
 628:	3a 85       	ldd	r19, Y+10	; 0x0a
 62a:	22 30       	cpi	r18, 0x02	; 2
 62c:	31 05       	cpc	r19, r1
 62e:	71 f0       	breq	.+28     	; 0x64c <DIO_voidSetPortDirection+0x94>
 630:	89 85       	ldd	r24, Y+9	; 0x09
 632:	9a 85       	ldd	r25, Y+10	; 0x0a
 634:	00 97       	sbiw	r24, 0x00	; 0
 636:	09 f0       	breq	.+2      	; 0x63a <DIO_voidSetPortDirection+0x82>
 638:	7d c0       	rjmp	.+250    	; 0x734 <DIO_voidSetPortDirection+0x17c>
				{
					case DIO_PORT_OUTPUT :
						DDRA = 255 ;
 63a:	ea e3       	ldi	r30, 0x3A	; 58
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	8f ef       	ldi	r24, 0xFF	; 255
 640:	80 83       	st	Z, r24
 642:	78 c0       	rjmp	.+240    	; 0x734 <DIO_voidSetPortDirection+0x17c>
						break ;

					case DIO_PORT_INPUT_FLOAT :
						DDRA = 0 ;
 644:	ea e3       	ldi	r30, 0x3A	; 58
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	10 82       	st	Z, r1
 64a:	74 c0       	rjmp	.+232    	; 0x734 <DIO_voidSetPortDirection+0x17c>
						break ;

					case DIO_PORT_INPUT_PULLUP :
						DDRA = 0 ;
 64c:	ea e3       	ldi	r30, 0x3A	; 58
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	10 82       	st	Z, r1
						PORTA = 255 ;
 652:	eb e3       	ldi	r30, 0x3B	; 59
 654:	f0 e0       	ldi	r31, 0x00	; 0
 656:	8f ef       	ldi	r24, 0xFF	; 255
 658:	80 83       	st	Z, r24
 65a:	6c c0       	rjmp	.+216    	; 0x734 <DIO_voidSetPortDirection+0x17c>
				break ;

			/*in case of setting the direction of port B*/
			case DIO_PORTB :

				switch(Copy_u8PortDirection)
 65c:	8a 81       	ldd	r24, Y+2	; 0x02
 65e:	28 2f       	mov	r18, r24
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	38 87       	std	Y+8, r19	; 0x08
 664:	2f 83       	std	Y+7, r18	; 0x07
 666:	8f 81       	ldd	r24, Y+7	; 0x07
 668:	98 85       	ldd	r25, Y+8	; 0x08
 66a:	81 30       	cpi	r24, 0x01	; 1
 66c:	91 05       	cpc	r25, r1
 66e:	79 f0       	breq	.+30     	; 0x68e <DIO_voidSetPortDirection+0xd6>
 670:	2f 81       	ldd	r18, Y+7	; 0x07
 672:	38 85       	ldd	r19, Y+8	; 0x08
 674:	22 30       	cpi	r18, 0x02	; 2
 676:	31 05       	cpc	r19, r1
 678:	71 f0       	breq	.+28     	; 0x696 <DIO_voidSetPortDirection+0xde>
 67a:	8f 81       	ldd	r24, Y+7	; 0x07
 67c:	98 85       	ldd	r25, Y+8	; 0x08
 67e:	00 97       	sbiw	r24, 0x00	; 0
 680:	09 f0       	breq	.+2      	; 0x684 <DIO_voidSetPortDirection+0xcc>
 682:	58 c0       	rjmp	.+176    	; 0x734 <DIO_voidSetPortDirection+0x17c>
				{
					case DIO_PORT_OUTPUT :
						DDRB = 255 ;
 684:	e7 e3       	ldi	r30, 0x37	; 55
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	8f ef       	ldi	r24, 0xFF	; 255
 68a:	80 83       	st	Z, r24
 68c:	53 c0       	rjmp	.+166    	; 0x734 <DIO_voidSetPortDirection+0x17c>
						break ;

					case DIO_PORT_INPUT_FLOAT :
						DDRB = 0 ;
 68e:	e7 e3       	ldi	r30, 0x37	; 55
 690:	f0 e0       	ldi	r31, 0x00	; 0
 692:	10 82       	st	Z, r1
 694:	4f c0       	rjmp	.+158    	; 0x734 <DIO_voidSetPortDirection+0x17c>
						break ;

					case DIO_PORT_INPUT_PULLUP :
						DDRB = 0 ;
 696:	e7 e3       	ldi	r30, 0x37	; 55
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	10 82       	st	Z, r1
						PORTB = 255 ;
 69c:	e8 e3       	ldi	r30, 0x38	; 56
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	8f ef       	ldi	r24, 0xFF	; 255
 6a2:	80 83       	st	Z, r24
 6a4:	47 c0       	rjmp	.+142    	; 0x734 <DIO_voidSetPortDirection+0x17c>
				}
				break ;

			/*in case of setting the direction of port C*/
			case DIO_PORTC :
				switch(Copy_u8PortDirection)
 6a6:	8a 81       	ldd	r24, Y+2	; 0x02
 6a8:	28 2f       	mov	r18, r24
 6aa:	30 e0       	ldi	r19, 0x00	; 0
 6ac:	3e 83       	std	Y+6, r19	; 0x06
 6ae:	2d 83       	std	Y+5, r18	; 0x05
 6b0:	8d 81       	ldd	r24, Y+5	; 0x05
 6b2:	9e 81       	ldd	r25, Y+6	; 0x06
 6b4:	81 30       	cpi	r24, 0x01	; 1
 6b6:	91 05       	cpc	r25, r1
 6b8:	71 f0       	breq	.+28     	; 0x6d6 <DIO_voidSetPortDirection+0x11e>
 6ba:	2d 81       	ldd	r18, Y+5	; 0x05
 6bc:	3e 81       	ldd	r19, Y+6	; 0x06
 6be:	22 30       	cpi	r18, 0x02	; 2
 6c0:	31 05       	cpc	r19, r1
 6c2:	69 f0       	breq	.+26     	; 0x6de <DIO_voidSetPortDirection+0x126>
 6c4:	8d 81       	ldd	r24, Y+5	; 0x05
 6c6:	9e 81       	ldd	r25, Y+6	; 0x06
 6c8:	00 97       	sbiw	r24, 0x00	; 0
 6ca:	a1 f5       	brne	.+104    	; 0x734 <DIO_voidSetPortDirection+0x17c>
				{
					case DIO_PORT_OUTPUT :
						DDRC = 255 ;
 6cc:	e4 e3       	ldi	r30, 0x34	; 52
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	8f ef       	ldi	r24, 0xFF	; 255
 6d2:	80 83       	st	Z, r24
 6d4:	2f c0       	rjmp	.+94     	; 0x734 <DIO_voidSetPortDirection+0x17c>
						break ;

					case DIO_PORT_INPUT_FLOAT :
						DDRC = 0 ;
 6d6:	e4 e3       	ldi	r30, 0x34	; 52
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	10 82       	st	Z, r1
 6dc:	2b c0       	rjmp	.+86     	; 0x734 <DIO_voidSetPortDirection+0x17c>
						break ;

					case DIO_PORT_INPUT_PULLUP :
						DDRC  = 0 ;
 6de:	e4 e3       	ldi	r30, 0x34	; 52
 6e0:	f0 e0       	ldi	r31, 0x00	; 0
 6e2:	10 82       	st	Z, r1
						PORTC = 255 ;
 6e4:	e5 e3       	ldi	r30, 0x35	; 53
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	8f ef       	ldi	r24, 0xFF	; 255
 6ea:	80 83       	st	Z, r24
 6ec:	23 c0       	rjmp	.+70     	; 0x734 <DIO_voidSetPortDirection+0x17c>
				}
				break ;

			/*in case of setting the direction of port D*/
			case DIO_PORTD :
				switch(Copy_u8PortDirection)
 6ee:	8a 81       	ldd	r24, Y+2	; 0x02
 6f0:	28 2f       	mov	r18, r24
 6f2:	30 e0       	ldi	r19, 0x00	; 0
 6f4:	3c 83       	std	Y+4, r19	; 0x04
 6f6:	2b 83       	std	Y+3, r18	; 0x03
 6f8:	8b 81       	ldd	r24, Y+3	; 0x03
 6fa:	9c 81       	ldd	r25, Y+4	; 0x04
 6fc:	81 30       	cpi	r24, 0x01	; 1
 6fe:	91 05       	cpc	r25, r1
 700:	71 f0       	breq	.+28     	; 0x71e <DIO_voidSetPortDirection+0x166>
 702:	2b 81       	ldd	r18, Y+3	; 0x03
 704:	3c 81       	ldd	r19, Y+4	; 0x04
 706:	22 30       	cpi	r18, 0x02	; 2
 708:	31 05       	cpc	r19, r1
 70a:	69 f0       	breq	.+26     	; 0x726 <DIO_voidSetPortDirection+0x16e>
 70c:	8b 81       	ldd	r24, Y+3	; 0x03
 70e:	9c 81       	ldd	r25, Y+4	; 0x04
 710:	00 97       	sbiw	r24, 0x00	; 0
 712:	81 f4       	brne	.+32     	; 0x734 <DIO_voidSetPortDirection+0x17c>
				{
					case DIO_PORT_OUTPUT :
						DDRD = 255 ;
 714:	e1 e3       	ldi	r30, 0x31	; 49
 716:	f0 e0       	ldi	r31, 0x00	; 0
 718:	8f ef       	ldi	r24, 0xFF	; 255
 71a:	80 83       	st	Z, r24
 71c:	0b c0       	rjmp	.+22     	; 0x734 <DIO_voidSetPortDirection+0x17c>
						break ;

					case DIO_PORT_INPUT_FLOAT :
						DDRD = 0 ;
 71e:	e1 e3       	ldi	r30, 0x31	; 49
 720:	f0 e0       	ldi	r31, 0x00	; 0
 722:	10 82       	st	Z, r1
 724:	07 c0       	rjmp	.+14     	; 0x734 <DIO_voidSetPortDirection+0x17c>
						break ;

					case DIO_PORT_INPUT_PULLUP :
						DDRD  = 0 ;
 726:	e1 e3       	ldi	r30, 0x31	; 49
 728:	f0 e0       	ldi	r31, 0x00	; 0
 72a:	10 82       	st	Z, r1
						PORTD = 255 ;
 72c:	e2 e3       	ldi	r30, 0x32	; 50
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	8f ef       	ldi	r24, 0xFF	; 255
 732:	80 83       	st	Z, r24
				}

				break ;
	}

}
 734:	2c 96       	adiw	r28, 0x0c	; 12
 736:	0f b6       	in	r0, 0x3f	; 63
 738:	f8 94       	cli
 73a:	de bf       	out	0x3e, r29	; 62
 73c:	0f be       	out	0x3f, r0	; 63
 73e:	cd bf       	out	0x3d, r28	; 61
 740:	cf 91       	pop	r28
 742:	df 91       	pop	r29
 744:	08 95       	ret

00000746 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortID  , u8 Copy_u8PortValue)
{
 746:	df 93       	push	r29
 748:	cf 93       	push	r28
 74a:	00 d0       	rcall	.+0      	; 0x74c <DIO_u8SetPortValue+0x6>
 74c:	00 d0       	rcall	.+0      	; 0x74e <DIO_u8SetPortValue+0x8>
 74e:	0f 92       	push	r0
 750:	cd b7       	in	r28, 0x3d	; 61
 752:	de b7       	in	r29, 0x3e	; 62
 754:	8a 83       	std	Y+2, r24	; 0x02
 756:	6b 83       	std	Y+3, r22	; 0x03
	 /*this local variable is for error reporting*/
	 /*initially = 0 (ok)*/
	 u8 Local_u8ErrorState = 0 ;
 758:	19 82       	std	Y+1, r1	; 0x01

	/*checking for valid port value range*/
	if(Copy_u8PortValue >= 0 && Copy_u8PortValue <=255)
	{
		/*switching over ports*/
		switch(Copy_u8PortID)
 75a:	8a 81       	ldd	r24, Y+2	; 0x02
 75c:	28 2f       	mov	r18, r24
 75e:	30 e0       	ldi	r19, 0x00	; 0
 760:	3d 83       	std	Y+5, r19	; 0x05
 762:	2c 83       	std	Y+4, r18	; 0x04
 764:	8c 81       	ldd	r24, Y+4	; 0x04
 766:	9d 81       	ldd	r25, Y+5	; 0x05
 768:	81 30       	cpi	r24, 0x01	; 1
 76a:	91 05       	cpc	r25, r1
 76c:	d1 f0       	breq	.+52     	; 0x7a2 <DIO_u8SetPortValue+0x5c>
 76e:	2c 81       	ldd	r18, Y+4	; 0x04
 770:	3d 81       	ldd	r19, Y+5	; 0x05
 772:	22 30       	cpi	r18, 0x02	; 2
 774:	31 05       	cpc	r19, r1
 776:	2c f4       	brge	.+10     	; 0x782 <DIO_u8SetPortValue+0x3c>
 778:	8c 81       	ldd	r24, Y+4	; 0x04
 77a:	9d 81       	ldd	r25, Y+5	; 0x05
 77c:	00 97       	sbiw	r24, 0x00	; 0
 77e:	61 f0       	breq	.+24     	; 0x798 <DIO_u8SetPortValue+0x52>
 780:	1f c0       	rjmp	.+62     	; 0x7c0 <DIO_u8SetPortValue+0x7a>
 782:	2c 81       	ldd	r18, Y+4	; 0x04
 784:	3d 81       	ldd	r19, Y+5	; 0x05
 786:	22 30       	cpi	r18, 0x02	; 2
 788:	31 05       	cpc	r19, r1
 78a:	81 f0       	breq	.+32     	; 0x7ac <DIO_u8SetPortValue+0x66>
 78c:	8c 81       	ldd	r24, Y+4	; 0x04
 78e:	9d 81       	ldd	r25, Y+5	; 0x05
 790:	83 30       	cpi	r24, 0x03	; 3
 792:	91 05       	cpc	r25, r1
 794:	81 f0       	breq	.+32     	; 0x7b6 <DIO_u8SetPortValue+0x70>
 796:	14 c0       	rjmp	.+40     	; 0x7c0 <DIO_u8SetPortValue+0x7a>
		{
			/*in case of setting the direction of a pin in port A*/
			case DIO_PORTA :
				PORTA = Copy_u8PortValue ;
 798:	eb e3       	ldi	r30, 0x3B	; 59
 79a:	f0 e0       	ldi	r31, 0x00	; 0
 79c:	8b 81       	ldd	r24, Y+3	; 0x03
 79e:	80 83       	st	Z, r24
 7a0:	11 c0       	rjmp	.+34     	; 0x7c4 <DIO_u8SetPortValue+0x7e>
				break ;

			/*in case of setting the direction of a pin in port B*/
			case DIO_PORTB :
				PORTB = Copy_u8PortValue ;
 7a2:	e8 e3       	ldi	r30, 0x38	; 56
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	8b 81       	ldd	r24, Y+3	; 0x03
 7a8:	80 83       	st	Z, r24
 7aa:	0c c0       	rjmp	.+24     	; 0x7c4 <DIO_u8SetPortValue+0x7e>
				break ;

			/*in case of setting the direction of a pin in port C*/
			case DIO_PORTC :
				PORTC = Copy_u8PortValue ;
 7ac:	e5 e3       	ldi	r30, 0x35	; 53
 7ae:	f0 e0       	ldi	r31, 0x00	; 0
 7b0:	8b 81       	ldd	r24, Y+3	; 0x03
 7b2:	80 83       	st	Z, r24
 7b4:	07 c0       	rjmp	.+14     	; 0x7c4 <DIO_u8SetPortValue+0x7e>
				break ;

			/*in case of setting the direction of a pin in port D*/
			case DIO_PORTD :
				PORTD = Copy_u8PortValue ;
 7b6:	e2 e3       	ldi	r30, 0x32	; 50
 7b8:	f0 e0       	ldi	r31, 0x00	; 0
 7ba:	8b 81       	ldd	r24, Y+3	; 0x03
 7bc:	80 83       	st	Z, r24
 7be:	02 c0       	rjmp	.+4      	; 0x7c4 <DIO_u8SetPortValue+0x7e>
				break ;

			default :
				/*in case of invalid port ID*/
				Local_u8ErrorState = 1 ;
 7c0:	81 e0       	ldi	r24, 0x01	; 1
 7c2:	89 83       	std	Y+1, r24	; 0x01
		/*in case of port value out of valid range*/
		Local_u8ErrorState = 2 ;
	}

	/*return the error state*/
	return Local_u8ErrorState ;
 7c4:	89 81       	ldd	r24, Y+1	; 0x01

}
 7c6:	0f 90       	pop	r0
 7c8:	0f 90       	pop	r0
 7ca:	0f 90       	pop	r0
 7cc:	0f 90       	pop	r0
 7ce:	0f 90       	pop	r0
 7d0:	cf 91       	pop	r28
 7d2:	df 91       	pop	r29
 7d4:	08 95       	ret

000007d6 <DIO_voidTogglePin>:


void DIO_voidTogglePin(u8 Copy_u8PortID  , u8 Copy_u8Pin)
{
 7d6:	df 93       	push	r29
 7d8:	cf 93       	push	r28
 7da:	00 d0       	rcall	.+0      	; 0x7dc <DIO_voidTogglePin+0x6>
 7dc:	00 d0       	rcall	.+0      	; 0x7de <DIO_voidTogglePin+0x8>
 7de:	cd b7       	in	r28, 0x3d	; 61
 7e0:	de b7       	in	r29, 0x3e	; 62
 7e2:	89 83       	std	Y+1, r24	; 0x01
 7e4:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID)
 7e6:	89 81       	ldd	r24, Y+1	; 0x01
 7e8:	28 2f       	mov	r18, r24
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	3c 83       	std	Y+4, r19	; 0x04
 7ee:	2b 83       	std	Y+3, r18	; 0x03
 7f0:	8b 81       	ldd	r24, Y+3	; 0x03
 7f2:	9c 81       	ldd	r25, Y+4	; 0x04
 7f4:	81 30       	cpi	r24, 0x01	; 1
 7f6:	91 05       	cpc	r25, r1
 7f8:	49 f1       	breq	.+82     	; 0x84c <DIO_voidTogglePin+0x76>
 7fa:	2b 81       	ldd	r18, Y+3	; 0x03
 7fc:	3c 81       	ldd	r19, Y+4	; 0x04
 7fe:	22 30       	cpi	r18, 0x02	; 2
 800:	31 05       	cpc	r19, r1
 802:	2c f4       	brge	.+10     	; 0x80e <DIO_voidTogglePin+0x38>
 804:	8b 81       	ldd	r24, Y+3	; 0x03
 806:	9c 81       	ldd	r25, Y+4	; 0x04
 808:	00 97       	sbiw	r24, 0x00	; 0
 80a:	61 f0       	breq	.+24     	; 0x824 <DIO_voidTogglePin+0x4e>
 80c:	5a c0       	rjmp	.+180    	; 0x8c2 <__stack+0x63>
 80e:	2b 81       	ldd	r18, Y+3	; 0x03
 810:	3c 81       	ldd	r19, Y+4	; 0x04
 812:	22 30       	cpi	r18, 0x02	; 2
 814:	31 05       	cpc	r19, r1
 816:	71 f1       	breq	.+92     	; 0x874 <__stack+0x15>
 818:	8b 81       	ldd	r24, Y+3	; 0x03
 81a:	9c 81       	ldd	r25, Y+4	; 0x04
 81c:	83 30       	cpi	r24, 0x03	; 3
 81e:	91 05       	cpc	r25, r1
 820:	e9 f1       	breq	.+122    	; 0x89c <__stack+0x3d>
 822:	4f c0       	rjmp	.+158    	; 0x8c2 <__stack+0x63>
			{
				/*in case of setting the direction of a pin in port A*/
				case DIO_PORTA :
					TGL_BIT(PORTA , Copy_u8Pin );
 824:	ab e3       	ldi	r26, 0x3B	; 59
 826:	b0 e0       	ldi	r27, 0x00	; 0
 828:	eb e3       	ldi	r30, 0x3B	; 59
 82a:	f0 e0       	ldi	r31, 0x00	; 0
 82c:	80 81       	ld	r24, Z
 82e:	48 2f       	mov	r20, r24
 830:	8a 81       	ldd	r24, Y+2	; 0x02
 832:	28 2f       	mov	r18, r24
 834:	30 e0       	ldi	r19, 0x00	; 0
 836:	81 e0       	ldi	r24, 0x01	; 1
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	02 2e       	mov	r0, r18
 83c:	02 c0       	rjmp	.+4      	; 0x842 <DIO_voidTogglePin+0x6c>
 83e:	88 0f       	add	r24, r24
 840:	99 1f       	adc	r25, r25
 842:	0a 94       	dec	r0
 844:	e2 f7       	brpl	.-8      	; 0x83e <DIO_voidTogglePin+0x68>
 846:	84 27       	eor	r24, r20
 848:	8c 93       	st	X, r24
 84a:	3b c0       	rjmp	.+118    	; 0x8c2 <__stack+0x63>
					break ;

				/*in case of setting the direction of a pin in port B*/
				case DIO_PORTB :
					TGL_BIT(PORTB , Copy_u8Pin );
 84c:	a8 e3       	ldi	r26, 0x38	; 56
 84e:	b0 e0       	ldi	r27, 0x00	; 0
 850:	e8 e3       	ldi	r30, 0x38	; 56
 852:	f0 e0       	ldi	r31, 0x00	; 0
 854:	80 81       	ld	r24, Z
 856:	48 2f       	mov	r20, r24
 858:	8a 81       	ldd	r24, Y+2	; 0x02
 85a:	28 2f       	mov	r18, r24
 85c:	30 e0       	ldi	r19, 0x00	; 0
 85e:	81 e0       	ldi	r24, 0x01	; 1
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	02 2e       	mov	r0, r18
 864:	02 c0       	rjmp	.+4      	; 0x86a <__stack+0xb>
 866:	88 0f       	add	r24, r24
 868:	99 1f       	adc	r25, r25
 86a:	0a 94       	dec	r0
 86c:	e2 f7       	brpl	.-8      	; 0x866 <__stack+0x7>
 86e:	84 27       	eor	r24, r20
 870:	8c 93       	st	X, r24
 872:	27 c0       	rjmp	.+78     	; 0x8c2 <__stack+0x63>
					break ;

				/*in case of setting the direction of a pin in port C*/
				case DIO_PORTC :
					TGL_BIT(PORTC , Copy_u8Pin );
 874:	a5 e3       	ldi	r26, 0x35	; 53
 876:	b0 e0       	ldi	r27, 0x00	; 0
 878:	e5 e3       	ldi	r30, 0x35	; 53
 87a:	f0 e0       	ldi	r31, 0x00	; 0
 87c:	80 81       	ld	r24, Z
 87e:	48 2f       	mov	r20, r24
 880:	8a 81       	ldd	r24, Y+2	; 0x02
 882:	28 2f       	mov	r18, r24
 884:	30 e0       	ldi	r19, 0x00	; 0
 886:	81 e0       	ldi	r24, 0x01	; 1
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	02 2e       	mov	r0, r18
 88c:	02 c0       	rjmp	.+4      	; 0x892 <__stack+0x33>
 88e:	88 0f       	add	r24, r24
 890:	99 1f       	adc	r25, r25
 892:	0a 94       	dec	r0
 894:	e2 f7       	brpl	.-8      	; 0x88e <__stack+0x2f>
 896:	84 27       	eor	r24, r20
 898:	8c 93       	st	X, r24
 89a:	13 c0       	rjmp	.+38     	; 0x8c2 <__stack+0x63>
					break ;

				/*in case of setting the direction of a pin in port D*/
				case DIO_PORTD :
					TGL_BIT(PORTD , Copy_u8Pin );
 89c:	a2 e3       	ldi	r26, 0x32	; 50
 89e:	b0 e0       	ldi	r27, 0x00	; 0
 8a0:	e2 e3       	ldi	r30, 0x32	; 50
 8a2:	f0 e0       	ldi	r31, 0x00	; 0
 8a4:	80 81       	ld	r24, Z
 8a6:	48 2f       	mov	r20, r24
 8a8:	8a 81       	ldd	r24, Y+2	; 0x02
 8aa:	28 2f       	mov	r18, r24
 8ac:	30 e0       	ldi	r19, 0x00	; 0
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	02 2e       	mov	r0, r18
 8b4:	02 c0       	rjmp	.+4      	; 0x8ba <__stack+0x5b>
 8b6:	88 0f       	add	r24, r24
 8b8:	99 1f       	adc	r25, r25
 8ba:	0a 94       	dec	r0
 8bc:	e2 f7       	brpl	.-8      	; 0x8b6 <__stack+0x57>
 8be:	84 27       	eor	r24, r20
 8c0:	8c 93       	st	X, r24
					break ;
			}

}
 8c2:	0f 90       	pop	r0
 8c4:	0f 90       	pop	r0
 8c6:	0f 90       	pop	r0
 8c8:	0f 90       	pop	r0
 8ca:	cf 91       	pop	r28
 8cc:	df 91       	pop	r29
 8ce:	08 95       	ret

000008d0 <EXTI_voidINT1Init>:
/****************************************************************************************/
/*****************************Functions' implementation**********************************/
/****************************************************************************************/

void EXTI_voidINT1Init(void)
{
 8d0:	df 93       	push	r29
 8d2:	cf 93       	push	r28
 8d4:	cd b7       	in	r28, 0x3d	; 61
 8d6:	de b7       	in	r29, 0x3e	; 62
	/* set sense signal on int1 to be falling edge*/
	CLR_BIT(MCUCR , MCUCR_ISC10);
 8d8:	a5 e5       	ldi	r26, 0x55	; 85
 8da:	b0 e0       	ldi	r27, 0x00	; 0
 8dc:	e5 e5       	ldi	r30, 0x55	; 85
 8de:	f0 e0       	ldi	r31, 0x00	; 0
 8e0:	80 81       	ld	r24, Z
 8e2:	8b 7f       	andi	r24, 0xFB	; 251
 8e4:	8c 93       	st	X, r24
	SET_BIT(MCUCR , MCUCR_ISC11);
 8e6:	a5 e5       	ldi	r26, 0x55	; 85
 8e8:	b0 e0       	ldi	r27, 0x00	; 0
 8ea:	e5 e5       	ldi	r30, 0x55	; 85
 8ec:	f0 e0       	ldi	r31, 0x00	; 0
 8ee:	80 81       	ld	r24, Z
 8f0:	88 60       	ori	r24, 0x08	; 8
 8f2:	8c 93       	st	X, r24


	/*enable INT1*/
	SET_BIT(GICR , GICR_INT1);
 8f4:	ab e5       	ldi	r26, 0x5B	; 91
 8f6:	b0 e0       	ldi	r27, 0x00	; 0
 8f8:	eb e5       	ldi	r30, 0x5B	; 91
 8fa:	f0 e0       	ldi	r31, 0x00	; 0
 8fc:	80 81       	ld	r24, Z
 8fe:	80 68       	ori	r24, 0x80	; 128
 900:	8c 93       	st	X, r24

	/*enable global interrupt*/
	SET_BIT(SREG , SREG_IBIT);
 902:	af e5       	ldi	r26, 0x5F	; 95
 904:	b0 e0       	ldi	r27, 0x00	; 0
 906:	ef e5       	ldi	r30, 0x5F	; 95
 908:	f0 e0       	ldi	r31, 0x00	; 0
 90a:	80 81       	ld	r24, Z
 90c:	80 68       	ori	r24, 0x80	; 128
 90e:	8c 93       	st	X, r24
}
 910:	cf 91       	pop	r28
 912:	df 91       	pop	r29
 914:	08 95       	ret

00000916 <EXTI_voidSetCallBackINT0>:


void EXTI_voidSetCallBackINT0(void(*Copy_ptrToFunc)(void))
{
 916:	df 93       	push	r29
 918:	cf 93       	push	r28
 91a:	00 d0       	rcall	.+0      	; 0x91c <EXTI_voidSetCallBackINT0+0x6>
 91c:	cd b7       	in	r28, 0x3d	; 61
 91e:	de b7       	in	r29, 0x3e	; 62
 920:	9a 83       	std	Y+2, r25	; 0x02
 922:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_ptrToFunc != NULL)
 924:	89 81       	ldd	r24, Y+1	; 0x01
 926:	9a 81       	ldd	r25, Y+2	; 0x02
 928:	00 97       	sbiw	r24, 0x00	; 0
 92a:	31 f0       	breq	.+12     	; 0x938 <EXTI_voidSetCallBackINT0+0x22>
	{
		EXTI_Int0CallBack = Copy_ptrToFunc ;
 92c:	89 81       	ldd	r24, Y+1	; 0x01
 92e:	9a 81       	ldd	r25, Y+2	; 0x02
 930:	90 93 61 00 	sts	0x0061, r25
 934:	80 93 60 00 	sts	0x0060, r24
	}
	else
	{
		/*do nothing*/
	}
}
 938:	0f 90       	pop	r0
 93a:	0f 90       	pop	r0
 93c:	cf 91       	pop	r28
 93e:	df 91       	pop	r29
 940:	08 95       	ret

00000942 <__vector_1>:


/*ISR for INT0*/
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
 942:	1f 92       	push	r1
 944:	0f 92       	push	r0
 946:	0f b6       	in	r0, 0x3f	; 63
 948:	0f 92       	push	r0
 94a:	11 24       	eor	r1, r1
 94c:	2f 93       	push	r18
 94e:	3f 93       	push	r19
 950:	4f 93       	push	r20
 952:	5f 93       	push	r21
 954:	6f 93       	push	r22
 956:	7f 93       	push	r23
 958:	8f 93       	push	r24
 95a:	9f 93       	push	r25
 95c:	af 93       	push	r26
 95e:	bf 93       	push	r27
 960:	ef 93       	push	r30
 962:	ff 93       	push	r31
 964:	df 93       	push	r29
 966:	cf 93       	push	r28
 968:	cd b7       	in	r28, 0x3d	; 61
 96a:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_Int0CallBack != NULL)
 96c:	80 91 60 00 	lds	r24, 0x0060
 970:	90 91 61 00 	lds	r25, 0x0061
 974:	00 97       	sbiw	r24, 0x00	; 0
 976:	29 f0       	breq	.+10     	; 0x982 <__vector_1+0x40>
	{
		EXTI_Int0CallBack();
 978:	e0 91 60 00 	lds	r30, 0x0060
 97c:	f0 91 61 00 	lds	r31, 0x0061
 980:	09 95       	icall
	}
	else
	{
		/*do nothing*/
	}
}
 982:	cf 91       	pop	r28
 984:	df 91       	pop	r29
 986:	ff 91       	pop	r31
 988:	ef 91       	pop	r30
 98a:	bf 91       	pop	r27
 98c:	af 91       	pop	r26
 98e:	9f 91       	pop	r25
 990:	8f 91       	pop	r24
 992:	7f 91       	pop	r23
 994:	6f 91       	pop	r22
 996:	5f 91       	pop	r21
 998:	4f 91       	pop	r20
 99a:	3f 91       	pop	r19
 99c:	2f 91       	pop	r18
 99e:	0f 90       	pop	r0
 9a0:	0f be       	out	0x3f, r0	; 63
 9a2:	0f 90       	pop	r0
 9a4:	1f 90       	pop	r1
 9a6:	18 95       	reti

000009a8 <main>:
#include "EXTI_interface.h"



void main(void)
{
 9a8:	df 93       	push	r29
 9aa:	cf 93       	push	r28
 9ac:	cd b7       	in	r28, 0x3d	; 61
 9ae:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_PORTC , DIO_PIN0  ,DIO_PIN_OUTPUT );     //led
 9b0:	82 e0       	ldi	r24, 0x02	; 2
 9b2:	60 e0       	ldi	r22, 0x00	; 0
 9b4:	40 e0       	ldi	r20, 0x00	; 0
 9b6:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD , DIO_PIN3  ,DIO_PIN_INPUT_PULLUP );     //push button at INT0 pin (PD2)
 9ba:	83 e0       	ldi	r24, 0x03	; 3
 9bc:	63 e0       	ldi	r22, 0x03	; 3
 9be:	42 e0       	ldi	r20, 0x02	; 2
 9c0:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_voidSetPinDirection>
	EXTI_voidINT1Init();
 9c4:	0e 94 68 04 	call	0x8d0	; 0x8d0 <EXTI_voidINT1Init>
 9c8:	ff cf       	rjmp	.-2      	; 0x9c8 <main+0x20>

000009ca <__vector_2>:

}

void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
 9ca:	1f 92       	push	r1
 9cc:	0f 92       	push	r0
 9ce:	0f b6       	in	r0, 0x3f	; 63
 9d0:	0f 92       	push	r0
 9d2:	11 24       	eor	r1, r1
 9d4:	2f 93       	push	r18
 9d6:	3f 93       	push	r19
 9d8:	4f 93       	push	r20
 9da:	5f 93       	push	r21
 9dc:	6f 93       	push	r22
 9de:	7f 93       	push	r23
 9e0:	8f 93       	push	r24
 9e2:	9f 93       	push	r25
 9e4:	af 93       	push	r26
 9e6:	bf 93       	push	r27
 9e8:	ef 93       	push	r30
 9ea:	ff 93       	push	r31
 9ec:	df 93       	push	r29
 9ee:	cf 93       	push	r28
 9f0:	cd b7       	in	r28, 0x3d	; 61
 9f2:	de b7       	in	r29, 0x3e	; 62
	DIO_voidTogglePin(DIO_PORTC , DIO_PIN0);
 9f4:	82 e0       	ldi	r24, 0x02	; 2
 9f6:	60 e0       	ldi	r22, 0x00	; 0
 9f8:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <DIO_voidTogglePin>
}
 9fc:	cf 91       	pop	r28
 9fe:	df 91       	pop	r29
 a00:	ff 91       	pop	r31
 a02:	ef 91       	pop	r30
 a04:	bf 91       	pop	r27
 a06:	af 91       	pop	r26
 a08:	9f 91       	pop	r25
 a0a:	8f 91       	pop	r24
 a0c:	7f 91       	pop	r23
 a0e:	6f 91       	pop	r22
 a10:	5f 91       	pop	r21
 a12:	4f 91       	pop	r20
 a14:	3f 91       	pop	r19
 a16:	2f 91       	pop	r18
 a18:	0f 90       	pop	r0
 a1a:	0f be       	out	0x3f, r0	; 63
 a1c:	0f 90       	pop	r0
 a1e:	1f 90       	pop	r1
 a20:	18 95       	reti

00000a22 <_exit>:
 a22:	f8 94       	cli

00000a24 <__stop_program>:
 a24:	ff cf       	rjmp	.-2      	; 0xa24 <__stop_program>
