
ICU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002386  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00002386  0000241a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800074  00800074  0000242e  2**0
                  ALLOC
  3 .stab         000019c8  00000000  00000000  00002430  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c00  00000000  00000000  00003df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000049f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00004b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00004ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00006d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00007e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00008db0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00008f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  000091f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009a80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 9c 10 	jmp	0x2138	; 0x2138 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cf 10 	call	0x219e	; 0x219e <main>
      8a:	0c 94 c1 11 	jmp	0x2382	; 0x2382 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e6       	ldi	r26, 0x6B	; 107
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a6 11 	jmp	0x234c	; 0x234c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 96 11 	jmp	0x232c	; 0x232c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 96 11 	jmp	0x232c	; 0x232c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e6       	ldi	r24, 0x6B	; 107
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a6 11 	jmp	0x234c	; 0x234c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 92 11 	jmp	0x2324	; 0x2324 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e6       	ldi	r22, 0x6B	; 107
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 96 11 	jmp	0x232c	; 0x232c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 96 11 	jmp	0x232c	; 0x232c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 96 11 	jmp	0x232c	; 0x232c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 9a 11 	jmp	0x2334	; 0x2334 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 b6 11 	jmp	0x236c	; 0x236c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_voidSetPinDirection>:
/******************************************************************************/
/*************************Functions' implementation****************************/
/******************************************************************************/

void DIO_voidSetPinDirection(u8 Copy_u8PortID , u8 Copy_u8Pin , u8 Copy_u8PinDirection)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	2d 97       	sbiw	r28, 0x0d	; 13
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	89 83       	std	Y+1, r24	; 0x01
     cb4:	6a 83       	std	Y+2, r22	; 0x02
     cb6:	4b 83       	std	Y+3, r20	; 0x03
	/*switching over ports*/
	switch(Copy_u8PortID)
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	3d 87       	std	Y+13, r19	; 0x0d
     cc0:	2c 87       	std	Y+12, r18	; 0x0c
     cc2:	8c 85       	ldd	r24, Y+12	; 0x0c
     cc4:	9d 85       	ldd	r25, Y+13	; 0x0d
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	91 05       	cpc	r25, r1
     cca:	09 f4       	brne	.+2      	; 0xcce <DIO_voidSetPinDirection+0x30>
     ccc:	7b c0       	rjmp	.+246    	; 0xdc4 <DIO_voidSetPinDirection+0x126>
     cce:	2c 85       	ldd	r18, Y+12	; 0x0c
     cd0:	3d 85       	ldd	r19, Y+13	; 0x0d
     cd2:	22 30       	cpi	r18, 0x02	; 2
     cd4:	31 05       	cpc	r19, r1
     cd6:	2c f4       	brge	.+10     	; 0xce2 <DIO_voidSetPinDirection+0x44>
     cd8:	8c 85       	ldd	r24, Y+12	; 0x0c
     cda:	9d 85       	ldd	r25, Y+13	; 0x0d
     cdc:	00 97       	sbiw	r24, 0x00	; 0
     cde:	71 f0       	breq	.+28     	; 0xcfc <DIO_voidSetPinDirection+0x5e>
     ce0:	9c c1       	rjmp	.+824    	; 0x101a <DIO_voidSetPinDirection+0x37c>
     ce2:	2c 85       	ldd	r18, Y+12	; 0x0c
     ce4:	3d 85       	ldd	r19, Y+13	; 0x0d
     ce6:	22 30       	cpi	r18, 0x02	; 2
     ce8:	31 05       	cpc	r19, r1
     cea:	09 f4       	brne	.+2      	; 0xcee <DIO_voidSetPinDirection+0x50>
     cec:	cf c0       	rjmp	.+414    	; 0xe8c <DIO_voidSetPinDirection+0x1ee>
     cee:	8c 85       	ldd	r24, Y+12	; 0x0c
     cf0:	9d 85       	ldd	r25, Y+13	; 0x0d
     cf2:	83 30       	cpi	r24, 0x03	; 3
     cf4:	91 05       	cpc	r25, r1
     cf6:	09 f4       	brne	.+2      	; 0xcfa <DIO_voidSetPinDirection+0x5c>
     cf8:	2d c1       	rjmp	.+602    	; 0xf54 <DIO_voidSetPinDirection+0x2b6>
     cfa:	8f c1       	rjmp	.+798    	; 0x101a <DIO_voidSetPinDirection+0x37c>
	{
		/*in case of setting the direction of a pin in port A*/
		case DIO_PORTA :

			/*switch over different directions*/
			switch(Copy_u8PinDirection)
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	28 2f       	mov	r18, r24
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	3b 87       	std	Y+11, r19	; 0x0b
     d04:	2a 87       	std	Y+10, r18	; 0x0a
     d06:	8a 85       	ldd	r24, Y+10	; 0x0a
     d08:	9b 85       	ldd	r25, Y+11	; 0x0b
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	91 05       	cpc	r25, r1
     d0e:	f1 f0       	breq	.+60     	; 0xd4c <DIO_voidSetPinDirection+0xae>
     d10:	2a 85       	ldd	r18, Y+10	; 0x0a
     d12:	3b 85       	ldd	r19, Y+11	; 0x0b
     d14:	22 30       	cpi	r18, 0x02	; 2
     d16:	31 05       	cpc	r19, r1
     d18:	71 f1       	breq	.+92     	; 0xd76 <DIO_voidSetPinDirection+0xd8>
     d1a:	8a 85       	ldd	r24, Y+10	; 0x0a
     d1c:	9b 85       	ldd	r25, Y+11	; 0x0b
     d1e:	00 97       	sbiw	r24, 0x00	; 0
     d20:	09 f0       	breq	.+2      	; 0xd24 <DIO_voidSetPinDirection+0x86>
     d22:	7b c1       	rjmp	.+758    	; 0x101a <DIO_voidSetPinDirection+0x37c>
			{
				/*in case of setting the pin to be output*/
				case DIO_PIN_OUTPUT :
					SET_BIT(DDRA , Copy_u8Pin);
     d24:	aa e3       	ldi	r26, 0x3A	; 58
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	ea e3       	ldi	r30, 0x3A	; 58
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	48 2f       	mov	r20, r24
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	02 2e       	mov	r0, r18
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <DIO_voidSetPinDirection+0xa4>
     d3e:	88 0f       	add	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	0a 94       	dec	r0
     d44:	e2 f7       	brpl	.-8      	; 0xd3e <DIO_voidSetPinDirection+0xa0>
     d46:	84 2b       	or	r24, r20
     d48:	8c 93       	st	X, r24
     d4a:	67 c1       	rjmp	.+718    	; 0x101a <DIO_voidSetPinDirection+0x37c>
					break ;

				/*in case of setting the pin direction to be input float*/
				case DIO_PIN_INPUT_FLOAT :
					CLR_BIT(DDRA , Copy_u8Pin);
     d4c:	aa e3       	ldi	r26, 0x3A	; 58
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	ea e3       	ldi	r30, 0x3A	; 58
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	48 2f       	mov	r20, r24
     d58:	8a 81       	ldd	r24, Y+2	; 0x02
     d5a:	28 2f       	mov	r18, r24
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	02 2e       	mov	r0, r18
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <DIO_voidSetPinDirection+0xcc>
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	0a 94       	dec	r0
     d6c:	e2 f7       	brpl	.-8      	; 0xd66 <DIO_voidSetPinDirection+0xc8>
     d6e:	80 95       	com	r24
     d70:	84 23       	and	r24, r20
     d72:	8c 93       	st	X, r24
     d74:	52 c1       	rjmp	.+676    	; 0x101a <DIO_voidSetPinDirection+0x37c>
					break ;

				/*in case of setting the pin direction to be input pull up*/
				case DIO_PIN_INPUT_PULLUP :
					CLR_BIT(DDRA , Copy_u8Pin);
     d76:	aa e3       	ldi	r26, 0x3A	; 58
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	ea e3       	ldi	r30, 0x3A	; 58
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	48 2f       	mov	r20, r24
     d82:	8a 81       	ldd	r24, Y+2	; 0x02
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <DIO_voidSetPinDirection+0xf4>
     d8e:	88 0f       	add	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	2a 95       	dec	r18
     d94:	e2 f7       	brpl	.-8      	; 0xd8e <DIO_voidSetPinDirection+0xf0>
     d96:	80 95       	com	r24
     d98:	84 23       	and	r24, r20
     d9a:	8c 93       	st	X, r24
					SET_BIT(PORTA , Copy_u8Pin);
     d9c:	ab e3       	ldi	r26, 0x3B	; 59
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	eb e3       	ldi	r30, 0x3B	; 59
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	48 2f       	mov	r20, r24
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	02 2e       	mov	r0, r18
     db4:	02 c0       	rjmp	.+4      	; 0xdba <DIO_voidSetPinDirection+0x11c>
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	0a 94       	dec	r0
     dbc:	e2 f7       	brpl	.-8      	; 0xdb6 <DIO_voidSetPinDirection+0x118>
     dbe:	84 2b       	or	r24, r20
     dc0:	8c 93       	st	X, r24
     dc2:	2b c1       	rjmp	.+598    	; 0x101a <DIO_voidSetPinDirection+0x37c>

		/*in case of setting the direction of a pin in port B*/
		case DIO_PORTB :

			/*switch over different directions*/
			switch(Copy_u8PinDirection)
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	39 87       	std	Y+9, r19	; 0x09
     dcc:	28 87       	std	Y+8, r18	; 0x08
     dce:	88 85       	ldd	r24, Y+8	; 0x08
     dd0:	99 85       	ldd	r25, Y+9	; 0x09
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	91 05       	cpc	r25, r1
     dd6:	f1 f0       	breq	.+60     	; 0xe14 <DIO_voidSetPinDirection+0x176>
     dd8:	28 85       	ldd	r18, Y+8	; 0x08
     dda:	39 85       	ldd	r19, Y+9	; 0x09
     ddc:	22 30       	cpi	r18, 0x02	; 2
     dde:	31 05       	cpc	r19, r1
     de0:	71 f1       	breq	.+92     	; 0xe3e <DIO_voidSetPinDirection+0x1a0>
     de2:	88 85       	ldd	r24, Y+8	; 0x08
     de4:	99 85       	ldd	r25, Y+9	; 0x09
     de6:	00 97       	sbiw	r24, 0x00	; 0
     de8:	09 f0       	breq	.+2      	; 0xdec <DIO_voidSetPinDirection+0x14e>
     dea:	17 c1       	rjmp	.+558    	; 0x101a <DIO_voidSetPinDirection+0x37c>
			{
				/*in case of setting the pin to be output*/
				case DIO_PIN_OUTPUT :
					SET_BIT(DDRB , Copy_u8Pin);
     dec:	a7 e3       	ldi	r26, 0x37	; 55
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e7 e3       	ldi	r30, 0x37	; 55
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	48 2f       	mov	r20, r24
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	02 2e       	mov	r0, r18
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <DIO_voidSetPinDirection+0x16c>
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	0a 94       	dec	r0
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <DIO_voidSetPinDirection+0x168>
     e0e:	84 2b       	or	r24, r20
     e10:	8c 93       	st	X, r24
     e12:	03 c1       	rjmp	.+518    	; 0x101a <DIO_voidSetPinDirection+0x37c>
					break ;

				/*in case of setting the pin direction to be input float*/
				case DIO_PIN_INPUT_FLOAT :
					CLR_BIT(DDRB , Copy_u8Pin);
     e14:	a7 e3       	ldi	r26, 0x37	; 55
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e7 e3       	ldi	r30, 0x37	; 55
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 2e       	mov	r0, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <DIO_voidSetPinDirection+0x194>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <DIO_voidSetPinDirection+0x190>
     e36:	80 95       	com	r24
     e38:	84 23       	and	r24, r20
     e3a:	8c 93       	st	X, r24
     e3c:	ee c0       	rjmp	.+476    	; 0x101a <DIO_voidSetPinDirection+0x37c>
					break ;

				/*in case of setting the pin direction to be input pull up*/
				case DIO_PIN_INPUT_PULLUP :
					CLR_BIT(DDRB , Copy_u8Pin);
     e3e:	a7 e3       	ldi	r26, 0x37	; 55
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e7 e3       	ldi	r30, 0x37	; 55
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	48 2f       	mov	r20, r24
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <DIO_voidSetPinDirection+0x1bc>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	2a 95       	dec	r18
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <DIO_voidSetPinDirection+0x1b8>
     e5e:	80 95       	com	r24
     e60:	84 23       	and	r24, r20
     e62:	8c 93       	st	X, r24
					SET_BIT(PORTB , Copy_u8Pin);
     e64:	a8 e3       	ldi	r26, 0x38	; 56
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e8 e3       	ldi	r30, 0x38	; 56
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_voidSetPinDirection+0x1e4>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_voidSetPinDirection+0x1e0>
     e86:	84 2b       	or	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	c7 c0       	rjmp	.+398    	; 0x101a <DIO_voidSetPinDirection+0x37c>

		/*in case of setting the direction of a pin in port C*/
		case DIO_PORTC :

			/*switch over different directions*/
			switch(Copy_u8PinDirection)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	3f 83       	std	Y+7, r19	; 0x07
     e94:	2e 83       	std	Y+6, r18	; 0x06
     e96:	8e 81       	ldd	r24, Y+6	; 0x06
     e98:	9f 81       	ldd	r25, Y+7	; 0x07
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	91 05       	cpc	r25, r1
     e9e:	f1 f0       	breq	.+60     	; 0xedc <DIO_voidSetPinDirection+0x23e>
     ea0:	2e 81       	ldd	r18, Y+6	; 0x06
     ea2:	3f 81       	ldd	r19, Y+7	; 0x07
     ea4:	22 30       	cpi	r18, 0x02	; 2
     ea6:	31 05       	cpc	r19, r1
     ea8:	71 f1       	breq	.+92     	; 0xf06 <DIO_voidSetPinDirection+0x268>
     eaa:	8e 81       	ldd	r24, Y+6	; 0x06
     eac:	9f 81       	ldd	r25, Y+7	; 0x07
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	09 f0       	breq	.+2      	; 0xeb4 <DIO_voidSetPinDirection+0x216>
     eb2:	b3 c0       	rjmp	.+358    	; 0x101a <DIO_voidSetPinDirection+0x37c>
			{
				/*in case of setting the pin to be output*/
				case DIO_PIN_OUTPUT :
					SET_BIT(DDRC , Copy_u8Pin);
     eb4:	a4 e3       	ldi	r26, 0x34	; 52
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	e4 e3       	ldi	r30, 0x34	; 52
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	48 2f       	mov	r20, r24
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	02 2e       	mov	r0, r18
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <DIO_voidSetPinDirection+0x234>
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	0a 94       	dec	r0
     ed4:	e2 f7       	brpl	.-8      	; 0xece <DIO_voidSetPinDirection+0x230>
     ed6:	84 2b       	or	r24, r20
     ed8:	8c 93       	st	X, r24
     eda:	9f c0       	rjmp	.+318    	; 0x101a <DIO_voidSetPinDirection+0x37c>
					break ;

				/*in case of setting the pin direction to be input float*/
				case DIO_PIN_INPUT_FLOAT :
					CLR_BIT(DDRC , Copy_u8Pin);
     edc:	a4 e3       	ldi	r26, 0x34	; 52
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e4 e3       	ldi	r30, 0x34	; 52
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	48 2f       	mov	r20, r24
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 2e       	mov	r0, r18
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <DIO_voidSetPinDirection+0x25c>
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	0a 94       	dec	r0
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <DIO_voidSetPinDirection+0x258>
     efe:	80 95       	com	r24
     f00:	84 23       	and	r24, r20
     f02:	8c 93       	st	X, r24
     f04:	8a c0       	rjmp	.+276    	; 0x101a <DIO_voidSetPinDirection+0x37c>
					break ;

				/*in case of setting the pin direction to be input pull up*/
				case DIO_PIN_INPUT_PULLUP :
					CLR_BIT(DDRC , Copy_u8Pin);
     f06:	a4 e3       	ldi	r26, 0x34	; 52
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e4 e3       	ldi	r30, 0x34	; 52
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	48 2f       	mov	r20, r24
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <DIO_voidSetPinDirection+0x284>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	2a 95       	dec	r18
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <DIO_voidSetPinDirection+0x280>
     f26:	80 95       	com	r24
     f28:	84 23       	and	r24, r20
     f2a:	8c 93       	st	X, r24
					SET_BIT(PORTC , Copy_u8Pin);
     f2c:	a5 e3       	ldi	r26, 0x35	; 53
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e5 e3       	ldi	r30, 0x35	; 53
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	48 2f       	mov	r20, r24
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 2e       	mov	r0, r18
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <DIO_voidSetPinDirection+0x2ac>
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	0a 94       	dec	r0
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <DIO_voidSetPinDirection+0x2a8>
     f4e:	84 2b       	or	r24, r20
     f50:	8c 93       	st	X, r24
     f52:	63 c0       	rjmp	.+198    	; 0x101a <DIO_voidSetPinDirection+0x37c>

		/*in case of setting the direction of a pin in port D*/
		case DIO_PORTD :

			/*switch over different directions*/
			switch(Copy_u8PinDirection)
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	3d 83       	std	Y+5, r19	; 0x05
     f5c:	2c 83       	std	Y+4, r18	; 0x04
     f5e:	8c 81       	ldd	r24, Y+4	; 0x04
     f60:	9d 81       	ldd	r25, Y+5	; 0x05
     f62:	81 30       	cpi	r24, 0x01	; 1
     f64:	91 05       	cpc	r25, r1
     f66:	f1 f0       	breq	.+60     	; 0xfa4 <DIO_voidSetPinDirection+0x306>
     f68:	2c 81       	ldd	r18, Y+4	; 0x04
     f6a:	3d 81       	ldd	r19, Y+5	; 0x05
     f6c:	22 30       	cpi	r18, 0x02	; 2
     f6e:	31 05       	cpc	r19, r1
     f70:	71 f1       	breq	.+92     	; 0xfce <DIO_voidSetPinDirection+0x330>
     f72:	8c 81       	ldd	r24, Y+4	; 0x04
     f74:	9d 81       	ldd	r25, Y+5	; 0x05
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	09 f0       	breq	.+2      	; 0xf7c <DIO_voidSetPinDirection+0x2de>
     f7a:	4f c0       	rjmp	.+158    	; 0x101a <DIO_voidSetPinDirection+0x37c>
			{
				/*in case of setting the pin to be output*/
				case DIO_PIN_OUTPUT :
					SET_BIT(DDRD , Copy_u8Pin);
     f7c:	a1 e3       	ldi	r26, 0x31	; 49
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e1 e3       	ldi	r30, 0x31	; 49
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 2e       	mov	r0, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <DIO_voidSetPinDirection+0x2fc>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <DIO_voidSetPinDirection+0x2f8>
     f9e:	84 2b       	or	r24, r20
     fa0:	8c 93       	st	X, r24
     fa2:	3b c0       	rjmp	.+118    	; 0x101a <DIO_voidSetPinDirection+0x37c>
					break ;

				/*in case of setting the pin direction to be input float*/
				case DIO_PIN_INPUT_FLOAT :
					CLR_BIT(DDRD , Copy_u8Pin);
     fa4:	a1 e3       	ldi	r26, 0x31	; 49
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e1 e3       	ldi	r30, 0x31	; 49
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	48 2f       	mov	r20, r24
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	02 2e       	mov	r0, r18
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <DIO_voidSetPinDirection+0x324>
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	0a 94       	dec	r0
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <DIO_voidSetPinDirection+0x320>
     fc6:	80 95       	com	r24
     fc8:	84 23       	and	r24, r20
     fca:	8c 93       	st	X, r24
     fcc:	26 c0       	rjmp	.+76     	; 0x101a <DIO_voidSetPinDirection+0x37c>
					break ;

				/*in case of setting the pin direction to be input pull up*/
				case DIO_PIN_INPUT_PULLUP :
					CLR_BIT(DDRD , Copy_u8Pin);
     fce:	a1 e3       	ldi	r26, 0x31	; 49
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e1 e3       	ldi	r30, 0x31	; 49
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <DIO_voidSetPinDirection+0x34c>
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	2a 95       	dec	r18
     fec:	e2 f7       	brpl	.-8      	; 0xfe6 <DIO_voidSetPinDirection+0x348>
     fee:	80 95       	com	r24
     ff0:	84 23       	and	r24, r20
     ff2:	8c 93       	st	X, r24
					SET_BIT(PORTD , Copy_u8Pin);
     ff4:	a2 e3       	ldi	r26, 0x32	; 50
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e2 e3       	ldi	r30, 0x32	; 50
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	48 2f       	mov	r20, r24
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 2e       	mov	r0, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <DIO_voidSetPinDirection+0x374>
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	0a 94       	dec	r0
    1014:	e2 f7       	brpl	.-8      	; 0x100e <DIO_voidSetPinDirection+0x370>
    1016:	84 2b       	or	r24, r20
    1018:	8c 93       	st	X, r24
					break ;
			}
			break ;
	}
}
    101a:	2d 96       	adiw	r28, 0x0d	; 13
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <DIO_voidSetPinValue>:



void DIO_voidSetPinValue(u8 Copy_u8PortID , u8 Copy_u8Pin , u8 Copy_u8PinValue)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	00 d0       	rcall	.+0      	; 0x1032 <DIO_voidSetPinValue+0x6>
    1032:	00 d0       	rcall	.+0      	; 0x1034 <DIO_voidSetPinValue+0x8>
    1034:	0f 92       	push	r0
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	89 83       	std	Y+1, r24	; 0x01
    103c:	6a 83       	std	Y+2, r22	; 0x02
    103e:	4b 83       	std	Y+3, r20	; 0x03
	    /*switching over ports*/
		switch(Copy_u8PortID)
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	3d 83       	std	Y+5, r19	; 0x05
    1048:	2c 83       	std	Y+4, r18	; 0x04
    104a:	4c 81       	ldd	r20, Y+4	; 0x04
    104c:	5d 81       	ldd	r21, Y+5	; 0x05
    104e:	41 30       	cpi	r20, 0x01	; 1
    1050:	51 05       	cpc	r21, r1
    1052:	09 f4       	brne	.+2      	; 0x1056 <DIO_voidSetPinValue+0x2a>
    1054:	40 c0       	rjmp	.+128    	; 0x10d6 <DIO_voidSetPinValue+0xaa>
    1056:	8c 81       	ldd	r24, Y+4	; 0x04
    1058:	9d 81       	ldd	r25, Y+5	; 0x05
    105a:	82 30       	cpi	r24, 0x02	; 2
    105c:	91 05       	cpc	r25, r1
    105e:	2c f4       	brge	.+10     	; 0x106a <DIO_voidSetPinValue+0x3e>
    1060:	ec 81       	ldd	r30, Y+4	; 0x04
    1062:	fd 81       	ldd	r31, Y+5	; 0x05
    1064:	30 97       	sbiw	r30, 0x00	; 0
    1066:	71 f0       	breq	.+28     	; 0x1084 <DIO_voidSetPinValue+0x58>
    1068:	b0 c0       	rjmp	.+352    	; 0x11ca <DIO_voidSetPinValue+0x19e>
    106a:	2c 81       	ldd	r18, Y+4	; 0x04
    106c:	3d 81       	ldd	r19, Y+5	; 0x05
    106e:	22 30       	cpi	r18, 0x02	; 2
    1070:	31 05       	cpc	r19, r1
    1072:	09 f4       	brne	.+2      	; 0x1076 <DIO_voidSetPinValue+0x4a>
    1074:	59 c0       	rjmp	.+178    	; 0x1128 <DIO_voidSetPinValue+0xfc>
    1076:	4c 81       	ldd	r20, Y+4	; 0x04
    1078:	5d 81       	ldd	r21, Y+5	; 0x05
    107a:	43 30       	cpi	r20, 0x03	; 3
    107c:	51 05       	cpc	r21, r1
    107e:	09 f4       	brne	.+2      	; 0x1082 <DIO_voidSetPinValue+0x56>
    1080:	7c c0       	rjmp	.+248    	; 0x117a <DIO_voidSetPinValue+0x14e>
    1082:	a3 c0       	rjmp	.+326    	; 0x11ca <DIO_voidSetPinValue+0x19e>
		{
			/*in case of setting the direction of a pin in port A*/
			case DIO_PORTA :
				WRT_BIT(PORTA , Copy_u8Pin , Copy_u8PinValue);
    1084:	6b e3       	ldi	r22, 0x3B	; 59
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	88 2f       	mov	r24, r24
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	f9 01       	movw	r30, r18
    1096:	02 c0       	rjmp	.+4      	; 0x109c <DIO_voidSetPinValue+0x70>
    1098:	ee 0f       	add	r30, r30
    109a:	ff 1f       	adc	r31, r31
    109c:	8a 95       	dec	r24
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <DIO_voidSetPinValue+0x6c>
    10a0:	cf 01       	movw	r24, r30
    10a2:	58 2f       	mov	r21, r24
    10a4:	ab e3       	ldi	r26, 0x3B	; 59
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	eb e3       	ldi	r30, 0x3B	; 59
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	48 2f       	mov	r20, r24
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 2e       	mov	r0, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <DIO_voidSetPinValue+0x96>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <DIO_voidSetPinValue+0x92>
    10c6:	80 95       	com	r24
    10c8:	84 23       	and	r24, r20
    10ca:	8c 93       	st	X, r24
    10cc:	8c 91       	ld	r24, X
    10ce:	85 2b       	or	r24, r21
    10d0:	fb 01       	movw	r30, r22
    10d2:	80 83       	st	Z, r24
    10d4:	7a c0       	rjmp	.+244    	; 0x11ca <DIO_voidSetPinValue+0x19e>
				break ;

			/*in case of setting the direction of a pin in port B*/
			case DIO_PORTB :
				WRT_BIT(PORTB , Copy_u8Pin , Copy_u8PinValue);
    10d6:	68 e3       	ldi	r22, 0x38	; 56
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	88 2f       	mov	r24, r24
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	a9 01       	movw	r20, r18
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <DIO_voidSetPinValue+0xc2>
    10ea:	44 0f       	add	r20, r20
    10ec:	55 1f       	adc	r21, r21
    10ee:	8a 95       	dec	r24
    10f0:	e2 f7       	brpl	.-8      	; 0x10ea <DIO_voidSetPinValue+0xbe>
    10f2:	ca 01       	movw	r24, r20
    10f4:	58 2f       	mov	r21, r24
    10f6:	a8 e3       	ldi	r26, 0x38	; 56
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e8 e3       	ldi	r30, 0x38	; 56
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	48 2f       	mov	r20, r24
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	02 2e       	mov	r0, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <DIO_voidSetPinValue+0xe8>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	0a 94       	dec	r0
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <DIO_voidSetPinValue+0xe4>
    1118:	80 95       	com	r24
    111a:	84 23       	and	r24, r20
    111c:	8c 93       	st	X, r24
    111e:	8c 91       	ld	r24, X
    1120:	85 2b       	or	r24, r21
    1122:	fb 01       	movw	r30, r22
    1124:	80 83       	st	Z, r24
    1126:	51 c0       	rjmp	.+162    	; 0x11ca <DIO_voidSetPinValue+0x19e>
				break ;

			/*in case of setting the direction of a pin in port C*/
			case DIO_PORTC :
				WRT_BIT(PORTC , Copy_u8Pin , Copy_u8PinValue);
    1128:	65 e3       	ldi	r22, 0x35	; 53
    112a:	70 e0       	ldi	r23, 0x00	; 0
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	88 2f       	mov	r24, r24
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	a9 01       	movw	r20, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <DIO_voidSetPinValue+0x114>
    113c:	44 0f       	add	r20, r20
    113e:	55 1f       	adc	r21, r21
    1140:	8a 95       	dec	r24
    1142:	e2 f7       	brpl	.-8      	; 0x113c <DIO_voidSetPinValue+0x110>
    1144:	ca 01       	movw	r24, r20
    1146:	58 2f       	mov	r21, r24
    1148:	a5 e3       	ldi	r26, 0x35	; 53
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e5 e3       	ldi	r30, 0x35	; 53
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	48 2f       	mov	r20, r24
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	02 2e       	mov	r0, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <DIO_voidSetPinValue+0x13a>
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	0a 94       	dec	r0
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <DIO_voidSetPinValue+0x136>
    116a:	80 95       	com	r24
    116c:	84 23       	and	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	8c 91       	ld	r24, X
    1172:	85 2b       	or	r24, r21
    1174:	fb 01       	movw	r30, r22
    1176:	80 83       	st	Z, r24
    1178:	28 c0       	rjmp	.+80     	; 0x11ca <DIO_voidSetPinValue+0x19e>
				break ;

			/*in case of setting the direction of a pin in port D*/
			case DIO_PORTD :
				WRT_BIT(PORTD , Copy_u8Pin , Copy_u8PinValue);
    117a:	62 e3       	ldi	r22, 0x32	; 50
    117c:	70 e0       	ldi	r23, 0x00	; 0
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	88 2f       	mov	r24, r24
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	a9 01       	movw	r20, r18
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <DIO_voidSetPinValue+0x166>
    118e:	44 0f       	add	r20, r20
    1190:	55 1f       	adc	r21, r21
    1192:	8a 95       	dec	r24
    1194:	e2 f7       	brpl	.-8      	; 0x118e <DIO_voidSetPinValue+0x162>
    1196:	ca 01       	movw	r24, r20
    1198:	58 2f       	mov	r21, r24
    119a:	a2 e3       	ldi	r26, 0x32	; 50
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e2 e3       	ldi	r30, 0x32	; 50
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	48 2f       	mov	r20, r24
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	02 2e       	mov	r0, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <DIO_voidSetPinValue+0x18c>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	0a 94       	dec	r0
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <DIO_voidSetPinValue+0x188>
    11bc:	80 95       	com	r24
    11be:	84 23       	and	r24, r20
    11c0:	8c 93       	st	X, r24
    11c2:	8c 91       	ld	r24, X
    11c4:	85 2b       	or	r24, r21
    11c6:	fb 01       	movw	r30, r22
    11c8:	80 83       	st	Z, r24
				break ;
		}
}
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <DIO_voidSetPortDirection>:



void DIO_voidSetPortDirection(u8 Copy_u8PortID  , u8 Copy_u8PortDirection)
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	2c 97       	sbiw	r28, 0x0c	; 12
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	89 83       	std	Y+1, r24	; 0x01
    11f0:	6a 83       	std	Y+2, r22	; 0x02
    /*switching over ports*/
	switch(Copy_u8PortID)
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	3c 87       	std	Y+12, r19	; 0x0c
    11fa:	2b 87       	std	Y+11, r18	; 0x0b
    11fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    11fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    1200:	81 30       	cpi	r24, 0x01	; 1
    1202:	91 05       	cpc	r25, r1
    1204:	e1 f1       	breq	.+120    	; 0x127e <DIO_voidSetPortDirection+0xa4>
    1206:	2b 85       	ldd	r18, Y+11	; 0x0b
    1208:	3c 85       	ldd	r19, Y+12	; 0x0c
    120a:	22 30       	cpi	r18, 0x02	; 2
    120c:	31 05       	cpc	r19, r1
    120e:	2c f4       	brge	.+10     	; 0x121a <DIO_voidSetPortDirection+0x40>
    1210:	8b 85       	ldd	r24, Y+11	; 0x0b
    1212:	9c 85       	ldd	r25, Y+12	; 0x0c
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	71 f0       	breq	.+28     	; 0x1234 <DIO_voidSetPortDirection+0x5a>
    1218:	9e c0       	rjmp	.+316    	; 0x1356 <DIO_voidSetPortDirection+0x17c>
    121a:	2b 85       	ldd	r18, Y+11	; 0x0b
    121c:	3c 85       	ldd	r19, Y+12	; 0x0c
    121e:	22 30       	cpi	r18, 0x02	; 2
    1220:	31 05       	cpc	r19, r1
    1222:	09 f4       	brne	.+2      	; 0x1226 <DIO_voidSetPortDirection+0x4c>
    1224:	51 c0       	rjmp	.+162    	; 0x12c8 <DIO_voidSetPortDirection+0xee>
    1226:	8b 85       	ldd	r24, Y+11	; 0x0b
    1228:	9c 85       	ldd	r25, Y+12	; 0x0c
    122a:	83 30       	cpi	r24, 0x03	; 3
    122c:	91 05       	cpc	r25, r1
    122e:	09 f4       	brne	.+2      	; 0x1232 <DIO_voidSetPortDirection+0x58>
    1230:	6f c0       	rjmp	.+222    	; 0x1310 <DIO_voidSetPortDirection+0x136>
    1232:	91 c0       	rjmp	.+290    	; 0x1356 <DIO_voidSetPortDirection+0x17c>
	{
			/*in case of setting the direction of port A*/
			case DIO_PORTA :

				switch(Copy_u8PortDirection)
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	3a 87       	std	Y+10, r19	; 0x0a
    123c:	29 87       	std	Y+9, r18	; 0x09
    123e:	89 85       	ldd	r24, Y+9	; 0x09
    1240:	9a 85       	ldd	r25, Y+10	; 0x0a
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	91 05       	cpc	r25, r1
    1246:	79 f0       	breq	.+30     	; 0x1266 <DIO_voidSetPortDirection+0x8c>
    1248:	29 85       	ldd	r18, Y+9	; 0x09
    124a:	3a 85       	ldd	r19, Y+10	; 0x0a
    124c:	22 30       	cpi	r18, 0x02	; 2
    124e:	31 05       	cpc	r19, r1
    1250:	71 f0       	breq	.+28     	; 0x126e <DIO_voidSetPortDirection+0x94>
    1252:	89 85       	ldd	r24, Y+9	; 0x09
    1254:	9a 85       	ldd	r25, Y+10	; 0x0a
    1256:	00 97       	sbiw	r24, 0x00	; 0
    1258:	09 f0       	breq	.+2      	; 0x125c <DIO_voidSetPortDirection+0x82>
    125a:	7d c0       	rjmp	.+250    	; 0x1356 <DIO_voidSetPortDirection+0x17c>
				{
					case DIO_PORT_OUTPUT :
						DDRA = 255 ;
    125c:	ea e3       	ldi	r30, 0x3A	; 58
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	8f ef       	ldi	r24, 0xFF	; 255
    1262:	80 83       	st	Z, r24
    1264:	78 c0       	rjmp	.+240    	; 0x1356 <DIO_voidSetPortDirection+0x17c>
						break ;

					case DIO_PORT_INPUT_FLOAT :
						DDRA = 0 ;
    1266:	ea e3       	ldi	r30, 0x3A	; 58
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	10 82       	st	Z, r1
    126c:	74 c0       	rjmp	.+232    	; 0x1356 <DIO_voidSetPortDirection+0x17c>
						break ;

					case DIO_PORT_INPUT_PULLUP :
						DDRA = 0 ;
    126e:	ea e3       	ldi	r30, 0x3A	; 58
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	10 82       	st	Z, r1
						PORTA = 255 ;
    1274:	eb e3       	ldi	r30, 0x3B	; 59
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	8f ef       	ldi	r24, 0xFF	; 255
    127a:	80 83       	st	Z, r24
    127c:	6c c0       	rjmp	.+216    	; 0x1356 <DIO_voidSetPortDirection+0x17c>
				break ;

			/*in case of setting the direction of port B*/
			case DIO_PORTB :

				switch(Copy_u8PortDirection)
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	38 87       	std	Y+8, r19	; 0x08
    1286:	2f 83       	std	Y+7, r18	; 0x07
    1288:	8f 81       	ldd	r24, Y+7	; 0x07
    128a:	98 85       	ldd	r25, Y+8	; 0x08
    128c:	81 30       	cpi	r24, 0x01	; 1
    128e:	91 05       	cpc	r25, r1
    1290:	79 f0       	breq	.+30     	; 0x12b0 <DIO_voidSetPortDirection+0xd6>
    1292:	2f 81       	ldd	r18, Y+7	; 0x07
    1294:	38 85       	ldd	r19, Y+8	; 0x08
    1296:	22 30       	cpi	r18, 0x02	; 2
    1298:	31 05       	cpc	r19, r1
    129a:	71 f0       	breq	.+28     	; 0x12b8 <DIO_voidSetPortDirection+0xde>
    129c:	8f 81       	ldd	r24, Y+7	; 0x07
    129e:	98 85       	ldd	r25, Y+8	; 0x08
    12a0:	00 97       	sbiw	r24, 0x00	; 0
    12a2:	09 f0       	breq	.+2      	; 0x12a6 <DIO_voidSetPortDirection+0xcc>
    12a4:	58 c0       	rjmp	.+176    	; 0x1356 <DIO_voidSetPortDirection+0x17c>
				{
					case DIO_PORT_OUTPUT :
						DDRB = 255 ;
    12a6:	e7 e3       	ldi	r30, 0x37	; 55
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	8f ef       	ldi	r24, 0xFF	; 255
    12ac:	80 83       	st	Z, r24
    12ae:	53 c0       	rjmp	.+166    	; 0x1356 <DIO_voidSetPortDirection+0x17c>
						break ;

					case DIO_PORT_INPUT_FLOAT :
						DDRB = 0 ;
    12b0:	e7 e3       	ldi	r30, 0x37	; 55
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	10 82       	st	Z, r1
    12b6:	4f c0       	rjmp	.+158    	; 0x1356 <DIO_voidSetPortDirection+0x17c>
						break ;

					case DIO_PORT_INPUT_PULLUP :
						DDRB = 0 ;
    12b8:	e7 e3       	ldi	r30, 0x37	; 55
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	10 82       	st	Z, r1
						PORTB = 255 ;
    12be:	e8 e3       	ldi	r30, 0x38	; 56
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	8f ef       	ldi	r24, 0xFF	; 255
    12c4:	80 83       	st	Z, r24
    12c6:	47 c0       	rjmp	.+142    	; 0x1356 <DIO_voidSetPortDirection+0x17c>
				}
				break ;

			/*in case of setting the direction of port C*/
			case DIO_PORTC :
				switch(Copy_u8PortDirection)
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	3e 83       	std	Y+6, r19	; 0x06
    12d0:	2d 83       	std	Y+5, r18	; 0x05
    12d2:	8d 81       	ldd	r24, Y+5	; 0x05
    12d4:	9e 81       	ldd	r25, Y+6	; 0x06
    12d6:	81 30       	cpi	r24, 0x01	; 1
    12d8:	91 05       	cpc	r25, r1
    12da:	71 f0       	breq	.+28     	; 0x12f8 <DIO_voidSetPortDirection+0x11e>
    12dc:	2d 81       	ldd	r18, Y+5	; 0x05
    12de:	3e 81       	ldd	r19, Y+6	; 0x06
    12e0:	22 30       	cpi	r18, 0x02	; 2
    12e2:	31 05       	cpc	r19, r1
    12e4:	69 f0       	breq	.+26     	; 0x1300 <DIO_voidSetPortDirection+0x126>
    12e6:	8d 81       	ldd	r24, Y+5	; 0x05
    12e8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	a1 f5       	brne	.+104    	; 0x1356 <DIO_voidSetPortDirection+0x17c>
				{
					case DIO_PORT_OUTPUT :
						DDRC = 255 ;
    12ee:	e4 e3       	ldi	r30, 0x34	; 52
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	8f ef       	ldi	r24, 0xFF	; 255
    12f4:	80 83       	st	Z, r24
    12f6:	2f c0       	rjmp	.+94     	; 0x1356 <DIO_voidSetPortDirection+0x17c>
						break ;

					case DIO_PORT_INPUT_FLOAT :
						DDRC = 0 ;
    12f8:	e4 e3       	ldi	r30, 0x34	; 52
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	10 82       	st	Z, r1
    12fe:	2b c0       	rjmp	.+86     	; 0x1356 <DIO_voidSetPortDirection+0x17c>
						break ;

					case DIO_PORT_INPUT_PULLUP :
						DDRC  = 0 ;
    1300:	e4 e3       	ldi	r30, 0x34	; 52
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	10 82       	st	Z, r1
						PORTC = 255 ;
    1306:	e5 e3       	ldi	r30, 0x35	; 53
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	8f ef       	ldi	r24, 0xFF	; 255
    130c:	80 83       	st	Z, r24
    130e:	23 c0       	rjmp	.+70     	; 0x1356 <DIO_voidSetPortDirection+0x17c>
				}
				break ;

			/*in case of setting the direction of port D*/
			case DIO_PORTD :
				switch(Copy_u8PortDirection)
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	3c 83       	std	Y+4, r19	; 0x04
    1318:	2b 83       	std	Y+3, r18	; 0x03
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	9c 81       	ldd	r25, Y+4	; 0x04
    131e:	81 30       	cpi	r24, 0x01	; 1
    1320:	91 05       	cpc	r25, r1
    1322:	71 f0       	breq	.+28     	; 0x1340 <DIO_voidSetPortDirection+0x166>
    1324:	2b 81       	ldd	r18, Y+3	; 0x03
    1326:	3c 81       	ldd	r19, Y+4	; 0x04
    1328:	22 30       	cpi	r18, 0x02	; 2
    132a:	31 05       	cpc	r19, r1
    132c:	69 f0       	breq	.+26     	; 0x1348 <DIO_voidSetPortDirection+0x16e>
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	9c 81       	ldd	r25, Y+4	; 0x04
    1332:	00 97       	sbiw	r24, 0x00	; 0
    1334:	81 f4       	brne	.+32     	; 0x1356 <DIO_voidSetPortDirection+0x17c>
				{
					case DIO_PORT_OUTPUT :
						DDRD = 255 ;
    1336:	e1 e3       	ldi	r30, 0x31	; 49
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	8f ef       	ldi	r24, 0xFF	; 255
    133c:	80 83       	st	Z, r24
    133e:	0b c0       	rjmp	.+22     	; 0x1356 <DIO_voidSetPortDirection+0x17c>
						break ;

					case DIO_PORT_INPUT_FLOAT :
						DDRD = 0 ;
    1340:	e1 e3       	ldi	r30, 0x31	; 49
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	10 82       	st	Z, r1
    1346:	07 c0       	rjmp	.+14     	; 0x1356 <DIO_voidSetPortDirection+0x17c>
						break ;

					case DIO_PORT_INPUT_PULLUP :
						DDRD  = 0 ;
    1348:	e1 e3       	ldi	r30, 0x31	; 49
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	10 82       	st	Z, r1
						PORTD = 255 ;
    134e:	e2 e3       	ldi	r30, 0x32	; 50
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	8f ef       	ldi	r24, 0xFF	; 255
    1354:	80 83       	st	Z, r24
				}

				break ;
	}

}
    1356:	2c 96       	adiw	r28, 0x0c	; 12
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	f8 94       	cli
    135c:	de bf       	out	0x3e, r29	; 62
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	cd bf       	out	0x3d, r28	; 61
    1362:	cf 91       	pop	r28
    1364:	df 91       	pop	r29
    1366:	08 95       	ret

00001368 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortID  , u8 Copy_u8PortValue)
{
    1368:	df 93       	push	r29
    136a:	cf 93       	push	r28
    136c:	00 d0       	rcall	.+0      	; 0x136e <DIO_u8SetPortValue+0x6>
    136e:	00 d0       	rcall	.+0      	; 0x1370 <DIO_u8SetPortValue+0x8>
    1370:	0f 92       	push	r0
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	8a 83       	std	Y+2, r24	; 0x02
    1378:	6b 83       	std	Y+3, r22	; 0x03
	 /*this local variable is for error reporting*/
	 /*initially = 0 (ok)*/
	 u8 Local_u8ErrorState = 0 ;
    137a:	19 82       	std	Y+1, r1	; 0x01

	/*checking for valid port value range*/
	if(Copy_u8PortValue >= 0 && Copy_u8PortValue <=255)
	{
		/*switching over ports*/
		switch(Copy_u8PortID)
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	3d 83       	std	Y+5, r19	; 0x05
    1384:	2c 83       	std	Y+4, r18	; 0x04
    1386:	8c 81       	ldd	r24, Y+4	; 0x04
    1388:	9d 81       	ldd	r25, Y+5	; 0x05
    138a:	81 30       	cpi	r24, 0x01	; 1
    138c:	91 05       	cpc	r25, r1
    138e:	d1 f0       	breq	.+52     	; 0x13c4 <DIO_u8SetPortValue+0x5c>
    1390:	2c 81       	ldd	r18, Y+4	; 0x04
    1392:	3d 81       	ldd	r19, Y+5	; 0x05
    1394:	22 30       	cpi	r18, 0x02	; 2
    1396:	31 05       	cpc	r19, r1
    1398:	2c f4       	brge	.+10     	; 0x13a4 <DIO_u8SetPortValue+0x3c>
    139a:	8c 81       	ldd	r24, Y+4	; 0x04
    139c:	9d 81       	ldd	r25, Y+5	; 0x05
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	61 f0       	breq	.+24     	; 0x13ba <DIO_u8SetPortValue+0x52>
    13a2:	1f c0       	rjmp	.+62     	; 0x13e2 <DIO_u8SetPortValue+0x7a>
    13a4:	2c 81       	ldd	r18, Y+4	; 0x04
    13a6:	3d 81       	ldd	r19, Y+5	; 0x05
    13a8:	22 30       	cpi	r18, 0x02	; 2
    13aa:	31 05       	cpc	r19, r1
    13ac:	81 f0       	breq	.+32     	; 0x13ce <DIO_u8SetPortValue+0x66>
    13ae:	8c 81       	ldd	r24, Y+4	; 0x04
    13b0:	9d 81       	ldd	r25, Y+5	; 0x05
    13b2:	83 30       	cpi	r24, 0x03	; 3
    13b4:	91 05       	cpc	r25, r1
    13b6:	81 f0       	breq	.+32     	; 0x13d8 <DIO_u8SetPortValue+0x70>
    13b8:	14 c0       	rjmp	.+40     	; 0x13e2 <DIO_u8SetPortValue+0x7a>
		{
			/*in case of setting the direction of a pin in port A*/
			case DIO_PORTA :
				PORTA = Copy_u8PortValue ;
    13ba:	eb e3       	ldi	r30, 0x3B	; 59
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	80 83       	st	Z, r24
    13c2:	11 c0       	rjmp	.+34     	; 0x13e6 <DIO_u8SetPortValue+0x7e>
				break ;

			/*in case of setting the direction of a pin in port B*/
			case DIO_PORTB :
				PORTB = Copy_u8PortValue ;
    13c4:	e8 e3       	ldi	r30, 0x38	; 56
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	80 83       	st	Z, r24
    13cc:	0c c0       	rjmp	.+24     	; 0x13e6 <DIO_u8SetPortValue+0x7e>
				break ;

			/*in case of setting the direction of a pin in port C*/
			case DIO_PORTC :
				PORTC = Copy_u8PortValue ;
    13ce:	e5 e3       	ldi	r30, 0x35	; 53
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	80 83       	st	Z, r24
    13d6:	07 c0       	rjmp	.+14     	; 0x13e6 <DIO_u8SetPortValue+0x7e>
				break ;

			/*in case of setting the direction of a pin in port D*/
			case DIO_PORTD :
				PORTD = Copy_u8PortValue ;
    13d8:	e2 e3       	ldi	r30, 0x32	; 50
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	80 83       	st	Z, r24
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <DIO_u8SetPortValue+0x7e>
				break ;

			default :
				/*in case of invalid port ID*/
				Local_u8ErrorState = 1 ;
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	89 83       	std	Y+1, r24	; 0x01
		/*in case of port value out of valid range*/
		Local_u8ErrorState = 2 ;
	}

	/*return the error state*/
	return Local_u8ErrorState ;
    13e6:	89 81       	ldd	r24, Y+1	; 0x01

}
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	08 95       	ret

000013f8 <DIO_voidTogglePin>:


void DIO_voidTogglePin(u8 Copy_u8PortID  , u8 Copy_u8Pin)
{
    13f8:	df 93       	push	r29
    13fa:	cf 93       	push	r28
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <DIO_voidTogglePin+0x6>
    13fe:	00 d0       	rcall	.+0      	; 0x1400 <DIO_voidTogglePin+0x8>
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
    1404:	89 83       	std	Y+1, r24	; 0x01
    1406:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID)
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	3c 83       	std	Y+4, r19	; 0x04
    1410:	2b 83       	std	Y+3, r18	; 0x03
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	9c 81       	ldd	r25, Y+4	; 0x04
    1416:	81 30       	cpi	r24, 0x01	; 1
    1418:	91 05       	cpc	r25, r1
    141a:	49 f1       	breq	.+82     	; 0x146e <DIO_voidTogglePin+0x76>
    141c:	2b 81       	ldd	r18, Y+3	; 0x03
    141e:	3c 81       	ldd	r19, Y+4	; 0x04
    1420:	22 30       	cpi	r18, 0x02	; 2
    1422:	31 05       	cpc	r19, r1
    1424:	2c f4       	brge	.+10     	; 0x1430 <DIO_voidTogglePin+0x38>
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	9c 81       	ldd	r25, Y+4	; 0x04
    142a:	00 97       	sbiw	r24, 0x00	; 0
    142c:	61 f0       	breq	.+24     	; 0x1446 <DIO_voidTogglePin+0x4e>
    142e:	5a c0       	rjmp	.+180    	; 0x14e4 <DIO_voidTogglePin+0xec>
    1430:	2b 81       	ldd	r18, Y+3	; 0x03
    1432:	3c 81       	ldd	r19, Y+4	; 0x04
    1434:	22 30       	cpi	r18, 0x02	; 2
    1436:	31 05       	cpc	r19, r1
    1438:	71 f1       	breq	.+92     	; 0x1496 <DIO_voidTogglePin+0x9e>
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	9c 81       	ldd	r25, Y+4	; 0x04
    143e:	83 30       	cpi	r24, 0x03	; 3
    1440:	91 05       	cpc	r25, r1
    1442:	e9 f1       	breq	.+122    	; 0x14be <DIO_voidTogglePin+0xc6>
    1444:	4f c0       	rjmp	.+158    	; 0x14e4 <DIO_voidTogglePin+0xec>
			{
				/*in case of setting the direction of a pin in port A*/
				case DIO_PORTA :
					TGL_BIT(PORTA , Copy_u8Pin );
    1446:	ab e3       	ldi	r26, 0x3B	; 59
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	eb e3       	ldi	r30, 0x3B	; 59
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	48 2f       	mov	r20, r24
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	02 2e       	mov	r0, r18
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <DIO_voidTogglePin+0x6c>
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	0a 94       	dec	r0
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <DIO_voidTogglePin+0x68>
    1468:	84 27       	eor	r24, r20
    146a:	8c 93       	st	X, r24
    146c:	3b c0       	rjmp	.+118    	; 0x14e4 <DIO_voidTogglePin+0xec>
					break ;

				/*in case of setting the direction of a pin in port B*/
				case DIO_PORTB :
					TGL_BIT(PORTB , Copy_u8Pin );
    146e:	a8 e3       	ldi	r26, 0x38	; 56
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e8 e3       	ldi	r30, 0x38	; 56
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	48 2f       	mov	r20, r24
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	02 2e       	mov	r0, r18
    1486:	02 c0       	rjmp	.+4      	; 0x148c <DIO_voidTogglePin+0x94>
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	0a 94       	dec	r0
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <DIO_voidTogglePin+0x90>
    1490:	84 27       	eor	r24, r20
    1492:	8c 93       	st	X, r24
    1494:	27 c0       	rjmp	.+78     	; 0x14e4 <DIO_voidTogglePin+0xec>
					break ;

				/*in case of setting the direction of a pin in port C*/
				case DIO_PORTC :
					TGL_BIT(PORTC , Copy_u8Pin );
    1496:	a5 e3       	ldi	r26, 0x35	; 53
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	e5 e3       	ldi	r30, 0x35	; 53
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	48 2f       	mov	r20, r24
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	02 2e       	mov	r0, r18
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <DIO_voidTogglePin+0xbc>
    14b0:	88 0f       	add	r24, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	0a 94       	dec	r0
    14b6:	e2 f7       	brpl	.-8      	; 0x14b0 <DIO_voidTogglePin+0xb8>
    14b8:	84 27       	eor	r24, r20
    14ba:	8c 93       	st	X, r24
    14bc:	13 c0       	rjmp	.+38     	; 0x14e4 <DIO_voidTogglePin+0xec>
					break ;

				/*in case of setting the direction of a pin in port D*/
				case DIO_PORTD :
					TGL_BIT(PORTD , Copy_u8Pin );
    14be:	a2 e3       	ldi	r26, 0x32	; 50
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e2 e3       	ldi	r30, 0x32	; 50
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	48 2f       	mov	r20, r24
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	02 2e       	mov	r0, r18
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <DIO_voidTogglePin+0xe4>
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	0a 94       	dec	r0
    14de:	e2 f7       	brpl	.-8      	; 0x14d8 <DIO_voidTogglePin+0xe0>
    14e0:	84 27       	eor	r24, r20
    14e2:	8c 93       	st	X, r24
					break ;
			}

}
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	cf 91       	pop	r28
    14ee:	df 91       	pop	r29
    14f0:	08 95       	ret

000014f2 <GIE_voidEnable>:
/****************************************************************************************/
/*****************************Functions' implementation**********************************/
/****************************************************************************************/

void GIE_voidEnable(void)
{
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , SREG_IBIT);
    14fa:	af e5       	ldi	r26, 0x5F	; 95
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	ef e5       	ldi	r30, 0x5F	; 95
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	80 68       	ori	r24, 0x80	; 128
    1506:	8c 93       	st	X, r24
}
    1508:	cf 91       	pop	r28
    150a:	df 91       	pop	r29
    150c:	08 95       	ret

0000150e <GIE_voidDisable>:


void GIE_voidDisable(void)
{
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG , SREG_IBIT);
    1516:	af e5       	ldi	r26, 0x5F	; 95
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	ef e5       	ldi	r30, 0x5F	; 95
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	8f 77       	andi	r24, 0x7F	; 127
    1522:	8c 93       	st	X, r24
}
    1524:	cf 91       	pop	r28
    1526:	df 91       	pop	r29
    1528:	08 95       	ret

0000152a <LCD_voidLCDInit>:
#include "HLCD_cfg.h"
#include "HLCD_private.h"


void LCD_voidLCDInit(void)
{
    152a:	df 93       	push	r29
    152c:	cf 93       	push	r28
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	ee 97       	sbiw	r28, 0x3e	; 62
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	de bf       	out	0x3e, r29	; 62
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	cd bf       	out	0x3d, r28	; 61

	DIO_voidSetPortDirection(HLCD_DATA_PORT,DIO_PORT_OUTPUT);
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	0e 94 ed 08 	call	0x11da	; 0x11da <DIO_voidSetPortDirection>

	DIO_voidSetPinDirection(HLCD_CONTROL_PORT,RS_PIN,DIO_PIN_OUTPUT);
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	62 e0       	ldi	r22, 0x02	; 2
    154a:	40 e0       	ldi	r20, 0x00	; 0
    154c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(HLCD_CONTROL_PORT,RW_PIN,DIO_PIN_OUTPUT);
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	61 e0       	ldi	r22, 0x01	; 1
    1554:	40 e0       	ldi	r20, 0x00	; 0
    1556:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(HLCD_CONTROL_PORT,ENABLE_PIN,DIO_PIN_OUTPUT);
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	60 e0       	ldi	r22, 0x00	; 0
    155e:	40 e0       	ldi	r20, 0x00	; 0
    1560:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinDirection>
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	a8 e4       	ldi	r26, 0x48	; 72
    156a:	b2 e4       	ldi	r27, 0x42	; 66
    156c:	8b af       	std	Y+59, r24	; 0x3b
    156e:	9c af       	std	Y+60, r25	; 0x3c
    1570:	ad af       	std	Y+61, r26	; 0x3d
    1572:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1574:	6b ad       	ldd	r22, Y+59	; 0x3b
    1576:	7c ad       	ldd	r23, Y+60	; 0x3c
    1578:	8d ad       	ldd	r24, Y+61	; 0x3d
    157a:	9e ad       	ldd	r25, Y+62	; 0x3e
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	4a ef       	ldi	r20, 0xFA	; 250
    1582:	54 e4       	ldi	r21, 0x44	; 68
    1584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	8f ab       	std	Y+55, r24	; 0x37
    158e:	98 af       	std	Y+56, r25	; 0x38
    1590:	a9 af       	std	Y+57, r26	; 0x39
    1592:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1594:	6f a9       	ldd	r22, Y+55	; 0x37
    1596:	78 ad       	ldd	r23, Y+56	; 0x38
    1598:	89 ad       	ldd	r24, Y+57	; 0x39
    159a:	9a ad       	ldd	r25, Y+58	; 0x3a
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	40 e8       	ldi	r20, 0x80	; 128
    15a2:	5f e3       	ldi	r21, 0x3F	; 63
    15a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15a8:	88 23       	and	r24, r24
    15aa:	2c f4       	brge	.+10     	; 0x15b6 <LCD_voidLCDInit+0x8c>
		__ticks = 1;
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	9e ab       	std	Y+54, r25	; 0x36
    15b2:	8d ab       	std	Y+53, r24	; 0x35
    15b4:	3f c0       	rjmp	.+126    	; 0x1634 <LCD_voidLCDInit+0x10a>
	else if (__tmp > 65535)
    15b6:	6f a9       	ldd	r22, Y+55	; 0x37
    15b8:	78 ad       	ldd	r23, Y+56	; 0x38
    15ba:	89 ad       	ldd	r24, Y+57	; 0x39
    15bc:	9a ad       	ldd	r25, Y+58	; 0x3a
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	3f ef       	ldi	r19, 0xFF	; 255
    15c2:	4f e7       	ldi	r20, 0x7F	; 127
    15c4:	57 e4       	ldi	r21, 0x47	; 71
    15c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15ca:	18 16       	cp	r1, r24
    15cc:	4c f5       	brge	.+82     	; 0x1620 <LCD_voidLCDInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ce:	6b ad       	ldd	r22, Y+59	; 0x3b
    15d0:	7c ad       	ldd	r23, Y+60	; 0x3c
    15d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    15d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	40 e2       	ldi	r20, 0x20	; 32
    15dc:	51 e4       	ldi	r21, 0x41	; 65
    15de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	bc 01       	movw	r22, r24
    15e8:	cd 01       	movw	r24, r26
    15ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	9e ab       	std	Y+54, r25	; 0x36
    15f4:	8d ab       	std	Y+53, r24	; 0x35
    15f6:	0f c0       	rjmp	.+30     	; 0x1616 <LCD_voidLCDInit+0xec>
    15f8:	88 ec       	ldi	r24, 0xC8	; 200
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	9c ab       	std	Y+52, r25	; 0x34
    15fe:	8b ab       	std	Y+51, r24	; 0x33
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1600:	8b a9       	ldd	r24, Y+51	; 0x33
    1602:	9c a9       	ldd	r25, Y+52	; 0x34
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	f1 f7       	brne	.-4      	; 0x1604 <LCD_voidLCDInit+0xda>
    1608:	9c ab       	std	Y+52, r25	; 0x34
    160a:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160c:	8d a9       	ldd	r24, Y+53	; 0x35
    160e:	9e a9       	ldd	r25, Y+54	; 0x36
    1610:	01 97       	sbiw	r24, 0x01	; 1
    1612:	9e ab       	std	Y+54, r25	; 0x36
    1614:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1616:	8d a9       	ldd	r24, Y+53	; 0x35
    1618:	9e a9       	ldd	r25, Y+54	; 0x36
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	69 f7       	brne	.-38     	; 0x15f8 <LCD_voidLCDInit+0xce>
    161e:	14 c0       	rjmp	.+40     	; 0x1648 <LCD_voidLCDInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1620:	6f a9       	ldd	r22, Y+55	; 0x37
    1622:	78 ad       	ldd	r23, Y+56	; 0x38
    1624:	89 ad       	ldd	r24, Y+57	; 0x39
    1626:	9a ad       	ldd	r25, Y+58	; 0x3a
    1628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	9e ab       	std	Y+54, r25	; 0x36
    1632:	8d ab       	std	Y+53, r24	; 0x35
    1634:	8d a9       	ldd	r24, Y+53	; 0x35
    1636:	9e a9       	ldd	r25, Y+54	; 0x36
    1638:	9a ab       	std	Y+50, r25	; 0x32
    163a:	89 ab       	std	Y+49, r24	; 0x31
    163c:	89 a9       	ldd	r24, Y+49	; 0x31
    163e:	9a a9       	ldd	r25, Y+50	; 0x32
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	f1 f7       	brne	.-4      	; 0x1640 <LCD_voidLCDInit+0x116>
    1644:	9a ab       	std	Y+50, r25	; 0x32
    1646:	89 ab       	std	Y+49, r24	; 0x31

	_delay_ms(50);

	LCD_voidSendCommand(0x3C);
    1648:	8c e3       	ldi	r24, 0x3C	; 60
    164a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_voidSendCommand>
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	a8 e4       	ldi	r26, 0x48	; 72
    1654:	b2 e4       	ldi	r27, 0x42	; 66
    1656:	8d a7       	std	Y+45, r24	; 0x2d
    1658:	9e a7       	std	Y+46, r25	; 0x2e
    165a:	af a7       	std	Y+47, r26	; 0x2f
    165c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    165e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1660:	7e a5       	ldd	r23, Y+46	; 0x2e
    1662:	8f a5       	ldd	r24, Y+47	; 0x2f
    1664:	98 a9       	ldd	r25, Y+48	; 0x30
    1666:	2b ea       	ldi	r18, 0xAB	; 171
    1668:	3a ea       	ldi	r19, 0xAA	; 170
    166a:	4a e2       	ldi	r20, 0x2A	; 42
    166c:	50 e4       	ldi	r21, 0x40	; 64
    166e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	89 a7       	std	Y+41, r24	; 0x29
    1678:	9a a7       	std	Y+42, r25	; 0x2a
    167a:	ab a7       	std	Y+43, r26	; 0x2b
    167c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    167e:	69 a5       	ldd	r22, Y+41	; 0x29
    1680:	7a a5       	ldd	r23, Y+42	; 0x2a
    1682:	8b a5       	ldd	r24, Y+43	; 0x2b
    1684:	9c a5       	ldd	r25, Y+44	; 0x2c
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	40 e8       	ldi	r20, 0x80	; 128
    168c:	5f e3       	ldi	r21, 0x3F	; 63
    168e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1692:	88 23       	and	r24, r24
    1694:	1c f4       	brge	.+6      	; 0x169c <LCD_voidLCDInit+0x172>
		__ticks = 1;
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	88 a7       	std	Y+40, r24	; 0x28
    169a:	91 c0       	rjmp	.+290    	; 0x17be <LCD_voidLCDInit+0x294>
	else if (__tmp > 255)
    169c:	69 a5       	ldd	r22, Y+41	; 0x29
    169e:	7a a5       	ldd	r23, Y+42	; 0x2a
    16a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    16a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	4f e7       	ldi	r20, 0x7F	; 127
    16aa:	53 e4       	ldi	r21, 0x43	; 67
    16ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16b0:	18 16       	cp	r1, r24
    16b2:	0c f0       	brlt	.+2      	; 0x16b6 <LCD_voidLCDInit+0x18c>
    16b4:	7b c0       	rjmp	.+246    	; 0x17ac <LCD_voidLCDInit+0x282>
	{
		_delay_ms(__us / 1000.0);
    16b6:	6d a5       	ldd	r22, Y+45	; 0x2d
    16b8:	7e a5       	ldd	r23, Y+46	; 0x2e
    16ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    16bc:	98 a9       	ldd	r25, Y+48	; 0x30
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	4a e7       	ldi	r20, 0x7A	; 122
    16c4:	54 e4       	ldi	r21, 0x44	; 68
    16c6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	8c a3       	std	Y+36, r24	; 0x24
    16d0:	9d a3       	std	Y+37, r25	; 0x25
    16d2:	ae a3       	std	Y+38, r26	; 0x26
    16d4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d6:	6c a1       	ldd	r22, Y+36	; 0x24
    16d8:	7d a1       	ldd	r23, Y+37	; 0x25
    16da:	8e a1       	ldd	r24, Y+38	; 0x26
    16dc:	9f a1       	ldd	r25, Y+39	; 0x27
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	4a ef       	ldi	r20, 0xFA	; 250
    16e4:	54 e4       	ldi	r21, 0x44	; 68
    16e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	88 a3       	std	Y+32, r24	; 0x20
    16f0:	99 a3       	std	Y+33, r25	; 0x21
    16f2:	aa a3       	std	Y+34, r26	; 0x22
    16f4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    16f6:	68 a1       	ldd	r22, Y+32	; 0x20
    16f8:	79 a1       	ldd	r23, Y+33	; 0x21
    16fa:	8a a1       	ldd	r24, Y+34	; 0x22
    16fc:	9b a1       	ldd	r25, Y+35	; 0x23
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	40 e8       	ldi	r20, 0x80	; 128
    1704:	5f e3       	ldi	r21, 0x3F	; 63
    1706:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    170a:	88 23       	and	r24, r24
    170c:	2c f4       	brge	.+10     	; 0x1718 <LCD_voidLCDInit+0x1ee>
		__ticks = 1;
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	9f 8f       	std	Y+31, r25	; 0x1f
    1714:	8e 8f       	std	Y+30, r24	; 0x1e
    1716:	3f c0       	rjmp	.+126    	; 0x1796 <LCD_voidLCDInit+0x26c>
	else if (__tmp > 65535)
    1718:	68 a1       	ldd	r22, Y+32	; 0x20
    171a:	79 a1       	ldd	r23, Y+33	; 0x21
    171c:	8a a1       	ldd	r24, Y+34	; 0x22
    171e:	9b a1       	ldd	r25, Y+35	; 0x23
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	3f ef       	ldi	r19, 0xFF	; 255
    1724:	4f e7       	ldi	r20, 0x7F	; 127
    1726:	57 e4       	ldi	r21, 0x47	; 71
    1728:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    172c:	18 16       	cp	r1, r24
    172e:	4c f5       	brge	.+82     	; 0x1782 <LCD_voidLCDInit+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1730:	6c a1       	ldd	r22, Y+36	; 0x24
    1732:	7d a1       	ldd	r23, Y+37	; 0x25
    1734:	8e a1       	ldd	r24, Y+38	; 0x26
    1736:	9f a1       	ldd	r25, Y+39	; 0x27
    1738:	20 e0       	ldi	r18, 0x00	; 0
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	40 e2       	ldi	r20, 0x20	; 32
    173e:	51 e4       	ldi	r21, 0x41	; 65
    1740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	bc 01       	movw	r22, r24
    174a:	cd 01       	movw	r24, r26
    174c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	9f 8f       	std	Y+31, r25	; 0x1f
    1756:	8e 8f       	std	Y+30, r24	; 0x1e
    1758:	0f c0       	rjmp	.+30     	; 0x1778 <LCD_voidLCDInit+0x24e>
    175a:	88 ec       	ldi	r24, 0xC8	; 200
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	9d 8f       	std	Y+29, r25	; 0x1d
    1760:	8c 8f       	std	Y+28, r24	; 0x1c
    1762:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1764:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	f1 f7       	brne	.-4      	; 0x1766 <LCD_voidLCDInit+0x23c>
    176a:	9d 8f       	std	Y+29, r25	; 0x1d
    176c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    176e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1770:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1772:	01 97       	sbiw	r24, 0x01	; 1
    1774:	9f 8f       	std	Y+31, r25	; 0x1f
    1776:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1778:	8e 8d       	ldd	r24, Y+30	; 0x1e
    177a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	69 f7       	brne	.-38     	; 0x175a <LCD_voidLCDInit+0x230>
    1780:	24 c0       	rjmp	.+72     	; 0x17ca <LCD_voidLCDInit+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1782:	68 a1       	ldd	r22, Y+32	; 0x20
    1784:	79 a1       	ldd	r23, Y+33	; 0x21
    1786:	8a a1       	ldd	r24, Y+34	; 0x22
    1788:	9b a1       	ldd	r25, Y+35	; 0x23
    178a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	9f 8f       	std	Y+31, r25	; 0x1f
    1794:	8e 8f       	std	Y+30, r24	; 0x1e
    1796:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1798:	9f 8d       	ldd	r25, Y+31	; 0x1f
    179a:	9b 8f       	std	Y+27, r25	; 0x1b
    179c:	8a 8f       	std	Y+26, r24	; 0x1a
    179e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17a0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	f1 f7       	brne	.-4      	; 0x17a2 <LCD_voidLCDInit+0x278>
    17a6:	9b 8f       	std	Y+27, r25	; 0x1b
    17a8:	8a 8f       	std	Y+26, r24	; 0x1a
    17aa:	0f c0       	rjmp	.+30     	; 0x17ca <LCD_voidLCDInit+0x2a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17ac:	69 a5       	ldd	r22, Y+41	; 0x29
    17ae:	7a a5       	ldd	r23, Y+42	; 0x2a
    17b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    17b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    17b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	88 a7       	std	Y+40, r24	; 0x28
    17be:	88 a5       	ldd	r24, Y+40	; 0x28
    17c0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17c2:	89 8d       	ldd	r24, Y+25	; 0x19
    17c4:	8a 95       	dec	r24
    17c6:	f1 f7       	brne	.-4      	; 0x17c4 <LCD_voidLCDInit+0x29a>
    17c8:	89 8f       	std	Y+25, r24	; 0x19

	_delay_us(50);

	LCD_voidSendCommand(0x0C);
    17ca:	8c e0       	ldi	r24, 0x0C	; 12
    17cc:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_voidSendCommand>
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	a8 e4       	ldi	r26, 0x48	; 72
    17d6:	b2 e4       	ldi	r27, 0x42	; 66
    17d8:	8d 8b       	std	Y+21, r24	; 0x15
    17da:	9e 8b       	std	Y+22, r25	; 0x16
    17dc:	af 8b       	std	Y+23, r26	; 0x17
    17de:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    17e0:	6d 89       	ldd	r22, Y+21	; 0x15
    17e2:	7e 89       	ldd	r23, Y+22	; 0x16
    17e4:	8f 89       	ldd	r24, Y+23	; 0x17
    17e6:	98 8d       	ldd	r25, Y+24	; 0x18
    17e8:	2b ea       	ldi	r18, 0xAB	; 171
    17ea:	3a ea       	ldi	r19, 0xAA	; 170
    17ec:	4a e2       	ldi	r20, 0x2A	; 42
    17ee:	50 e4       	ldi	r21, 0x40	; 64
    17f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	89 8b       	std	Y+17, r24	; 0x11
    17fa:	9a 8b       	std	Y+18, r25	; 0x12
    17fc:	ab 8b       	std	Y+19, r26	; 0x13
    17fe:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1800:	69 89       	ldd	r22, Y+17	; 0x11
    1802:	7a 89       	ldd	r23, Y+18	; 0x12
    1804:	8b 89       	ldd	r24, Y+19	; 0x13
    1806:	9c 89       	ldd	r25, Y+20	; 0x14
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	40 e8       	ldi	r20, 0x80	; 128
    180e:	5f e3       	ldi	r21, 0x3F	; 63
    1810:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1814:	88 23       	and	r24, r24
    1816:	1c f4       	brge	.+6      	; 0x181e <LCD_voidLCDInit+0x2f4>
		__ticks = 1;
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	88 8b       	std	Y+16, r24	; 0x10
    181c:	91 c0       	rjmp	.+290    	; 0x1940 <LCD_voidLCDInit+0x416>
	else if (__tmp > 255)
    181e:	69 89       	ldd	r22, Y+17	; 0x11
    1820:	7a 89       	ldd	r23, Y+18	; 0x12
    1822:	8b 89       	ldd	r24, Y+19	; 0x13
    1824:	9c 89       	ldd	r25, Y+20	; 0x14
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	4f e7       	ldi	r20, 0x7F	; 127
    182c:	53 e4       	ldi	r21, 0x43	; 67
    182e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1832:	18 16       	cp	r1, r24
    1834:	0c f0       	brlt	.+2      	; 0x1838 <LCD_voidLCDInit+0x30e>
    1836:	7b c0       	rjmp	.+246    	; 0x192e <LCD_voidLCDInit+0x404>
	{
		_delay_ms(__us / 1000.0);
    1838:	6d 89       	ldd	r22, Y+21	; 0x15
    183a:	7e 89       	ldd	r23, Y+22	; 0x16
    183c:	8f 89       	ldd	r24, Y+23	; 0x17
    183e:	98 8d       	ldd	r25, Y+24	; 0x18
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	4a e7       	ldi	r20, 0x7A	; 122
    1846:	54 e4       	ldi	r21, 0x44	; 68
    1848:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	8c 87       	std	Y+12, r24	; 0x0c
    1852:	9d 87       	std	Y+13, r25	; 0x0d
    1854:	ae 87       	std	Y+14, r26	; 0x0e
    1856:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1858:	6c 85       	ldd	r22, Y+12	; 0x0c
    185a:	7d 85       	ldd	r23, Y+13	; 0x0d
    185c:	8e 85       	ldd	r24, Y+14	; 0x0e
    185e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	4a ef       	ldi	r20, 0xFA	; 250
    1866:	54 e4       	ldi	r21, 0x44	; 68
    1868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	88 87       	std	Y+8, r24	; 0x08
    1872:	99 87       	std	Y+9, r25	; 0x09
    1874:	aa 87       	std	Y+10, r26	; 0x0a
    1876:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1878:	68 85       	ldd	r22, Y+8	; 0x08
    187a:	79 85       	ldd	r23, Y+9	; 0x09
    187c:	8a 85       	ldd	r24, Y+10	; 0x0a
    187e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	40 e8       	ldi	r20, 0x80	; 128
    1886:	5f e3       	ldi	r21, 0x3F	; 63
    1888:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    188c:	88 23       	and	r24, r24
    188e:	2c f4       	brge	.+10     	; 0x189a <LCD_voidLCDInit+0x370>
		__ticks = 1;
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	9f 83       	std	Y+7, r25	; 0x07
    1896:	8e 83       	std	Y+6, r24	; 0x06
    1898:	3f c0       	rjmp	.+126    	; 0x1918 <LCD_voidLCDInit+0x3ee>
	else if (__tmp > 65535)
    189a:	68 85       	ldd	r22, Y+8	; 0x08
    189c:	79 85       	ldd	r23, Y+9	; 0x09
    189e:	8a 85       	ldd	r24, Y+10	; 0x0a
    18a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	3f ef       	ldi	r19, 0xFF	; 255
    18a6:	4f e7       	ldi	r20, 0x7F	; 127
    18a8:	57 e4       	ldi	r21, 0x47	; 71
    18aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18ae:	18 16       	cp	r1, r24
    18b0:	4c f5       	brge	.+82     	; 0x1904 <LCD_voidLCDInit+0x3da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b2:	6c 85       	ldd	r22, Y+12	; 0x0c
    18b4:	7d 85       	ldd	r23, Y+13	; 0x0d
    18b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    18b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e2       	ldi	r20, 0x20	; 32
    18c0:	51 e4       	ldi	r21, 0x41	; 65
    18c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	bc 01       	movw	r22, r24
    18cc:	cd 01       	movw	r24, r26
    18ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	9f 83       	std	Y+7, r25	; 0x07
    18d8:	8e 83       	std	Y+6, r24	; 0x06
    18da:	0f c0       	rjmp	.+30     	; 0x18fa <LCD_voidLCDInit+0x3d0>
    18dc:	88 ec       	ldi	r24, 0xC8	; 200
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	9d 83       	std	Y+5, r25	; 0x05
    18e2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18e4:	8c 81       	ldd	r24, Y+4	; 0x04
    18e6:	9d 81       	ldd	r25, Y+5	; 0x05
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	f1 f7       	brne	.-4      	; 0x18e8 <LCD_voidLCDInit+0x3be>
    18ec:	9d 83       	std	Y+5, r25	; 0x05
    18ee:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f0:	8e 81       	ldd	r24, Y+6	; 0x06
    18f2:	9f 81       	ldd	r25, Y+7	; 0x07
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	9f 83       	std	Y+7, r25	; 0x07
    18f8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fa:	8e 81       	ldd	r24, Y+6	; 0x06
    18fc:	9f 81       	ldd	r25, Y+7	; 0x07
    18fe:	00 97       	sbiw	r24, 0x00	; 0
    1900:	69 f7       	brne	.-38     	; 0x18dc <LCD_voidLCDInit+0x3b2>
    1902:	24 c0       	rjmp	.+72     	; 0x194c <LCD_voidLCDInit+0x422>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1904:	68 85       	ldd	r22, Y+8	; 0x08
    1906:	79 85       	ldd	r23, Y+9	; 0x09
    1908:	8a 85       	ldd	r24, Y+10	; 0x0a
    190a:	9b 85       	ldd	r25, Y+11	; 0x0b
    190c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	9f 83       	std	Y+7, r25	; 0x07
    1916:	8e 83       	std	Y+6, r24	; 0x06
    1918:	8e 81       	ldd	r24, Y+6	; 0x06
    191a:	9f 81       	ldd	r25, Y+7	; 0x07
    191c:	9b 83       	std	Y+3, r25	; 0x03
    191e:	8a 83       	std	Y+2, r24	; 0x02
    1920:	8a 81       	ldd	r24, Y+2	; 0x02
    1922:	9b 81       	ldd	r25, Y+3	; 0x03
    1924:	01 97       	sbiw	r24, 0x01	; 1
    1926:	f1 f7       	brne	.-4      	; 0x1924 <LCD_voidLCDInit+0x3fa>
    1928:	9b 83       	std	Y+3, r25	; 0x03
    192a:	8a 83       	std	Y+2, r24	; 0x02
    192c:	0f c0       	rjmp	.+30     	; 0x194c <LCD_voidLCDInit+0x422>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    192e:	69 89       	ldd	r22, Y+17	; 0x11
    1930:	7a 89       	ldd	r23, Y+18	; 0x12
    1932:	8b 89       	ldd	r24, Y+19	; 0x13
    1934:	9c 89       	ldd	r25, Y+20	; 0x14
    1936:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	88 8b       	std	Y+16, r24	; 0x10
    1940:	88 89       	ldd	r24, Y+16	; 0x10
    1942:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	8a 95       	dec	r24
    1948:	f1 f7       	brne	.-4      	; 0x1946 <LCD_voidLCDInit+0x41c>
    194a:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(50);

	LCD_voidSendCommand(0x01);
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_voidSendCommand>


}
    1952:	ee 96       	adiw	r28, 0x3e	; 62
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	de bf       	out	0x3e, r29	; 62
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	cd bf       	out	0x3d, r28	; 61
    195e:	cf 91       	pop	r28
    1960:	df 91       	pop	r29
    1962:	08 95       	ret

00001964 <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 CMD)
{
    1964:	df 93       	push	r29
    1966:	cf 93       	push	r28
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
    196c:	69 97       	sbiw	r28, 0x19	; 25
    196e:	0f b6       	in	r0, 0x3f	; 63
    1970:	f8 94       	cli
    1972:	de bf       	out	0x3e, r29	; 62
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	cd bf       	out	0x3d, r28	; 61
    1978:	89 8f       	std	Y+25, r24	; 0x19
	DIO_voidSetPinValue(HLCD_CONTROL_PORT,RS_PIN,DIO_LOW_PIN);
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	62 e0       	ldi	r22, 0x02	; 2
    197e:	40 e0       	ldi	r20, 0x00	; 0
    1980:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(HLCD_CONTROL_PORT,RW_PIN,DIO_LOW_PIN);
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	61 e0       	ldi	r22, 0x01	; 1
    1988:	40 e0       	ldi	r20, 0x00	; 0
    198a:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_voidSetPinValue>

	DIO_u8SetPortValue(HLCD_DATA_PORT,CMD);
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	69 8d       	ldd	r22, Y+25	; 0x19
    1992:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8SetPortValue>

	DIO_voidSetPinValue(HLCD_CONTROL_PORT,ENABLE_PIN,DIO_HIGH_PIN);
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	60 e0       	ldi	r22, 0x00	; 0
    199a:	41 e0       	ldi	r20, 0x01	; 1
    199c:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_voidSetPinValue>
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	a8 ec       	ldi	r26, 0xC8	; 200
    19a6:	b2 e4       	ldi	r27, 0x42	; 66
    19a8:	8d 8b       	std	Y+21, r24	; 0x15
    19aa:	9e 8b       	std	Y+22, r25	; 0x16
    19ac:	af 8b       	std	Y+23, r26	; 0x17
    19ae:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19b0:	6d 89       	ldd	r22, Y+21	; 0x15
    19b2:	7e 89       	ldd	r23, Y+22	; 0x16
    19b4:	8f 89       	ldd	r24, Y+23	; 0x17
    19b6:	98 8d       	ldd	r25, Y+24	; 0x18
    19b8:	2b ea       	ldi	r18, 0xAB	; 171
    19ba:	3a ea       	ldi	r19, 0xAA	; 170
    19bc:	4a e2       	ldi	r20, 0x2A	; 42
    19be:	50 e4       	ldi	r21, 0x40	; 64
    19c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	89 8b       	std	Y+17, r24	; 0x11
    19ca:	9a 8b       	std	Y+18, r25	; 0x12
    19cc:	ab 8b       	std	Y+19, r26	; 0x13
    19ce:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    19d0:	69 89       	ldd	r22, Y+17	; 0x11
    19d2:	7a 89       	ldd	r23, Y+18	; 0x12
    19d4:	8b 89       	ldd	r24, Y+19	; 0x13
    19d6:	9c 89       	ldd	r25, Y+20	; 0x14
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	40 e8       	ldi	r20, 0x80	; 128
    19de:	5f e3       	ldi	r21, 0x3F	; 63
    19e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19e4:	88 23       	and	r24, r24
    19e6:	1c f4       	brge	.+6      	; 0x19ee <LCD_voidSendCommand+0x8a>
		__ticks = 1;
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	88 8b       	std	Y+16, r24	; 0x10
    19ec:	91 c0       	rjmp	.+290    	; 0x1b10 <LCD_voidSendCommand+0x1ac>
	else if (__tmp > 255)
    19ee:	69 89       	ldd	r22, Y+17	; 0x11
    19f0:	7a 89       	ldd	r23, Y+18	; 0x12
    19f2:	8b 89       	ldd	r24, Y+19	; 0x13
    19f4:	9c 89       	ldd	r25, Y+20	; 0x14
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	4f e7       	ldi	r20, 0x7F	; 127
    19fc:	53 e4       	ldi	r21, 0x43	; 67
    19fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a02:	18 16       	cp	r1, r24
    1a04:	0c f0       	brlt	.+2      	; 0x1a08 <LCD_voidSendCommand+0xa4>
    1a06:	7b c0       	rjmp	.+246    	; 0x1afe <LCD_voidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1a08:	6d 89       	ldd	r22, Y+21	; 0x15
    1a0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	4a e7       	ldi	r20, 0x7A	; 122
    1a16:	54 e4       	ldi	r21, 0x44	; 68
    1a18:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	8c 87       	std	Y+12, r24	; 0x0c
    1a22:	9d 87       	std	Y+13, r25	; 0x0d
    1a24:	ae 87       	std	Y+14, r26	; 0x0e
    1a26:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a28:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a2a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a2c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a2e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	4a ef       	ldi	r20, 0xFA	; 250
    1a36:	54 e4       	ldi	r21, 0x44	; 68
    1a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	88 87       	std	Y+8, r24	; 0x08
    1a42:	99 87       	std	Y+9, r25	; 0x09
    1a44:	aa 87       	std	Y+10, r26	; 0x0a
    1a46:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1a48:	68 85       	ldd	r22, Y+8	; 0x08
    1a4a:	79 85       	ldd	r23, Y+9	; 0x09
    1a4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	40 e8       	ldi	r20, 0x80	; 128
    1a56:	5f e3       	ldi	r21, 0x3F	; 63
    1a58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a5c:	88 23       	and	r24, r24
    1a5e:	2c f4       	brge	.+10     	; 0x1a6a <LCD_voidSendCommand+0x106>
		__ticks = 1;
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	9f 83       	std	Y+7, r25	; 0x07
    1a66:	8e 83       	std	Y+6, r24	; 0x06
    1a68:	3f c0       	rjmp	.+126    	; 0x1ae8 <LCD_voidSendCommand+0x184>
	else if (__tmp > 65535)
    1a6a:	68 85       	ldd	r22, Y+8	; 0x08
    1a6c:	79 85       	ldd	r23, Y+9	; 0x09
    1a6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a70:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	3f ef       	ldi	r19, 0xFF	; 255
    1a76:	4f e7       	ldi	r20, 0x7F	; 127
    1a78:	57 e4       	ldi	r21, 0x47	; 71
    1a7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a7e:	18 16       	cp	r1, r24
    1a80:	4c f5       	brge	.+82     	; 0x1ad4 <LCD_voidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a82:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a84:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a86:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a88:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	40 e2       	ldi	r20, 0x20	; 32
    1a90:	51 e4       	ldi	r21, 0x41	; 65
    1a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	bc 01       	movw	r22, r24
    1a9c:	cd 01       	movw	r24, r26
    1a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	9f 83       	std	Y+7, r25	; 0x07
    1aa8:	8e 83       	std	Y+6, r24	; 0x06
    1aaa:	0f c0       	rjmp	.+30     	; 0x1aca <LCD_voidSendCommand+0x166>
    1aac:	88 ec       	ldi	r24, 0xC8	; 200
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	9d 83       	std	Y+5, r25	; 0x05
    1ab2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ab4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	f1 f7       	brne	.-4      	; 0x1ab8 <LCD_voidSendCommand+0x154>
    1abc:	9d 83       	std	Y+5, r25	; 0x05
    1abe:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ac4:	01 97       	sbiw	r24, 0x01	; 1
    1ac6:	9f 83       	std	Y+7, r25	; 0x07
    1ac8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aca:	8e 81       	ldd	r24, Y+6	; 0x06
    1acc:	9f 81       	ldd	r25, Y+7	; 0x07
    1ace:	00 97       	sbiw	r24, 0x00	; 0
    1ad0:	69 f7       	brne	.-38     	; 0x1aac <LCD_voidSendCommand+0x148>
    1ad2:	24 c0       	rjmp	.+72     	; 0x1b1c <LCD_voidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad4:	68 85       	ldd	r22, Y+8	; 0x08
    1ad6:	79 85       	ldd	r23, Y+9	; 0x09
    1ad8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ada:	9b 85       	ldd	r25, Y+11	; 0x0b
    1adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	9f 83       	std	Y+7, r25	; 0x07
    1ae6:	8e 83       	std	Y+6, r24	; 0x06
    1ae8:	8e 81       	ldd	r24, Y+6	; 0x06
    1aea:	9f 81       	ldd	r25, Y+7	; 0x07
    1aec:	9b 83       	std	Y+3, r25	; 0x03
    1aee:	8a 83       	std	Y+2, r24	; 0x02
    1af0:	8a 81       	ldd	r24, Y+2	; 0x02
    1af2:	9b 81       	ldd	r25, Y+3	; 0x03
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	f1 f7       	brne	.-4      	; 0x1af4 <LCD_voidSendCommand+0x190>
    1af8:	9b 83       	std	Y+3, r25	; 0x03
    1afa:	8a 83       	std	Y+2, r24	; 0x02
    1afc:	0f c0       	rjmp	.+30     	; 0x1b1c <LCD_voidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1afe:	69 89       	ldd	r22, Y+17	; 0x11
    1b00:	7a 89       	ldd	r23, Y+18	; 0x12
    1b02:	8b 89       	ldd	r24, Y+19	; 0x13
    1b04:	9c 89       	ldd	r25, Y+20	; 0x14
    1b06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	88 8b       	std	Y+16, r24	; 0x10
    1b10:	88 89       	ldd	r24, Y+16	; 0x10
    1b12:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	8a 95       	dec	r24
    1b18:	f1 f7       	brne	.-4      	; 0x1b16 <LCD_voidSendCommand+0x1b2>
    1b1a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
	DIO_voidSetPinValue(HLCD_CONTROL_PORT,ENABLE_PIN,DIO_LOW_PIN);
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	60 e0       	ldi	r22, 0x00	; 0
    1b20:	40 e0       	ldi	r20, 0x00	; 0
    1b22:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_voidSetPinValue>

}
    1b26:	69 96       	adiw	r28, 0x19	; 25
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	de bf       	out	0x3e, r29	; 62
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	cd bf       	out	0x3d, r28	; 61
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	08 95       	ret

00001b38 <LCD_voidSendCharacter>:


void LCD_voidSendCharacter(u8 Character)
{
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
    1b40:	2f 97       	sbiw	r28, 0x0f	; 15
    1b42:	0f b6       	in	r0, 0x3f	; 63
    1b44:	f8 94       	cli
    1b46:	de bf       	out	0x3e, r29	; 62
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	cd bf       	out	0x3d, r28	; 61
    1b4c:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(HLCD_CONTROL_PORT , RS_PIN , DIO_HIGH_PIN);
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	62 e0       	ldi	r22, 0x02	; 2
    1b52:	41 e0       	ldi	r20, 0x01	; 1
    1b54:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_voidSetPinValue>
	DIO_voidSetPinValue(HLCD_CONTROL_PORT , RW_PIN , DIO_LOW_PIN);
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	61 e0       	ldi	r22, 0x01	; 1
    1b5c:	40 e0       	ldi	r20, 0x00	; 0
    1b5e:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_voidSetPinValue>

	DIO_u8SetPortValue(HLCD_DATA_PORT , Character);
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b66:	0e 94 b4 09 	call	0x1368	; 0x1368 <DIO_u8SetPortValue>

	DIO_voidSetPinValue(HLCD_CONTROL_PORT , ENABLE_PIN , DIO_HIGH_PIN);
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	60 e0       	ldi	r22, 0x00	; 0
    1b6e:	41 e0       	ldi	r20, 0x01	; 1
    1b70:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_voidSetPinValue>
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	a8 e4       	ldi	r26, 0x48	; 72
    1b7a:	b2 e4       	ldi	r27, 0x42	; 66
    1b7c:	8b 87       	std	Y+11, r24	; 0x0b
    1b7e:	9c 87       	std	Y+12, r25	; 0x0c
    1b80:	ad 87       	std	Y+13, r26	; 0x0d
    1b82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	4a ef       	ldi	r20, 0xFA	; 250
    1b92:	54 e4       	ldi	r21, 0x44	; 68
    1b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	8f 83       	std	Y+7, r24	; 0x07
    1b9e:	98 87       	std	Y+8, r25	; 0x08
    1ba0:	a9 87       	std	Y+9, r26	; 0x09
    1ba2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ba4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba6:	78 85       	ldd	r23, Y+8	; 0x08
    1ba8:	89 85       	ldd	r24, Y+9	; 0x09
    1baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	40 e8       	ldi	r20, 0x80	; 128
    1bb2:	5f e3       	ldi	r21, 0x3F	; 63
    1bb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bb8:	88 23       	and	r24, r24
    1bba:	2c f4       	brge	.+10     	; 0x1bc6 <LCD_voidSendCharacter+0x8e>
		__ticks = 1;
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	9e 83       	std	Y+6, r25	; 0x06
    1bc2:	8d 83       	std	Y+5, r24	; 0x05
    1bc4:	3f c0       	rjmp	.+126    	; 0x1c44 <LCD_voidSendCharacter+0x10c>
	else if (__tmp > 65535)
    1bc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc8:	78 85       	ldd	r23, Y+8	; 0x08
    1bca:	89 85       	ldd	r24, Y+9	; 0x09
    1bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	3f ef       	ldi	r19, 0xFF	; 255
    1bd2:	4f e7       	ldi	r20, 0x7F	; 127
    1bd4:	57 e4       	ldi	r21, 0x47	; 71
    1bd6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bda:	18 16       	cp	r1, r24
    1bdc:	4c f5       	brge	.+82     	; 0x1c30 <LCD_voidSendCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bde:	6b 85       	ldd	r22, Y+11	; 0x0b
    1be0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1be2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1be4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	40 e2       	ldi	r20, 0x20	; 32
    1bec:	51 e4       	ldi	r21, 0x41	; 65
    1bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	bc 01       	movw	r22, r24
    1bf8:	cd 01       	movw	r24, r26
    1bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	9e 83       	std	Y+6, r25	; 0x06
    1c04:	8d 83       	std	Y+5, r24	; 0x05
    1c06:	0f c0       	rjmp	.+30     	; 0x1c26 <LCD_voidSendCharacter+0xee>
    1c08:	88 ec       	ldi	r24, 0xC8	; 200
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	9c 83       	std	Y+4, r25	; 0x04
    1c0e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	9c 81       	ldd	r25, Y+4	; 0x04
    1c14:	01 97       	sbiw	r24, 0x01	; 1
    1c16:	f1 f7       	brne	.-4      	; 0x1c14 <LCD_voidSendCharacter+0xdc>
    1c18:	9c 83       	std	Y+4, r25	; 0x04
    1c1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	9e 83       	std	Y+6, r25	; 0x06
    1c24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c26:	8d 81       	ldd	r24, Y+5	; 0x05
    1c28:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2a:	00 97       	sbiw	r24, 0x00	; 0
    1c2c:	69 f7       	brne	.-38     	; 0x1c08 <LCD_voidSendCharacter+0xd0>
    1c2e:	14 c0       	rjmp	.+40     	; 0x1c58 <LCD_voidSendCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c30:	6f 81       	ldd	r22, Y+7	; 0x07
    1c32:	78 85       	ldd	r23, Y+8	; 0x08
    1c34:	89 85       	ldd	r24, Y+9	; 0x09
    1c36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	9e 83       	std	Y+6, r25	; 0x06
    1c42:	8d 83       	std	Y+5, r24	; 0x05
    1c44:	8d 81       	ldd	r24, Y+5	; 0x05
    1c46:	9e 81       	ldd	r25, Y+6	; 0x06
    1c48:	9a 83       	std	Y+2, r25	; 0x02
    1c4a:	89 83       	std	Y+1, r24	; 0x01
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	f1 f7       	brne	.-4      	; 0x1c50 <LCD_voidSendCharacter+0x118>
    1c54:	9a 83       	std	Y+2, r25	; 0x02
    1c56:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	DIO_voidSetPinValue(HLCD_CONTROL_PORT , ENABLE_PIN , DIO_LOW_PIN);
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	60 e0       	ldi	r22, 0x00	; 0
    1c5c:	40 e0       	ldi	r20, 0x00	; 0
    1c5e:	0e 94 16 08 	call	0x102c	; 0x102c <DIO_voidSetPinValue>

}
    1c62:	2f 96       	adiw	r28, 0x0f	; 15
    1c64:	0f b6       	in	r0, 0x3f	; 63
    1c66:	f8 94       	cli
    1c68:	de bf       	out	0x3e, r29	; 62
    1c6a:	0f be       	out	0x3f, r0	; 63
    1c6c:	cd bf       	out	0x3d, r28	; 61
    1c6e:	cf 91       	pop	r28
    1c70:	df 91       	pop	r29
    1c72:	08 95       	ret

00001c74 <LCD_voidSendString>:

void LCD_voidSendString( u8 arr[] )
{
    1c74:	df 93       	push	r29
    1c76:	cf 93       	push	r28
    1c78:	00 d0       	rcall	.+0      	; 0x1c7a <LCD_voidSendString+0x6>
    1c7a:	0f 92       	push	r0
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	9b 83       	std	Y+3, r25	; 0x03
    1c82:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    1c84:	19 82       	std	Y+1, r1	; 0x01
    1c86:	0e c0       	rjmp	.+28     	; 0x1ca4 <LCD_voidSendString+0x30>

	while( arr[i] != '\0')
	{
		LCD_voidSendCharacter(arr[i]);
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c90:	9b 81       	ldd	r25, Y+3	; 0x03
    1c92:	fc 01       	movw	r30, r24
    1c94:	e2 0f       	add	r30, r18
    1c96:	f3 1f       	adc	r31, r19
    1c98:	80 81       	ld	r24, Z
    1c9a:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_voidSendCharacter>
		i++;
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	8f 5f       	subi	r24, 0xFF	; 255
    1ca2:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidSendString( u8 arr[] )
{
	u8 i = 0;

	while( arr[i] != '\0')
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	9b 81       	ldd	r25, Y+3	; 0x03
    1cae:	fc 01       	movw	r30, r24
    1cb0:	e2 0f       	add	r30, r18
    1cb2:	f3 1f       	adc	r31, r19
    1cb4:	80 81       	ld	r24, Z
    1cb6:	88 23       	and	r24, r24
    1cb8:	39 f7       	brne	.-50     	; 0x1c88 <LCD_voidSendString+0x14>
	{
		LCD_voidSendCharacter(arr[i]);
		i++;
	}
}
    1cba:	0f 90       	pop	r0
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	cf 91       	pop	r28
    1cc2:	df 91       	pop	r29
    1cc4:	08 95       	ret

00001cc6 <LCD_U8GoToRowCol>:



u8 LCD_U8GoToRowCol(u8 Copy_u8Row , u8 Copy_u8Col)
{
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <LCD_U8GoToRowCol+0x6>
    1ccc:	00 d0       	rcall	.+0      	; 0x1cce <LCD_U8GoToRowCol+0x8>
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62
    1cd2:	8b 83       	std	Y+3, r24	; 0x03
    1cd4:	6c 83       	std	Y+4, r22	; 0x04

	u8 Local_u8ErrorState = 0;
    1cd6:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_u8DDRAMAddress;

	if((Copy_u8Row == 0 || Copy_u8Row == 1) && (Copy_u8Col >= 0 && Copy_u8Col < 16))
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	88 23       	and	r24, r24
    1cdc:	19 f0       	breq	.+6      	; 0x1ce4 <LCD_U8GoToRowCol+0x1e>
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	81 30       	cpi	r24, 0x01	; 1
    1ce2:	81 f4       	brne	.+32     	; 0x1d04 <LCD_U8GoToRowCol+0x3e>
    1ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce6:	80 31       	cpi	r24, 0x10	; 16
    1ce8:	68 f4       	brcc	.+26     	; 0x1d04 <LCD_U8GoToRowCol+0x3e>
	{
		if(Copy_u8Row == 0)
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	88 23       	and	r24, r24
    1cee:	19 f4       	brne	.+6      	; 0x1cf6 <LCD_U8GoToRowCol+0x30>
		{
			Local_u8DDRAMAddress = Copy_u8Col;
    1cf0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf2:	89 83       	std	Y+1, r24	; 0x01
    1cf4:	09 c0       	rjmp	.+18     	; 0x1d08 <LCD_U8GoToRowCol+0x42>
		}

		else if(Copy_u8Row == 1)
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	81 30       	cpi	r24, 0x01	; 1
    1cfa:	31 f4       	brne	.+12     	; 0x1d08 <LCD_U8GoToRowCol+0x42>
		{
			Local_u8DDRAMAddress = Copy_u8Col + 0x40;
    1cfc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfe:	80 5c       	subi	r24, 0xC0	; 192
    1d00:	89 83       	std	Y+1, r24	; 0x01
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <LCD_U8GoToRowCol+0x42>
		}
	}

	else
	{
		Local_u8ErrorState = 1;
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	8a 83       	std	Y+2, r24	; 0x02
	}

	SET_BIT(Local_u8DDRAMAddress , 7);
    1d08:	89 81       	ldd	r24, Y+1	; 0x01
    1d0a:	80 68       	ori	r24, 0x80	; 128
    1d0c:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidSendCommand(Local_u8DDRAMAddress);
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_voidSendCommand>

	return Local_u8ErrorState;
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	08 95       	ret

00001d24 <LCD_voidSendSpecialCharacter>:


void LCD_voidSendSpecialCharacter(u8 * Copy_pu8Pattern , u8 Copy_u8Location , u8 Copy_u8Row , u8 Copy_u8Col)
{
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
    1d2c:	27 97       	sbiw	r28, 0x07	; 7
    1d2e:	0f b6       	in	r0, 0x3f	; 63
    1d30:	f8 94       	cli
    1d32:	de bf       	out	0x3e, r29	; 62
    1d34:	0f be       	out	0x3f, r0	; 63
    1d36:	cd bf       	out	0x3d, r28	; 61
    1d38:	9c 83       	std	Y+4, r25	; 0x04
    1d3a:	8b 83       	std	Y+3, r24	; 0x03
    1d3c:	6d 83       	std	Y+5, r22	; 0x05
    1d3e:	4e 83       	std	Y+6, r20	; 0x06
    1d40:	2f 83       	std	Y+7, r18	; 0x07

	u8 Local_u8CGRAMAddress ;

	u8 Local_u8PatternIterator ;

	Local_u8CGRAMAddress = Copy_u8Location * 8 ;
    1d42:	8d 81       	ldd	r24, Y+5	; 0x05
    1d44:	88 2f       	mov	r24, r24
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	88 0f       	add	r24, r24
    1d4a:	99 1f       	adc	r25, r25
    1d4c:	88 0f       	add	r24, r24
    1d4e:	99 1f       	adc	r25, r25
    1d50:	88 0f       	add	r24, r24
    1d52:	99 1f       	adc	r25, r25
    1d54:	8a 83       	std	Y+2, r24	; 0x02

	SET_BIT(Local_u8CGRAMAddress , 6);
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	80 64       	ori	r24, 0x40	; 64
    1d5a:	8a 83       	std	Y+2, r24	; 0x02

	LCD_voidSendCommand(Local_u8CGRAMAddress);
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <LCD_voidSendCommand>

	for(Local_u8PatternIterator = 0 ; Local_u8PatternIterator < 8 ; Local_u8PatternIterator ++)
    1d62:	19 82       	std	Y+1, r1	; 0x01
    1d64:	0e c0       	rjmp	.+28     	; 0x1d82 <LCD_voidSendSpecialCharacter+0x5e>
	{
		LCD_voidSendCharacter(Copy_pu8Pattern[Local_u8PatternIterator]);
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	28 2f       	mov	r18, r24
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d70:	fc 01       	movw	r30, r24
    1d72:	e2 0f       	add	r30, r18
    1d74:	f3 1f       	adc	r31, r19
    1d76:	80 81       	ld	r24, Z
    1d78:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_voidSendCharacter>

	SET_BIT(Local_u8CGRAMAddress , 6);

	LCD_voidSendCommand(Local_u8CGRAMAddress);

	for(Local_u8PatternIterator = 0 ; Local_u8PatternIterator < 8 ; Local_u8PatternIterator ++)
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	8f 5f       	subi	r24, 0xFF	; 255
    1d80:	89 83       	std	Y+1, r24	; 0x01
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	88 30       	cpi	r24, 0x08	; 8
    1d86:	78 f3       	brcs	.-34     	; 0x1d66 <LCD_voidSendSpecialCharacter+0x42>
	{
		LCD_voidSendCharacter(Copy_pu8Pattern[Local_u8PatternIterator]);
	}

	LCD_U8GoToRowCol(Copy_u8Row , Copy_u8Col);
    1d88:	8e 81       	ldd	r24, Y+6	; 0x06
    1d8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d8c:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <LCD_U8GoToRowCol>


	LCD_voidSendCharacter(Copy_u8Location);
    1d90:	8d 81       	ldd	r24, Y+5	; 0x05
    1d92:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_voidSendCharacter>
}
    1d96:	27 96       	adiw	r28, 0x07	; 7
    1d98:	0f b6       	in	r0, 0x3f	; 63
    1d9a:	f8 94       	cli
    1d9c:	de bf       	out	0x3e, r29	; 62
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	cd bf       	out	0x3d, r28	; 61
    1da2:	cf 91       	pop	r28
    1da4:	df 91       	pop	r29
    1da6:	08 95       	ret

00001da8 <LCD_voidSendNumber>:



void LCD_voidSendNumber(u16 Copy_u16Number)
{
    1da8:	df 93       	push	r29
    1daa:	cf 93       	push	r28
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	65 97       	sbiw	r28, 0x15	; 21
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	f8 94       	cli
    1db6:	de bf       	out	0x3e, r29	; 62
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	cd bf       	out	0x3d, r28	; 61
    1dbc:	9d 8b       	std	Y+21, r25	; 0x15
    1dbe:	8c 8b       	std	Y+20, r24	; 0x14
	u8 Local_u8Temp[16] ;
	u8 Local_u8Remainder = 0 ;
    1dc0:	1b 82       	std	Y+3, r1	; 0x03
    u8 Local_u8Iterator = 0 ;
    1dc2:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Count = 0 ;
    1dc4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u16Number == 0)
    1dc6:	8c 89       	ldd	r24, Y+20	; 0x14
    1dc8:	9d 89       	ldd	r25, Y+21	; 0x15
    1dca:	00 97       	sbiw	r24, 0x00	; 0
    1dcc:	31 f5       	brne	.+76     	; 0x1e1a <LCD_voidSendNumber+0x72>
	{
		LCD_voidSendCharacter('0');
    1dce:	80 e3       	ldi	r24, 0x30	; 48
    1dd0:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_voidSendCharacter>
    1dd4:	22 c0       	rjmp	.+68     	; 0x1e1a <LCD_voidSendNumber+0x72>
	}

	while(Copy_u16Number > 0)
	{
		Local_u8Remainder = Copy_u16Number % 10 ;
    1dd6:	8c 89       	ldd	r24, Y+20	; 0x14
    1dd8:	9d 89       	ldd	r25, Y+21	; 0x15
    1dda:	2a e0       	ldi	r18, 0x0A	; 10
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	b9 01       	movw	r22, r18
    1de0:	0e 94 76 11 	call	0x22ec	; 0x22ec <__udivmodhi4>
    1de4:	8b 83       	std	Y+3, r24	; 0x03
		Local_u8Temp[Local_u8Iterator] = Local_u8Remainder ;
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	ce 01       	movw	r24, r28
    1dee:	04 96       	adiw	r24, 0x04	; 4
    1df0:	fc 01       	movw	r30, r24
    1df2:	e2 0f       	add	r30, r18
    1df4:	f3 1f       	adc	r31, r19
    1df6:	8b 81       	ldd	r24, Y+3	; 0x03
    1df8:	80 83       	st	Z, r24
		Copy_u16Number /= 10 ;
    1dfa:	8c 89       	ldd	r24, Y+20	; 0x14
    1dfc:	9d 89       	ldd	r25, Y+21	; 0x15
    1dfe:	2a e0       	ldi	r18, 0x0A	; 10
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	b9 01       	movw	r22, r18
    1e04:	0e 94 76 11 	call	0x22ec	; 0x22ec <__udivmodhi4>
    1e08:	cb 01       	movw	r24, r22
    1e0a:	9d 8b       	std	Y+21, r25	; 0x15
    1e0c:	8c 8b       	std	Y+20, r24	; 0x14
		Local_u8Iterator++ ;
    1e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e10:	8f 5f       	subi	r24, 0xFF	; 255
    1e12:	8a 83       	std	Y+2, r24	; 0x02
		Local_u8Count++ ;
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	8f 5f       	subi	r24, 0xFF	; 255
    1e18:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u16Number == 0)
	{
		LCD_voidSendCharacter('0');
	}

	while(Copy_u16Number > 0)
    1e1a:	8c 89       	ldd	r24, Y+20	; 0x14
    1e1c:	9d 89       	ldd	r25, Y+21	; 0x15
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	d1 f6       	brne	.-76     	; 0x1dd6 <LCD_voidSendNumber+0x2e>
		Copy_u16Number /= 10 ;
		Local_u8Iterator++ ;
		Local_u8Count++ ;
	}

	for(Local_u8Iterator = Local_u8Count ; Local_u8Iterator > 0 ; Local_u8Iterator--)
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	8a 83       	std	Y+2, r24	; 0x02
    1e26:	a4 c0       	rjmp	.+328    	; 0x1f70 <LCD_voidSendNumber+0x1c8>
	{
		if(Local_u8Temp[Local_u8Iterator-1] == 1)
    1e28:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2a:	88 2f       	mov	r24, r24
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	9c 01       	movw	r18, r24
    1e30:	21 50       	subi	r18, 0x01	; 1
    1e32:	30 40       	sbci	r19, 0x00	; 0
    1e34:	ce 01       	movw	r24, r28
    1e36:	04 96       	adiw	r24, 0x04	; 4
    1e38:	fc 01       	movw	r30, r24
    1e3a:	e2 0f       	add	r30, r18
    1e3c:	f3 1f       	adc	r31, r19
    1e3e:	80 81       	ld	r24, Z
    1e40:	81 30       	cpi	r24, 0x01	; 1
    1e42:	21 f4       	brne	.+8      	; 0x1e4c <LCD_voidSendNumber+0xa4>
		{
			LCD_voidSendCharacter('1');
    1e44:	81 e3       	ldi	r24, 0x31	; 49
    1e46:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_voidSendCharacter>
    1e4a:	8f c0       	rjmp	.+286    	; 0x1f6a <LCD_voidSendNumber+0x1c2>
		}
		else if(Local_u8Temp[Local_u8Iterator-1] == 2)
    1e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4e:	88 2f       	mov	r24, r24
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	9c 01       	movw	r18, r24
    1e54:	21 50       	subi	r18, 0x01	; 1
    1e56:	30 40       	sbci	r19, 0x00	; 0
    1e58:	ce 01       	movw	r24, r28
    1e5a:	04 96       	adiw	r24, 0x04	; 4
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	e2 0f       	add	r30, r18
    1e60:	f3 1f       	adc	r31, r19
    1e62:	80 81       	ld	r24, Z
    1e64:	82 30       	cpi	r24, 0x02	; 2
    1e66:	21 f4       	brne	.+8      	; 0x1e70 <LCD_voidSendNumber+0xc8>
		{
			LCD_voidSendCharacter('2');
    1e68:	82 e3       	ldi	r24, 0x32	; 50
    1e6a:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_voidSendCharacter>
    1e6e:	7d c0       	rjmp	.+250    	; 0x1f6a <LCD_voidSendNumber+0x1c2>
		}

		else if(Local_u8Temp[Local_u8Iterator-1] == 3)
    1e70:	8a 81       	ldd	r24, Y+2	; 0x02
    1e72:	88 2f       	mov	r24, r24
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	9c 01       	movw	r18, r24
    1e78:	21 50       	subi	r18, 0x01	; 1
    1e7a:	30 40       	sbci	r19, 0x00	; 0
    1e7c:	ce 01       	movw	r24, r28
    1e7e:	04 96       	adiw	r24, 0x04	; 4
    1e80:	fc 01       	movw	r30, r24
    1e82:	e2 0f       	add	r30, r18
    1e84:	f3 1f       	adc	r31, r19
    1e86:	80 81       	ld	r24, Z
    1e88:	83 30       	cpi	r24, 0x03	; 3
    1e8a:	21 f4       	brne	.+8      	; 0x1e94 <LCD_voidSendNumber+0xec>
		{
			LCD_voidSendCharacter('3');
    1e8c:	83 e3       	ldi	r24, 0x33	; 51
    1e8e:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_voidSendCharacter>
    1e92:	6b c0       	rjmp	.+214    	; 0x1f6a <LCD_voidSendNumber+0x1c2>
		}

		else if(Local_u8Temp[Local_u8Iterator-1] == 4)
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	88 2f       	mov	r24, r24
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	9c 01       	movw	r18, r24
    1e9c:	21 50       	subi	r18, 0x01	; 1
    1e9e:	30 40       	sbci	r19, 0x00	; 0
    1ea0:	ce 01       	movw	r24, r28
    1ea2:	04 96       	adiw	r24, 0x04	; 4
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	e2 0f       	add	r30, r18
    1ea8:	f3 1f       	adc	r31, r19
    1eaa:	80 81       	ld	r24, Z
    1eac:	84 30       	cpi	r24, 0x04	; 4
    1eae:	21 f4       	brne	.+8      	; 0x1eb8 <LCD_voidSendNumber+0x110>
		{
			LCD_voidSendCharacter('4');
    1eb0:	84 e3       	ldi	r24, 0x34	; 52
    1eb2:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_voidSendCharacter>
    1eb6:	59 c0       	rjmp	.+178    	; 0x1f6a <LCD_voidSendNumber+0x1c2>
		}
		else if(Local_u8Temp[Local_u8Iterator-1] == 5)
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	88 2f       	mov	r24, r24
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	9c 01       	movw	r18, r24
    1ec0:	21 50       	subi	r18, 0x01	; 1
    1ec2:	30 40       	sbci	r19, 0x00	; 0
    1ec4:	ce 01       	movw	r24, r28
    1ec6:	04 96       	adiw	r24, 0x04	; 4
    1ec8:	fc 01       	movw	r30, r24
    1eca:	e2 0f       	add	r30, r18
    1ecc:	f3 1f       	adc	r31, r19
    1ece:	80 81       	ld	r24, Z
    1ed0:	85 30       	cpi	r24, 0x05	; 5
    1ed2:	21 f4       	brne	.+8      	; 0x1edc <LCD_voidSendNumber+0x134>
		{
			LCD_voidSendCharacter('5');
    1ed4:	85 e3       	ldi	r24, 0x35	; 53
    1ed6:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_voidSendCharacter>
    1eda:	47 c0       	rjmp	.+142    	; 0x1f6a <LCD_voidSendNumber+0x1c2>
		}


		else if(Local_u8Temp[Local_u8Iterator-1] == 6)
    1edc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ede:	88 2f       	mov	r24, r24
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	9c 01       	movw	r18, r24
    1ee4:	21 50       	subi	r18, 0x01	; 1
    1ee6:	30 40       	sbci	r19, 0x00	; 0
    1ee8:	ce 01       	movw	r24, r28
    1eea:	04 96       	adiw	r24, 0x04	; 4
    1eec:	fc 01       	movw	r30, r24
    1eee:	e2 0f       	add	r30, r18
    1ef0:	f3 1f       	adc	r31, r19
    1ef2:	80 81       	ld	r24, Z
    1ef4:	86 30       	cpi	r24, 0x06	; 6
    1ef6:	21 f4       	brne	.+8      	; 0x1f00 <LCD_voidSendNumber+0x158>
		{
			LCD_voidSendCharacter('6');
    1ef8:	86 e3       	ldi	r24, 0x36	; 54
    1efa:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_voidSendCharacter>
    1efe:	35 c0       	rjmp	.+106    	; 0x1f6a <LCD_voidSendNumber+0x1c2>
		}


		else if(Local_u8Temp[Local_u8Iterator-1] == 7)
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
    1f02:	88 2f       	mov	r24, r24
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	9c 01       	movw	r18, r24
    1f08:	21 50       	subi	r18, 0x01	; 1
    1f0a:	30 40       	sbci	r19, 0x00	; 0
    1f0c:	ce 01       	movw	r24, r28
    1f0e:	04 96       	adiw	r24, 0x04	; 4
    1f10:	fc 01       	movw	r30, r24
    1f12:	e2 0f       	add	r30, r18
    1f14:	f3 1f       	adc	r31, r19
    1f16:	80 81       	ld	r24, Z
    1f18:	87 30       	cpi	r24, 0x07	; 7
    1f1a:	21 f4       	brne	.+8      	; 0x1f24 <LCD_voidSendNumber+0x17c>
		{
			LCD_voidSendCharacter('7');
    1f1c:	87 e3       	ldi	r24, 0x37	; 55
    1f1e:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_voidSendCharacter>
    1f22:	23 c0       	rjmp	.+70     	; 0x1f6a <LCD_voidSendNumber+0x1c2>
		}

		else if(Local_u8Temp[Local_u8Iterator-1] == 8)
    1f24:	8a 81       	ldd	r24, Y+2	; 0x02
    1f26:	88 2f       	mov	r24, r24
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	9c 01       	movw	r18, r24
    1f2c:	21 50       	subi	r18, 0x01	; 1
    1f2e:	30 40       	sbci	r19, 0x00	; 0
    1f30:	ce 01       	movw	r24, r28
    1f32:	04 96       	adiw	r24, 0x04	; 4
    1f34:	fc 01       	movw	r30, r24
    1f36:	e2 0f       	add	r30, r18
    1f38:	f3 1f       	adc	r31, r19
    1f3a:	80 81       	ld	r24, Z
    1f3c:	88 30       	cpi	r24, 0x08	; 8
    1f3e:	21 f4       	brne	.+8      	; 0x1f48 <LCD_voidSendNumber+0x1a0>
		{
			LCD_voidSendCharacter('8');
    1f40:	88 e3       	ldi	r24, 0x38	; 56
    1f42:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_voidSendCharacter>
    1f46:	11 c0       	rjmp	.+34     	; 0x1f6a <LCD_voidSendNumber+0x1c2>
		}

		else if(Local_u8Temp[Local_u8Iterator-1] == 9)
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	88 2f       	mov	r24, r24
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	9c 01       	movw	r18, r24
    1f50:	21 50       	subi	r18, 0x01	; 1
    1f52:	30 40       	sbci	r19, 0x00	; 0
    1f54:	ce 01       	movw	r24, r28
    1f56:	04 96       	adiw	r24, 0x04	; 4
    1f58:	fc 01       	movw	r30, r24
    1f5a:	e2 0f       	add	r30, r18
    1f5c:	f3 1f       	adc	r31, r19
    1f5e:	80 81       	ld	r24, Z
    1f60:	89 30       	cpi	r24, 0x09	; 9
    1f62:	19 f4       	brne	.+6      	; 0x1f6a <LCD_voidSendNumber+0x1c2>
		{
			LCD_voidSendCharacter('9');
    1f64:	89 e3       	ldi	r24, 0x39	; 57
    1f66:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <LCD_voidSendCharacter>
		Copy_u16Number /= 10 ;
		Local_u8Iterator++ ;
		Local_u8Count++ ;
	}

	for(Local_u8Iterator = Local_u8Count ; Local_u8Iterator > 0 ; Local_u8Iterator--)
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	81 50       	subi	r24, 0x01	; 1
    1f6e:	8a 83       	std	Y+2, r24	; 0x02
    1f70:	8a 81       	ldd	r24, Y+2	; 0x02
    1f72:	88 23       	and	r24, r24
    1f74:	09 f0       	breq	.+2      	; 0x1f78 <LCD_voidSendNumber+0x1d0>
    1f76:	58 cf       	rjmp	.-336    	; 0x1e28 <LCD_voidSendNumber+0x80>
		else if(Local_u8Temp[Local_u8Iterator-1] == 9)
		{
			LCD_voidSendCharacter('9');
		}
	}
}
    1f78:	65 96       	adiw	r28, 0x15	; 21
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	f8 94       	cli
    1f7e:	de bf       	out	0x3e, r29	; 62
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	cd bf       	out	0x3d, r28	; 61
    1f84:	cf 91       	pop	r28
    1f86:	df 91       	pop	r29
    1f88:	08 95       	ret

00001f8a <TMR0_voidNonInvertedPWM>:
#include "ICU_cfg.h"

void (* GlobalPtrToFunc)(void) = NULL ;

void TMR0_voidNonInvertedPWM(void)
{
    1f8a:	df 93       	push	r29
    1f8c:	cf 93       	push	r28
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
	/*configure timer0 to be in fast PWM mode*/
	SET_BIT(TIMER0_TCCR0 , TCCR0_WGM0);
    1f92:	a3 e5       	ldi	r26, 0x53	; 83
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	e3 e5       	ldi	r30, 0x53	; 83
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	80 64       	ori	r24, 0x40	; 64
    1f9e:	8c 93       	st	X, r24
	SET_BIT(TIMER0_TCCR0 , TCCR0_WGM1);
    1fa0:	a3 e5       	ldi	r26, 0x53	; 83
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	e3 e5       	ldi	r30, 0x53	; 83
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	88 60       	ori	r24, 0x08	; 8
    1fac:	8c 93       	st	X, r24

	/*configure oc0 pin to be non-inverting mode*/
	CLR_BIT(TIMER0_TCCR0 , TCCR0_COM0);
    1fae:	a3 e5       	ldi	r26, 0x53	; 83
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	e3 e5       	ldi	r30, 0x53	; 83
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	8f 7e       	andi	r24, 0xEF	; 239
    1fba:	8c 93       	st	X, r24
	SET_BIT(TIMER0_TCCR0 , TCCR0_COM1);
    1fbc:	a3 e5       	ldi	r26, 0x53	; 83
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	e3 e5       	ldi	r30, 0x53	; 83
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	80 62       	ori	r24, 0x20	; 32
    1fc8:	8c 93       	st	X, r24

	/*Setting Compare match value = 128*/
	TIMER0_OCR0 = 128 ;      //interrupt every 128us....Ton=128 as duty cycle = 50%
    1fca:	ec e5       	ldi	r30, 0x5C	; 92
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 e8       	ldi	r24, 0x80	; 128
    1fd0:	80 83       	st	Z, r24

	/*set prescaler value to be -> 8*/
	TIMER0_TCCR0 &= PRESCALER_MASK ;
    1fd2:	a3 e5       	ldi	r26, 0x53	; 83
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	e3 e5       	ldi	r30, 0x53	; 83
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	88 7f       	andi	r24, 0xF8	; 248
    1fde:	8c 93       	st	X, r24
	TIMER0_TCCR0 |= TMR0_PRESCALER_8 ;
    1fe0:	a3 e5       	ldi	r26, 0x53	; 83
    1fe2:	b0 e0       	ldi	r27, 0x00	; 0
    1fe4:	e3 e5       	ldi	r30, 0x53	; 83
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	82 60       	ori	r24, 0x02	; 2
    1fec:	8c 93       	st	X, r24
}
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	08 95       	ret

00001ff4 <TMR1_voidOVF>:


void TMR1_voidOVF(void (* PtrToCallBack)(void))
{
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	00 d0       	rcall	.+0      	; 0x1ffa <TMR1_voidOVF+0x6>
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
    1ffe:	9a 83       	std	Y+2, r25	; 0x02
    2000:	89 83       	std	Y+1, r24	; 0x01
	/* Select mode of Timer1 = Normal Mode */
	CLR_BIT(TIMER1_TCCR1A, TIMER1_WGM10);
    2002:	af e4       	ldi	r26, 0x4F	; 79
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	ef e4       	ldi	r30, 0x4F	; 79
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	8e 7f       	andi	r24, 0xFE	; 254
    200e:	8c 93       	st	X, r24
	CLR_BIT(TIMER1_TCCR1A, TIMER1_WGM11);
    2010:	af e4       	ldi	r26, 0x4F	; 79
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	ef e4       	ldi	r30, 0x4F	; 79
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	8d 7f       	andi	r24, 0xFD	; 253
    201c:	8c 93       	st	X, r24
	CLR_BIT(TIMER1_TCCR1B, TIMER1_WGM12);
    201e:	ae e4       	ldi	r26, 0x4E	; 78
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	ee e4       	ldi	r30, 0x4E	; 78
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	87 7f       	andi	r24, 0xF7	; 247
    202a:	8c 93       	st	X, r24
	CLR_BIT(TIMER1_TCCR1B, TIMER1_WGM13);
    202c:	ae e4       	ldi	r26, 0x4E	; 78
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	ee e4       	ldi	r30, 0x4E	; 78
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	8f 7e       	andi	r24, 0xEF	; 239
    2038:	8c 93       	st	X, r24

	/*disconnect OC1A, OC1B*/
	CLR_BIT(TIMER1_TCCR1A, TIMER1_COM1A0);
    203a:	af e4       	ldi	r26, 0x4F	; 79
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	ef e4       	ldi	r30, 0x4F	; 79
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	8f 7b       	andi	r24, 0xBF	; 191
    2046:	8c 93       	st	X, r24
	CLR_BIT(TIMER1_TCCR1A, TIMER1_COM1A1);
    2048:	af e4       	ldi	r26, 0x4F	; 79
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	ef e4       	ldi	r30, 0x4F	; 79
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	8f 77       	andi	r24, 0x7F	; 127
    2054:	8c 93       	st	X, r24
	CLR_BIT(TIMER1_TCCR1A, TIMER1_COM1B0);
    2056:	af e4       	ldi	r26, 0x4F	; 79
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	ef e4       	ldi	r30, 0x4F	; 79
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	8f 7e       	andi	r24, 0xEF	; 239
    2062:	8c 93       	st	X, r24
	CLR_BIT(TIMER1_TCCR1A, TIMER1_COM1B1);
    2064:	af e4       	ldi	r26, 0x4F	; 79
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	ef e4       	ldi	r30, 0x4F	; 79
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	8f 7d       	andi	r24, 0xDF	; 223
    2070:	8c 93       	st	X, r24

	/*set sense signal to be RISING EDGE*/
	SET_BIT(TIMER1_TCCR1B , TIMER1_ICES1);
    2072:	ae e4       	ldi	r26, 0x4E	; 78
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	ee e4       	ldi	r30, 0x4E	; 78
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	80 64       	ori	r24, 0x40	; 64
    207e:	8c 93       	st	X, r24

	/*input capture interrupt enable*/
	SET_BIT(TIMSK , TIMSK_TICIE1);
    2080:	a9 e5       	ldi	r26, 0x59	; 89
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	e9 e5       	ldi	r30, 0x59	; 89
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	80 62       	ori	r24, 0x20	; 32
    208c:	8c 93       	st	X, r24

	if(PtrToCallBack != NULL)
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	9a 81       	ldd	r25, Y+2	; 0x02
    2092:	00 97       	sbiw	r24, 0x00	; 0
    2094:	31 f0       	breq	.+12     	; 0x20a2 <TMR1_voidOVF+0xae>
	{
		GlobalPtrToFunc = PtrToCallBack ;
    2096:	89 81       	ldd	r24, Y+1	; 0x01
    2098:	9a 81       	ldd	r25, Y+2	; 0x02
    209a:	90 93 75 00 	sts	0x0075, r25
    209e:	80 93 74 00 	sts	0x0074, r24
	{
		/*do nothing*/
	}

	/* Starts Timer1 at Prescaler 8 */
	TIMER1_TCCR1B &= PRESCALER_MASK ;
    20a2:	ae e4       	ldi	r26, 0x4E	; 78
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	ee e4       	ldi	r30, 0x4E	; 78
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	88 7f       	andi	r24, 0xF8	; 248
    20ae:	8c 93       	st	X, r24
	TIMER1_TCCR1B |= TMR0_PRESCALER_8 ;
    20b0:	ae e4       	ldi	r26, 0x4E	; 78
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	ee e4       	ldi	r30, 0x4E	; 78
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	82 60       	ori	r24, 0x02	; 2
    20bc:	8c 93       	st	X, r24
}
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	08 95       	ret

000020c8 <ICU_u16GetReading>:

u16 ICU_u16GetReading(void)
{
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
	/*get the reading taken as a snapshot from TCNT*/
	return TIMER1_ICR1L ;
    20d0:	e6 e4       	ldi	r30, 0x46	; 70
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	91 81       	ldd	r25, Z+1	; 0x01
}
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	08 95       	ret

000020de <ICU_voidDisableInterrupt>:


void ICU_voidDisableInterrupt(void)
{
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
	/*input capture interrupt disable*/
	CLR_BIT(TIMSK , TIMSK_TICIE1);
    20e6:	a9 e5       	ldi	r26, 0x59	; 89
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	e9 e5       	ldi	r30, 0x59	; 89
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	8f 7d       	andi	r24, 0xDF	; 223
    20f2:	8c 93       	st	X, r24
}
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	08 95       	ret

000020fa <ICU_voidSetSenseSignal>:


void ICU_voidSetSenseSignal(u8 Copy_u8Signal)
{
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	0f 92       	push	r0
    2100:	cd b7       	in	r28, 0x3d	; 61
    2102:	de b7       	in	r29, 0x3e	; 62
    2104:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Signal == FALLING)
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	88 23       	and	r24, r24
    210a:	41 f4       	brne	.+16     	; 0x211c <ICU_voidSetSenseSignal+0x22>
	{
	/*set sense signal to be FALLING EDGE*/
	CLR_BIT(TIMER1_TCCR1B , TIMER1_ICES1);
    210c:	ae e4       	ldi	r26, 0x4E	; 78
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	ee e4       	ldi	r30, 0x4E	; 78
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	8f 7b       	andi	r24, 0xBF	; 191
    2118:	8c 93       	st	X, r24
    211a:	0a c0       	rjmp	.+20     	; 0x2130 <ICU_voidSetSenseSignal+0x36>
	}

	/*set sense signal to be RISING EDGE*/
	else if(Copy_u8Signal == RISING)
    211c:	89 81       	ldd	r24, Y+1	; 0x01
    211e:	81 30       	cpi	r24, 0x01	; 1
    2120:	39 f4       	brne	.+14     	; 0x2130 <ICU_voidSetSenseSignal+0x36>
	{
	SET_BIT(TIMER1_TCCR1B , TIMER1_ICES1);
    2122:	ae e4       	ldi	r26, 0x4E	; 78
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	ee e4       	ldi	r30, 0x4E	; 78
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	80 64       	ori	r24, 0x40	; 64
    212e:	8c 93       	st	X, r24
	}
}
    2130:	0f 90       	pop	r0
    2132:	cf 91       	pop	r28
    2134:	df 91       	pop	r29
    2136:	08 95       	ret

00002138 <__vector_6>:


/*ISR for TIMER1 Input capture mode*/
void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    2138:	1f 92       	push	r1
    213a:	0f 92       	push	r0
    213c:	0f b6       	in	r0, 0x3f	; 63
    213e:	0f 92       	push	r0
    2140:	11 24       	eor	r1, r1
    2142:	2f 93       	push	r18
    2144:	3f 93       	push	r19
    2146:	4f 93       	push	r20
    2148:	5f 93       	push	r21
    214a:	6f 93       	push	r22
    214c:	7f 93       	push	r23
    214e:	8f 93       	push	r24
    2150:	9f 93       	push	r25
    2152:	af 93       	push	r26
    2154:	bf 93       	push	r27
    2156:	ef 93       	push	r30
    2158:	ff 93       	push	r31
    215a:	df 93       	push	r29
    215c:	cf 93       	push	r28
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
	if(GlobalPtrToFunc != NULL)
    2162:	80 91 74 00 	lds	r24, 0x0074
    2166:	90 91 75 00 	lds	r25, 0x0075
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	29 f0       	breq	.+10     	; 0x2178 <__vector_6+0x40>
	{
		GlobalPtrToFunc();
    216e:	e0 91 74 00 	lds	r30, 0x0074
    2172:	f0 91 75 00 	lds	r31, 0x0075
    2176:	09 95       	icall

	else
	{
		/*do nothing*/
	}
}
    2178:	cf 91       	pop	r28
    217a:	df 91       	pop	r29
    217c:	ff 91       	pop	r31
    217e:	ef 91       	pop	r30
    2180:	bf 91       	pop	r27
    2182:	af 91       	pop	r26
    2184:	9f 91       	pop	r25
    2186:	8f 91       	pop	r24
    2188:	7f 91       	pop	r23
    218a:	6f 91       	pop	r22
    218c:	5f 91       	pop	r21
    218e:	4f 91       	pop	r20
    2190:	3f 91       	pop	r19
    2192:	2f 91       	pop	r18
    2194:	0f 90       	pop	r0
    2196:	0f be       	out	0x3f, r0	; 63
    2198:	0f 90       	pop	r0
    219a:	1f 90       	pop	r1
    219c:	18 95       	reti

0000219e <main>:
u16 T_ON = 0, T = 0 ;

void Application(void);

void main(void)
{
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetPinDirection(DIO_PORTB , DIO_PIN3 , DIO_PIN_OUTPUT);          //PWM output signal from TIMER0
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	63 e0       	ldi	r22, 0x03	; 3
    21aa:	40 e0       	ldi	r20, 0x00	; 0
    21ac:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD , DIO_PIN6 , DIO_PIN_INPUT_FLOAT);     //this signal is taken from TIMER0 as an input for ICP pin
    21b0:	83 e0       	ldi	r24, 0x03	; 3
    21b2:	66 e0       	ldi	r22, 0x06	; 6
    21b4:	41 e0       	ldi	r20, 0x01	; 1
    21b6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidSetPinDirection>

	GIE_voidEnable();
    21ba:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <GIE_voidEnable>
	LCD_voidLCDInit();
    21be:	0e 94 95 0a 	call	0x152a	; 0x152a <LCD_voidLCDInit>

	TMR0_voidNonInvertedPWM();         //to generate PWM signal as an input for ICU
    21c2:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <TMR0_voidNonInvertedPWM>
	TMR1_voidOVF(Application);
    21c6:	88 e1       	ldi	r24, 0x18	; 24
    21c8:	91 e1       	ldi	r25, 0x11	; 17
    21ca:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <TMR1_voidOVF>

	while(1)
	{
		while((T_ON == 0) && (T == 0));
    21ce:	80 91 76 00 	lds	r24, 0x0076
    21d2:	90 91 77 00 	lds	r25, 0x0077
    21d6:	00 97       	sbiw	r24, 0x00	; 0
    21d8:	31 f4       	brne	.+12     	; 0x21e6 <main+0x48>
    21da:	80 91 78 00 	lds	r24, 0x0078
    21de:	90 91 79 00 	lds	r25, 0x0079
    21e2:	00 97       	sbiw	r24, 0x00	; 0
    21e4:	a1 f3       	breq	.-24     	; 0x21ce <main+0x30>

		LCD_U8GoToRowCol(0,0);
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	60 e0       	ldi	r22, 0x00	; 0
    21ea:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <LCD_U8GoToRowCol>
		LCD_voidSendString("T =");
    21ee:	80 e6       	ldi	r24, 0x60	; 96
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <LCD_voidSendString>
		LCD_U8GoToRowCol(0,3);
    21f6:	80 e0       	ldi	r24, 0x00	; 0
    21f8:	63 e0       	ldi	r22, 0x03	; 3
    21fa:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <LCD_U8GoToRowCol>
		LCD_voidSendNumber(T);
    21fe:	80 91 78 00 	lds	r24, 0x0078
    2202:	90 91 79 00 	lds	r25, 0x0079
    2206:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_voidSendNumber>
		LCD_U8GoToRowCol(1,0);
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	60 e0       	ldi	r22, 0x00	; 0
    220e:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <LCD_U8GoToRowCol>
		LCD_voidSendString("T_ON =");
    2212:	84 e6       	ldi	r24, 0x64	; 100
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <LCD_voidSendString>
		LCD_U8GoToRowCol(1,6);
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	66 e0       	ldi	r22, 0x06	; 6
    221e:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <LCD_U8GoToRowCol>
		LCD_voidSendNumber(T_ON);
    2222:	80 91 76 00 	lds	r24, 0x0076
    2226:	90 91 77 00 	lds	r25, 0x0077
    222a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_voidSendNumber>
    222e:	cf cf       	rjmp	.-98     	; 0x21ce <main+0x30>

00002230 <Application>:
	}
}


void Application(void)
{
    2230:	df 93       	push	r29
    2232:	cf 93       	push	r28
    2234:	cd b7       	in	r28, 0x3d	; 61
    2236:	de b7       	in	r29, 0x3e	; 62
	static u16 Counter = 0 ;
	Counter++ ;
    2238:	80 91 7a 00 	lds	r24, 0x007A
    223c:	90 91 7b 00 	lds	r25, 0x007B
    2240:	01 96       	adiw	r24, 0x01	; 1
    2242:	90 93 7b 00 	sts	0x007B, r25
    2246:	80 93 7a 00 	sts	0x007A, r24

	if(Counter == 1)
    224a:	80 91 7a 00 	lds	r24, 0x007A
    224e:	90 91 7b 00 	lds	r25, 0x007B
    2252:	81 30       	cpi	r24, 0x01	; 1
    2254:	91 05       	cpc	r25, r1
    2256:	39 f4       	brne	.+14     	; 0x2266 <Application+0x36>
	{
		Reading1 = ICU_u16GetReading();
    2258:	0e 94 64 10 	call	0x20c8	; 0x20c8 <ICU_u16GetReading>
    225c:	90 93 7d 00 	sts	0x007D, r25
    2260:	80 93 7c 00 	sts	0x007C, r24
    2264:	40 c0       	rjmp	.+128    	; 0x22e6 <Application+0xb6>
	}

	else if(Counter == 2)
    2266:	80 91 7a 00 	lds	r24, 0x007A
    226a:	90 91 7b 00 	lds	r25, 0x007B
    226e:	82 30       	cpi	r24, 0x02	; 2
    2270:	91 05       	cpc	r25, r1
    2272:	d1 f4       	brne	.+52     	; 0x22a8 <Application+0x78>
	{
		Reading2 = ICU_u16GetReading();
    2274:	0e 94 64 10 	call	0x20c8	; 0x20c8 <ICU_u16GetReading>
    2278:	90 93 7f 00 	sts	0x007F, r25
    227c:	80 93 7e 00 	sts	0x007E, r24
		ICU_voidSetSenseSignal(FALLING);
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	0e 94 7d 10 	call	0x20fa	; 0x20fa <ICU_voidSetSenseSignal>

		/*assign the period time to T */
		T = Reading2 - Reading1 ;
    2286:	20 91 7e 00 	lds	r18, 0x007E
    228a:	30 91 7f 00 	lds	r19, 0x007F
    228e:	80 91 7c 00 	lds	r24, 0x007C
    2292:	90 91 7d 00 	lds	r25, 0x007D
    2296:	a9 01       	movw	r20, r18
    2298:	48 1b       	sub	r20, r24
    229a:	59 0b       	sbc	r21, r25
    229c:	ca 01       	movw	r24, r20
    229e:	90 93 79 00 	sts	0x0079, r25
    22a2:	80 93 78 00 	sts	0x0078, r24
    22a6:	1f c0       	rjmp	.+62     	; 0x22e6 <Application+0xb6>
	}

	else if(Counter == 3)
    22a8:	80 91 7a 00 	lds	r24, 0x007A
    22ac:	90 91 7b 00 	lds	r25, 0x007B
    22b0:	83 30       	cpi	r24, 0x03	; 3
    22b2:	91 05       	cpc	r25, r1
    22b4:	c1 f4       	brne	.+48     	; 0x22e6 <Application+0xb6>
	{
		Reading3 = ICU_u16GetReading();
    22b6:	0e 94 64 10 	call	0x20c8	; 0x20c8 <ICU_u16GetReading>
    22ba:	90 93 81 00 	sts	0x0081, r25
    22be:	80 93 80 00 	sts	0x0080, r24
		ICU_voidDisableInterrupt();
    22c2:	0e 94 6f 10 	call	0x20de	; 0x20de <ICU_voidDisableInterrupt>
		T_ON = Reading3 - Reading2 ;
    22c6:	20 91 80 00 	lds	r18, 0x0080
    22ca:	30 91 81 00 	lds	r19, 0x0081
    22ce:	80 91 7e 00 	lds	r24, 0x007E
    22d2:	90 91 7f 00 	lds	r25, 0x007F
    22d6:	a9 01       	movw	r20, r18
    22d8:	48 1b       	sub	r20, r24
    22da:	59 0b       	sbc	r21, r25
    22dc:	ca 01       	movw	r24, r20
    22de:	90 93 77 00 	sts	0x0077, r25
    22e2:	80 93 76 00 	sts	0x0076, r24
	}
}
    22e6:	cf 91       	pop	r28
    22e8:	df 91       	pop	r29
    22ea:	08 95       	ret

000022ec <__udivmodhi4>:
    22ec:	aa 1b       	sub	r26, r26
    22ee:	bb 1b       	sub	r27, r27
    22f0:	51 e1       	ldi	r21, 0x11	; 17
    22f2:	07 c0       	rjmp	.+14     	; 0x2302 <__udivmodhi4_ep>

000022f4 <__udivmodhi4_loop>:
    22f4:	aa 1f       	adc	r26, r26
    22f6:	bb 1f       	adc	r27, r27
    22f8:	a6 17       	cp	r26, r22
    22fa:	b7 07       	cpc	r27, r23
    22fc:	10 f0       	brcs	.+4      	; 0x2302 <__udivmodhi4_ep>
    22fe:	a6 1b       	sub	r26, r22
    2300:	b7 0b       	sbc	r27, r23

00002302 <__udivmodhi4_ep>:
    2302:	88 1f       	adc	r24, r24
    2304:	99 1f       	adc	r25, r25
    2306:	5a 95       	dec	r21
    2308:	a9 f7       	brne	.-22     	; 0x22f4 <__udivmodhi4_loop>
    230a:	80 95       	com	r24
    230c:	90 95       	com	r25
    230e:	bc 01       	movw	r22, r24
    2310:	cd 01       	movw	r24, r26
    2312:	08 95       	ret

00002314 <__prologue_saves__>:
    2314:	2f 92       	push	r2
    2316:	3f 92       	push	r3
    2318:	4f 92       	push	r4
    231a:	5f 92       	push	r5
    231c:	6f 92       	push	r6
    231e:	7f 92       	push	r7
    2320:	8f 92       	push	r8
    2322:	9f 92       	push	r9
    2324:	af 92       	push	r10
    2326:	bf 92       	push	r11
    2328:	cf 92       	push	r12
    232a:	df 92       	push	r13
    232c:	ef 92       	push	r14
    232e:	ff 92       	push	r15
    2330:	0f 93       	push	r16
    2332:	1f 93       	push	r17
    2334:	cf 93       	push	r28
    2336:	df 93       	push	r29
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62
    233c:	ca 1b       	sub	r28, r26
    233e:	db 0b       	sbc	r29, r27
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	f8 94       	cli
    2344:	de bf       	out	0x3e, r29	; 62
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	cd bf       	out	0x3d, r28	; 61
    234a:	09 94       	ijmp

0000234c <__epilogue_restores__>:
    234c:	2a 88       	ldd	r2, Y+18	; 0x12
    234e:	39 88       	ldd	r3, Y+17	; 0x11
    2350:	48 88       	ldd	r4, Y+16	; 0x10
    2352:	5f 84       	ldd	r5, Y+15	; 0x0f
    2354:	6e 84       	ldd	r6, Y+14	; 0x0e
    2356:	7d 84       	ldd	r7, Y+13	; 0x0d
    2358:	8c 84       	ldd	r8, Y+12	; 0x0c
    235a:	9b 84       	ldd	r9, Y+11	; 0x0b
    235c:	aa 84       	ldd	r10, Y+10	; 0x0a
    235e:	b9 84       	ldd	r11, Y+9	; 0x09
    2360:	c8 84       	ldd	r12, Y+8	; 0x08
    2362:	df 80       	ldd	r13, Y+7	; 0x07
    2364:	ee 80       	ldd	r14, Y+6	; 0x06
    2366:	fd 80       	ldd	r15, Y+5	; 0x05
    2368:	0c 81       	ldd	r16, Y+4	; 0x04
    236a:	1b 81       	ldd	r17, Y+3	; 0x03
    236c:	aa 81       	ldd	r26, Y+2	; 0x02
    236e:	b9 81       	ldd	r27, Y+1	; 0x01
    2370:	ce 0f       	add	r28, r30
    2372:	d1 1d       	adc	r29, r1
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61
    237e:	ed 01       	movw	r28, r26
    2380:	08 95       	ret

00002382 <_exit>:
    2382:	f8 94       	cli

00002384 <__stop_program>:
    2384:	ff cf       	rjmp	.-2      	; 0x2384 <__stop_program>
