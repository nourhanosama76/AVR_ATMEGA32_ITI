
LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000493a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000493a  000049ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002f88  00000000  00000000  000049b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000097b  00000000  00000000  00007940  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000082bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000083fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000856b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000a1b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000b09f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000be4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000bfac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000c239  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ca07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e3       	ldi	r30, 0x3A	; 58
      68:	f9 e4       	ldi	r31, 0x49	; 73
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <main>
      7a:	0c 94 9b 24 	jmp	0x4936	; 0x4936 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 64 24 	jmp	0x48c8	; 0x48c8 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 80 24 	jmp	0x4900	; 0x4900 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 70 24 	jmp	0x48e0	; 0x48e0 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 8c 24 	jmp	0x4918	; 0x4918 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 70 24 	jmp	0x48e0	; 0x48e0 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 8c 24 	jmp	0x4918	; 0x4918 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 64 24 	jmp	0x48c8	; 0x48c8 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 80 24 	jmp	0x4900	; 0x4900 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 70 24 	jmp	0x48e0	; 0x48e0 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 8c 24 	jmp	0x4918	; 0x4918 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 70 24 	jmp	0x48e0	; 0x48e0 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 8c 24 	jmp	0x4918	; 0x4918 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 70 24 	jmp	0x48e0	; 0x48e0 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 8c 24 	jmp	0x4918	; 0x4918 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 74 24 	jmp	0x48e8	; 0x48e8 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 90 24 	jmp	0x4920	; 0x4920 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_voidSetPinDirection>:
/******************************************************************************/
/*************************Functions' implementation****************************/
/******************************************************************************/

void DIO_voidSetPinDirection(u8 Copy_u8PortID , u8 Copy_u8Pin , u8 Copy_u8PinDirection)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2d 97       	sbiw	r28, 0x0d	; 13
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	6a 83       	std	Y+2, r22	; 0x02
     b4e:	4b 83       	std	Y+3, r20	; 0x03
	/*switching over ports*/
	switch(Copy_u8PortID)
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	3d 87       	std	Y+13, r19	; 0x0d
     b58:	2c 87       	std	Y+12, r18	; 0x0c
     b5a:	8c 85       	ldd	r24, Y+12	; 0x0c
     b5c:	9d 85       	ldd	r25, Y+13	; 0x0d
     b5e:	81 30       	cpi	r24, 0x01	; 1
     b60:	91 05       	cpc	r25, r1
     b62:	09 f4       	brne	.+2      	; 0xb66 <DIO_voidSetPinDirection+0x30>
     b64:	7b c0       	rjmp	.+246    	; 0xc5c <DIO_voidSetPinDirection+0x126>
     b66:	2c 85       	ldd	r18, Y+12	; 0x0c
     b68:	3d 85       	ldd	r19, Y+13	; 0x0d
     b6a:	22 30       	cpi	r18, 0x02	; 2
     b6c:	31 05       	cpc	r19, r1
     b6e:	2c f4       	brge	.+10     	; 0xb7a <DIO_voidSetPinDirection+0x44>
     b70:	8c 85       	ldd	r24, Y+12	; 0x0c
     b72:	9d 85       	ldd	r25, Y+13	; 0x0d
     b74:	00 97       	sbiw	r24, 0x00	; 0
     b76:	71 f0       	breq	.+28     	; 0xb94 <DIO_voidSetPinDirection+0x5e>
     b78:	9c c1       	rjmp	.+824    	; 0xeb2 <DIO_voidSetPinDirection+0x37c>
     b7a:	2c 85       	ldd	r18, Y+12	; 0x0c
     b7c:	3d 85       	ldd	r19, Y+13	; 0x0d
     b7e:	22 30       	cpi	r18, 0x02	; 2
     b80:	31 05       	cpc	r19, r1
     b82:	09 f4       	brne	.+2      	; 0xb86 <DIO_voidSetPinDirection+0x50>
     b84:	cf c0       	rjmp	.+414    	; 0xd24 <DIO_voidSetPinDirection+0x1ee>
     b86:	8c 85       	ldd	r24, Y+12	; 0x0c
     b88:	9d 85       	ldd	r25, Y+13	; 0x0d
     b8a:	83 30       	cpi	r24, 0x03	; 3
     b8c:	91 05       	cpc	r25, r1
     b8e:	09 f4       	brne	.+2      	; 0xb92 <DIO_voidSetPinDirection+0x5c>
     b90:	2d c1       	rjmp	.+602    	; 0xdec <DIO_voidSetPinDirection+0x2b6>
     b92:	8f c1       	rjmp	.+798    	; 0xeb2 <DIO_voidSetPinDirection+0x37c>
	{
		/*in case of setting the direction of a pin in port A*/
		case DIO_PORTA :

			/*switch over different directions*/
			switch(Copy_u8PinDirection)
     b94:	8b 81       	ldd	r24, Y+3	; 0x03
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	3b 87       	std	Y+11, r19	; 0x0b
     b9c:	2a 87       	std	Y+10, r18	; 0x0a
     b9e:	8a 85       	ldd	r24, Y+10	; 0x0a
     ba0:	9b 85       	ldd	r25, Y+11	; 0x0b
     ba2:	81 30       	cpi	r24, 0x01	; 1
     ba4:	91 05       	cpc	r25, r1
     ba6:	f1 f0       	breq	.+60     	; 0xbe4 <DIO_voidSetPinDirection+0xae>
     ba8:	2a 85       	ldd	r18, Y+10	; 0x0a
     baa:	3b 85       	ldd	r19, Y+11	; 0x0b
     bac:	22 30       	cpi	r18, 0x02	; 2
     bae:	31 05       	cpc	r19, r1
     bb0:	71 f1       	breq	.+92     	; 0xc0e <DIO_voidSetPinDirection+0xd8>
     bb2:	8a 85       	ldd	r24, Y+10	; 0x0a
     bb4:	9b 85       	ldd	r25, Y+11	; 0x0b
     bb6:	00 97       	sbiw	r24, 0x00	; 0
     bb8:	09 f0       	breq	.+2      	; 0xbbc <DIO_voidSetPinDirection+0x86>
     bba:	7b c1       	rjmp	.+758    	; 0xeb2 <DIO_voidSetPinDirection+0x37c>
			{
				/*in case of setting the pin to be output*/
				case DIO_PIN_OUTPUT :
					SET_BIT(DDRA , Copy_u8Pin);
     bbc:	aa e3       	ldi	r26, 0x3A	; 58
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	ea e3       	ldi	r30, 0x3A	; 58
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	48 2f       	mov	r20, r24
     bc8:	8a 81       	ldd	r24, Y+2	; 0x02
     bca:	28 2f       	mov	r18, r24
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	02 2e       	mov	r0, r18
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <DIO_voidSetPinDirection+0xa4>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	0a 94       	dec	r0
     bdc:	e2 f7       	brpl	.-8      	; 0xbd6 <DIO_voidSetPinDirection+0xa0>
     bde:	84 2b       	or	r24, r20
     be0:	8c 93       	st	X, r24
     be2:	67 c1       	rjmp	.+718    	; 0xeb2 <DIO_voidSetPinDirection+0x37c>
					break ;

				/*in case of setting the pin direction to be input float*/
				case DIO_PIN_INPUT_FLOAT :
					CLR_BIT(DDRA , Copy_u8Pin);
     be4:	aa e3       	ldi	r26, 0x3A	; 58
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	ea e3       	ldi	r30, 0x3A	; 58
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	48 2f       	mov	r20, r24
     bf0:	8a 81       	ldd	r24, Y+2	; 0x02
     bf2:	28 2f       	mov	r18, r24
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	02 2e       	mov	r0, r18
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <DIO_voidSetPinDirection+0xcc>
     bfe:	88 0f       	add	r24, r24
     c00:	99 1f       	adc	r25, r25
     c02:	0a 94       	dec	r0
     c04:	e2 f7       	brpl	.-8      	; 0xbfe <DIO_voidSetPinDirection+0xc8>
     c06:	80 95       	com	r24
     c08:	84 23       	and	r24, r20
     c0a:	8c 93       	st	X, r24
     c0c:	52 c1       	rjmp	.+676    	; 0xeb2 <DIO_voidSetPinDirection+0x37c>
					break ;

				/*in case of setting the pin direction to be input pull up*/
				case DIO_PIN_INPUT_PULLUP :
					CLR_BIT(DDRA , Copy_u8Pin);
     c0e:	aa e3       	ldi	r26, 0x3A	; 58
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	ea e3       	ldi	r30, 0x3A	; 58
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	48 2f       	mov	r20, r24
     c1a:	8a 81       	ldd	r24, Y+2	; 0x02
     c1c:	28 2f       	mov	r18, r24
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <DIO_voidSetPinDirection+0xf4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	2a 95       	dec	r18
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <DIO_voidSetPinDirection+0xf0>
     c2e:	80 95       	com	r24
     c30:	84 23       	and	r24, r20
     c32:	8c 93       	st	X, r24
					SET_BIT(PORTA , Copy_u8Pin);
     c34:	ab e3       	ldi	r26, 0x3B	; 59
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	eb e3       	ldi	r30, 0x3B	; 59
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <DIO_voidSetPinDirection+0x11c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <DIO_voidSetPinDirection+0x118>
     c56:	84 2b       	or	r24, r20
     c58:	8c 93       	st	X, r24
     c5a:	2b c1       	rjmp	.+598    	; 0xeb2 <DIO_voidSetPinDirection+0x37c>

		/*in case of setting the direction of a pin in port B*/
		case DIO_PORTB :

			/*switch over different directions*/
			switch(Copy_u8PinDirection)
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	28 2f       	mov	r18, r24
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	39 87       	std	Y+9, r19	; 0x09
     c64:	28 87       	std	Y+8, r18	; 0x08
     c66:	88 85       	ldd	r24, Y+8	; 0x08
     c68:	99 85       	ldd	r25, Y+9	; 0x09
     c6a:	81 30       	cpi	r24, 0x01	; 1
     c6c:	91 05       	cpc	r25, r1
     c6e:	f1 f0       	breq	.+60     	; 0xcac <DIO_voidSetPinDirection+0x176>
     c70:	28 85       	ldd	r18, Y+8	; 0x08
     c72:	39 85       	ldd	r19, Y+9	; 0x09
     c74:	22 30       	cpi	r18, 0x02	; 2
     c76:	31 05       	cpc	r19, r1
     c78:	71 f1       	breq	.+92     	; 0xcd6 <DIO_voidSetPinDirection+0x1a0>
     c7a:	88 85       	ldd	r24, Y+8	; 0x08
     c7c:	99 85       	ldd	r25, Y+9	; 0x09
     c7e:	00 97       	sbiw	r24, 0x00	; 0
     c80:	09 f0       	breq	.+2      	; 0xc84 <DIO_voidSetPinDirection+0x14e>
     c82:	17 c1       	rjmp	.+558    	; 0xeb2 <DIO_voidSetPinDirection+0x37c>
			{
				/*in case of setting the pin to be output*/
				case DIO_PIN_OUTPUT :
					SET_BIT(DDRB , Copy_u8Pin);
     c84:	a7 e3       	ldi	r26, 0x37	; 55
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e7 e3       	ldi	r30, 0x37	; 55
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	48 2f       	mov	r20, r24
     c90:	8a 81       	ldd	r24, Y+2	; 0x02
     c92:	28 2f       	mov	r18, r24
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	02 2e       	mov	r0, r18
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <DIO_voidSetPinDirection+0x16c>
     c9e:	88 0f       	add	r24, r24
     ca0:	99 1f       	adc	r25, r25
     ca2:	0a 94       	dec	r0
     ca4:	e2 f7       	brpl	.-8      	; 0xc9e <DIO_voidSetPinDirection+0x168>
     ca6:	84 2b       	or	r24, r20
     ca8:	8c 93       	st	X, r24
     caa:	03 c1       	rjmp	.+518    	; 0xeb2 <DIO_voidSetPinDirection+0x37c>
					break ;

				/*in case of setting the pin direction to be input float*/
				case DIO_PIN_INPUT_FLOAT :
					CLR_BIT(DDRB , Copy_u8Pin);
     cac:	a7 e3       	ldi	r26, 0x37	; 55
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e7 e3       	ldi	r30, 0x37	; 55
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	48 2f       	mov	r20, r24
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	02 2e       	mov	r0, r18
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <DIO_voidSetPinDirection+0x194>
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	0a 94       	dec	r0
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <DIO_voidSetPinDirection+0x190>
     cce:	80 95       	com	r24
     cd0:	84 23       	and	r24, r20
     cd2:	8c 93       	st	X, r24
     cd4:	ee c0       	rjmp	.+476    	; 0xeb2 <DIO_voidSetPinDirection+0x37c>
					break ;

				/*in case of setting the pin direction to be input pull up*/
				case DIO_PIN_INPUT_PULLUP :
					CLR_BIT(DDRB , Copy_u8Pin);
     cd6:	a7 e3       	ldi	r26, 0x37	; 55
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	e7 e3       	ldi	r30, 0x37	; 55
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	48 2f       	mov	r20, r24
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <DIO_voidSetPinDirection+0x1bc>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	2a 95       	dec	r18
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <DIO_voidSetPinDirection+0x1b8>
     cf6:	80 95       	com	r24
     cf8:	84 23       	and	r24, r20
     cfa:	8c 93       	st	X, r24
					SET_BIT(PORTB , Copy_u8Pin);
     cfc:	a8 e3       	ldi	r26, 0x38	; 56
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e8 e3       	ldi	r30, 0x38	; 56
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	48 2f       	mov	r20, r24
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	02 2e       	mov	r0, r18
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <DIO_voidSetPinDirection+0x1e4>
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	0a 94       	dec	r0
     d1c:	e2 f7       	brpl	.-8      	; 0xd16 <DIO_voidSetPinDirection+0x1e0>
     d1e:	84 2b       	or	r24, r20
     d20:	8c 93       	st	X, r24
     d22:	c7 c0       	rjmp	.+398    	; 0xeb2 <DIO_voidSetPinDirection+0x37c>

		/*in case of setting the direction of a pin in port C*/
		case DIO_PORTC :

			/*switch over different directions*/
			switch(Copy_u8PinDirection)
     d24:	8b 81       	ldd	r24, Y+3	; 0x03
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	3f 83       	std	Y+7, r19	; 0x07
     d2c:	2e 83       	std	Y+6, r18	; 0x06
     d2e:	8e 81       	ldd	r24, Y+6	; 0x06
     d30:	9f 81       	ldd	r25, Y+7	; 0x07
     d32:	81 30       	cpi	r24, 0x01	; 1
     d34:	91 05       	cpc	r25, r1
     d36:	f1 f0       	breq	.+60     	; 0xd74 <DIO_voidSetPinDirection+0x23e>
     d38:	2e 81       	ldd	r18, Y+6	; 0x06
     d3a:	3f 81       	ldd	r19, Y+7	; 0x07
     d3c:	22 30       	cpi	r18, 0x02	; 2
     d3e:	31 05       	cpc	r19, r1
     d40:	71 f1       	breq	.+92     	; 0xd9e <DIO_voidSetPinDirection+0x268>
     d42:	8e 81       	ldd	r24, Y+6	; 0x06
     d44:	9f 81       	ldd	r25, Y+7	; 0x07
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	09 f0       	breq	.+2      	; 0xd4c <DIO_voidSetPinDirection+0x216>
     d4a:	b3 c0       	rjmp	.+358    	; 0xeb2 <DIO_voidSetPinDirection+0x37c>
			{
				/*in case of setting the pin to be output*/
				case DIO_PIN_OUTPUT :
					SET_BIT(DDRC , Copy_u8Pin);
     d4c:	a4 e3       	ldi	r26, 0x34	; 52
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e4 e3       	ldi	r30, 0x34	; 52
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	48 2f       	mov	r20, r24
     d58:	8a 81       	ldd	r24, Y+2	; 0x02
     d5a:	28 2f       	mov	r18, r24
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	02 2e       	mov	r0, r18
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <DIO_voidSetPinDirection+0x234>
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	0a 94       	dec	r0
     d6c:	e2 f7       	brpl	.-8      	; 0xd66 <DIO_voidSetPinDirection+0x230>
     d6e:	84 2b       	or	r24, r20
     d70:	8c 93       	st	X, r24
     d72:	9f c0       	rjmp	.+318    	; 0xeb2 <DIO_voidSetPinDirection+0x37c>
					break ;

				/*in case of setting the pin direction to be input float*/
				case DIO_PIN_INPUT_FLOAT :
					CLR_BIT(DDRC , Copy_u8Pin);
     d74:	a4 e3       	ldi	r26, 0x34	; 52
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e4 e3       	ldi	r30, 0x34	; 52
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	48 2f       	mov	r20, r24
     d80:	8a 81       	ldd	r24, Y+2	; 0x02
     d82:	28 2f       	mov	r18, r24
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	02 2e       	mov	r0, r18
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <DIO_voidSetPinDirection+0x25c>
     d8e:	88 0f       	add	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	0a 94       	dec	r0
     d94:	e2 f7       	brpl	.-8      	; 0xd8e <DIO_voidSetPinDirection+0x258>
     d96:	80 95       	com	r24
     d98:	84 23       	and	r24, r20
     d9a:	8c 93       	st	X, r24
     d9c:	8a c0       	rjmp	.+276    	; 0xeb2 <DIO_voidSetPinDirection+0x37c>
					break ;

				/*in case of setting the pin direction to be input pull up*/
				case DIO_PIN_INPUT_PULLUP :
					CLR_BIT(DDRC , Copy_u8Pin);
     d9e:	a4 e3       	ldi	r26, 0x34	; 52
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	e4 e3       	ldi	r30, 0x34	; 52
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	48 2f       	mov	r20, r24
     daa:	8a 81       	ldd	r24, Y+2	; 0x02
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	02 c0       	rjmp	.+4      	; 0xdba <DIO_voidSetPinDirection+0x284>
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	2a 95       	dec	r18
     dbc:	e2 f7       	brpl	.-8      	; 0xdb6 <DIO_voidSetPinDirection+0x280>
     dbe:	80 95       	com	r24
     dc0:	84 23       	and	r24, r20
     dc2:	8c 93       	st	X, r24
					SET_BIT(PORTC , Copy_u8Pin);
     dc4:	a5 e3       	ldi	r26, 0x35	; 53
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e5 e3       	ldi	r30, 0x35	; 53
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	48 2f       	mov	r20, r24
     dd0:	8a 81       	ldd	r24, Y+2	; 0x02
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	02 2e       	mov	r0, r18
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <DIO_voidSetPinDirection+0x2ac>
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	0a 94       	dec	r0
     de4:	e2 f7       	brpl	.-8      	; 0xdde <DIO_voidSetPinDirection+0x2a8>
     de6:	84 2b       	or	r24, r20
     de8:	8c 93       	st	X, r24
     dea:	63 c0       	rjmp	.+198    	; 0xeb2 <DIO_voidSetPinDirection+0x37c>

		/*in case of setting the direction of a pin in port D*/
		case DIO_PORTD :

			/*switch over different directions*/
			switch(Copy_u8PinDirection)
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	28 2f       	mov	r18, r24
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	3d 83       	std	Y+5, r19	; 0x05
     df4:	2c 83       	std	Y+4, r18	; 0x04
     df6:	8c 81       	ldd	r24, Y+4	; 0x04
     df8:	9d 81       	ldd	r25, Y+5	; 0x05
     dfa:	81 30       	cpi	r24, 0x01	; 1
     dfc:	91 05       	cpc	r25, r1
     dfe:	f1 f0       	breq	.+60     	; 0xe3c <DIO_voidSetPinDirection+0x306>
     e00:	2c 81       	ldd	r18, Y+4	; 0x04
     e02:	3d 81       	ldd	r19, Y+5	; 0x05
     e04:	22 30       	cpi	r18, 0x02	; 2
     e06:	31 05       	cpc	r19, r1
     e08:	71 f1       	breq	.+92     	; 0xe66 <DIO_voidSetPinDirection+0x330>
     e0a:	8c 81       	ldd	r24, Y+4	; 0x04
     e0c:	9d 81       	ldd	r25, Y+5	; 0x05
     e0e:	00 97       	sbiw	r24, 0x00	; 0
     e10:	09 f0       	breq	.+2      	; 0xe14 <DIO_voidSetPinDirection+0x2de>
     e12:	4f c0       	rjmp	.+158    	; 0xeb2 <DIO_voidSetPinDirection+0x37c>
			{
				/*in case of setting the pin to be output*/
				case DIO_PIN_OUTPUT :
					SET_BIT(DDRD , Copy_u8Pin);
     e14:	a1 e3       	ldi	r26, 0x31	; 49
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e1 e3       	ldi	r30, 0x31	; 49
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 2e       	mov	r0, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <DIO_voidSetPinDirection+0x2fc>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <DIO_voidSetPinDirection+0x2f8>
     e36:	84 2b       	or	r24, r20
     e38:	8c 93       	st	X, r24
     e3a:	3b c0       	rjmp	.+118    	; 0xeb2 <DIO_voidSetPinDirection+0x37c>
					break ;

				/*in case of setting the pin direction to be input float*/
				case DIO_PIN_INPUT_FLOAT :
					CLR_BIT(DDRD , Copy_u8Pin);
     e3c:	a1 e3       	ldi	r26, 0x31	; 49
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e1 e3       	ldi	r30, 0x31	; 49
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	48 2f       	mov	r20, r24
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 2e       	mov	r0, r18
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <DIO_voidSetPinDirection+0x324>
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	0a 94       	dec	r0
     e5c:	e2 f7       	brpl	.-8      	; 0xe56 <DIO_voidSetPinDirection+0x320>
     e5e:	80 95       	com	r24
     e60:	84 23       	and	r24, r20
     e62:	8c 93       	st	X, r24
     e64:	26 c0       	rjmp	.+76     	; 0xeb2 <DIO_voidSetPinDirection+0x37c>
					break ;

				/*in case of setting the pin direction to be input pull up*/
				case DIO_PIN_INPUT_PULLUP :
					CLR_BIT(DDRD , Copy_u8Pin);
     e66:	a1 e3       	ldi	r26, 0x31	; 49
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	e1 e3       	ldi	r30, 0x31	; 49
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	48 2f       	mov	r20, r24
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_voidSetPinDirection+0x34c>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	2a 95       	dec	r18
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_voidSetPinDirection+0x348>
     e86:	80 95       	com	r24
     e88:	84 23       	and	r24, r20
     e8a:	8c 93       	st	X, r24
					SET_BIT(PORTD , Copy_u8Pin);
     e8c:	a2 e3       	ldi	r26, 0x32	; 50
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e2 e3       	ldi	r30, 0x32	; 50
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <DIO_voidSetPinDirection+0x374>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <DIO_voidSetPinDirection+0x370>
     eae:	84 2b       	or	r24, r20
     eb0:	8c 93       	st	X, r24
					break ;
			}
			break ;
	}
}
     eb2:	2d 96       	adiw	r28, 0x0d	; 13
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	08 95       	ret

00000ec4 <DIO_voidSetPinValue>:



void DIO_voidSetPinValue(u8 Copy_u8PortID , u8 Copy_u8Pin , u8 Copy_u8PinValue)
{
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	00 d0       	rcall	.+0      	; 0xeca <DIO_voidSetPinValue+0x6>
     eca:	00 d0       	rcall	.+0      	; 0xecc <DIO_voidSetPinValue+0x8>
     ecc:	0f 92       	push	r0
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	89 83       	std	Y+1, r24	; 0x01
     ed4:	6a 83       	std	Y+2, r22	; 0x02
     ed6:	4b 83       	std	Y+3, r20	; 0x03
	    /*switching over ports*/
		switch(Copy_u8PortID)
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	3d 83       	std	Y+5, r19	; 0x05
     ee0:	2c 83       	std	Y+4, r18	; 0x04
     ee2:	4c 81       	ldd	r20, Y+4	; 0x04
     ee4:	5d 81       	ldd	r21, Y+5	; 0x05
     ee6:	41 30       	cpi	r20, 0x01	; 1
     ee8:	51 05       	cpc	r21, r1
     eea:	09 f4       	brne	.+2      	; 0xeee <DIO_voidSetPinValue+0x2a>
     eec:	40 c0       	rjmp	.+128    	; 0xf6e <DIO_voidSetPinValue+0xaa>
     eee:	8c 81       	ldd	r24, Y+4	; 0x04
     ef0:	9d 81       	ldd	r25, Y+5	; 0x05
     ef2:	82 30       	cpi	r24, 0x02	; 2
     ef4:	91 05       	cpc	r25, r1
     ef6:	2c f4       	brge	.+10     	; 0xf02 <DIO_voidSetPinValue+0x3e>
     ef8:	ec 81       	ldd	r30, Y+4	; 0x04
     efa:	fd 81       	ldd	r31, Y+5	; 0x05
     efc:	30 97       	sbiw	r30, 0x00	; 0
     efe:	71 f0       	breq	.+28     	; 0xf1c <DIO_voidSetPinValue+0x58>
     f00:	b0 c0       	rjmp	.+352    	; 0x1062 <DIO_voidSetPinValue+0x19e>
     f02:	2c 81       	ldd	r18, Y+4	; 0x04
     f04:	3d 81       	ldd	r19, Y+5	; 0x05
     f06:	22 30       	cpi	r18, 0x02	; 2
     f08:	31 05       	cpc	r19, r1
     f0a:	09 f4       	brne	.+2      	; 0xf0e <DIO_voidSetPinValue+0x4a>
     f0c:	59 c0       	rjmp	.+178    	; 0xfc0 <DIO_voidSetPinValue+0xfc>
     f0e:	4c 81       	ldd	r20, Y+4	; 0x04
     f10:	5d 81       	ldd	r21, Y+5	; 0x05
     f12:	43 30       	cpi	r20, 0x03	; 3
     f14:	51 05       	cpc	r21, r1
     f16:	09 f4       	brne	.+2      	; 0xf1a <DIO_voidSetPinValue+0x56>
     f18:	7c c0       	rjmp	.+248    	; 0x1012 <DIO_voidSetPinValue+0x14e>
     f1a:	a3 c0       	rjmp	.+326    	; 0x1062 <DIO_voidSetPinValue+0x19e>
		{
			/*in case of setting the direction of a pin in port A*/
			case DIO_PORTA :
				WRT_BIT(PORTA , Copy_u8Pin , Copy_u8PinValue);
     f1c:	6b e3       	ldi	r22, 0x3B	; 59
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	88 2f       	mov	r24, r24
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	f9 01       	movw	r30, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_voidSetPinValue+0x70>
     f30:	ee 0f       	add	r30, r30
     f32:	ff 1f       	adc	r31, r31
     f34:	8a 95       	dec	r24
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_voidSetPinValue+0x6c>
     f38:	cf 01       	movw	r24, r30
     f3a:	58 2f       	mov	r21, r24
     f3c:	ab e3       	ldi	r26, 0x3B	; 59
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	eb e3       	ldi	r30, 0x3B	; 59
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	02 2e       	mov	r0, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <DIO_voidSetPinValue+0x96>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	0a 94       	dec	r0
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <DIO_voidSetPinValue+0x92>
     f5e:	80 95       	com	r24
     f60:	84 23       	and	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	8c 91       	ld	r24, X
     f66:	85 2b       	or	r24, r21
     f68:	fb 01       	movw	r30, r22
     f6a:	80 83       	st	Z, r24
     f6c:	7a c0       	rjmp	.+244    	; 0x1062 <DIO_voidSetPinValue+0x19e>
				break ;

			/*in case of setting the direction of a pin in port B*/
			case DIO_PORTB :
				WRT_BIT(PORTB , Copy_u8Pin , Copy_u8PinValue);
     f6e:	68 e3       	ldi	r22, 0x38	; 56
     f70:	70 e0       	ldi	r23, 0x00	; 0
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	88 2f       	mov	r24, r24
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	a9 01       	movw	r20, r18
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <DIO_voidSetPinValue+0xc2>
     f82:	44 0f       	add	r20, r20
     f84:	55 1f       	adc	r21, r21
     f86:	8a 95       	dec	r24
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <DIO_voidSetPinValue+0xbe>
     f8a:	ca 01       	movw	r24, r20
     f8c:	58 2f       	mov	r21, r24
     f8e:	a8 e3       	ldi	r26, 0x38	; 56
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e8 e3       	ldi	r30, 0x38	; 56
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	48 2f       	mov	r20, r24
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 2e       	mov	r0, r18
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <DIO_voidSetPinValue+0xe8>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <DIO_voidSetPinValue+0xe4>
     fb0:	80 95       	com	r24
     fb2:	84 23       	and	r24, r20
     fb4:	8c 93       	st	X, r24
     fb6:	8c 91       	ld	r24, X
     fb8:	85 2b       	or	r24, r21
     fba:	fb 01       	movw	r30, r22
     fbc:	80 83       	st	Z, r24
     fbe:	51 c0       	rjmp	.+162    	; 0x1062 <DIO_voidSetPinValue+0x19e>
				break ;

			/*in case of setting the direction of a pin in port C*/
			case DIO_PORTC :
				WRT_BIT(PORTC , Copy_u8Pin , Copy_u8PinValue);
     fc0:	65 e3       	ldi	r22, 0x35	; 53
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	88 2f       	mov	r24, r24
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	a9 01       	movw	r20, r18
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <DIO_voidSetPinValue+0x114>
     fd4:	44 0f       	add	r20, r20
     fd6:	55 1f       	adc	r21, r21
     fd8:	8a 95       	dec	r24
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <DIO_voidSetPinValue+0x110>
     fdc:	ca 01       	movw	r24, r20
     fde:	58 2f       	mov	r21, r24
     fe0:	a5 e3       	ldi	r26, 0x35	; 53
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e5 e3       	ldi	r30, 0x35	; 53
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	48 2f       	mov	r20, r24
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 2e       	mov	r0, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <DIO_voidSetPinValue+0x13a>
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	0a 94       	dec	r0
    1000:	e2 f7       	brpl	.-8      	; 0xffa <DIO_voidSetPinValue+0x136>
    1002:	80 95       	com	r24
    1004:	84 23       	and	r24, r20
    1006:	8c 93       	st	X, r24
    1008:	8c 91       	ld	r24, X
    100a:	85 2b       	or	r24, r21
    100c:	fb 01       	movw	r30, r22
    100e:	80 83       	st	Z, r24
    1010:	28 c0       	rjmp	.+80     	; 0x1062 <DIO_voidSetPinValue+0x19e>
				break ;

			/*in case of setting the direction of a pin in port D*/
			case DIO_PORTD :
				WRT_BIT(PORTD , Copy_u8Pin , Copy_u8PinValue);
    1012:	62 e3       	ldi	r22, 0x32	; 50
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	88 2f       	mov	r24, r24
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	a9 01       	movw	r20, r18
    1024:	02 c0       	rjmp	.+4      	; 0x102a <DIO_voidSetPinValue+0x166>
    1026:	44 0f       	add	r20, r20
    1028:	55 1f       	adc	r21, r21
    102a:	8a 95       	dec	r24
    102c:	e2 f7       	brpl	.-8      	; 0x1026 <DIO_voidSetPinValue+0x162>
    102e:	ca 01       	movw	r24, r20
    1030:	58 2f       	mov	r21, r24
    1032:	a2 e3       	ldi	r26, 0x32	; 50
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e2 e3       	ldi	r30, 0x32	; 50
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	02 2e       	mov	r0, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <DIO_voidSetPinValue+0x18c>
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	0a 94       	dec	r0
    1052:	e2 f7       	brpl	.-8      	; 0x104c <DIO_voidSetPinValue+0x188>
    1054:	80 95       	com	r24
    1056:	84 23       	and	r24, r20
    1058:	8c 93       	st	X, r24
    105a:	8c 91       	ld	r24, X
    105c:	85 2b       	or	r24, r21
    105e:	fb 01       	movw	r30, r22
    1060:	80 83       	st	Z, r24
				break ;
		}
}
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	08 95       	ret

00001072 <DIO_voidSetPortDirection>:



void DIO_voidSetPortDirection(u8 Copy_u8PortID  , u8 Copy_u8PortDirection)
{
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
    107a:	2c 97       	sbiw	r28, 0x0c	; 12
    107c:	0f b6       	in	r0, 0x3f	; 63
    107e:	f8 94       	cli
    1080:	de bf       	out	0x3e, r29	; 62
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	cd bf       	out	0x3d, r28	; 61
    1086:	89 83       	std	Y+1, r24	; 0x01
    1088:	6a 83       	std	Y+2, r22	; 0x02
    /*switching over ports*/
	switch(Copy_u8PortID)
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	3c 87       	std	Y+12, r19	; 0x0c
    1092:	2b 87       	std	Y+11, r18	; 0x0b
    1094:	8b 85       	ldd	r24, Y+11	; 0x0b
    1096:	9c 85       	ldd	r25, Y+12	; 0x0c
    1098:	81 30       	cpi	r24, 0x01	; 1
    109a:	91 05       	cpc	r25, r1
    109c:	e1 f1       	breq	.+120    	; 0x1116 <DIO_voidSetPortDirection+0xa4>
    109e:	2b 85       	ldd	r18, Y+11	; 0x0b
    10a0:	3c 85       	ldd	r19, Y+12	; 0x0c
    10a2:	22 30       	cpi	r18, 0x02	; 2
    10a4:	31 05       	cpc	r19, r1
    10a6:	2c f4       	brge	.+10     	; 0x10b2 <DIO_voidSetPortDirection+0x40>
    10a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    10aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	71 f0       	breq	.+28     	; 0x10cc <DIO_voidSetPortDirection+0x5a>
    10b0:	9e c0       	rjmp	.+316    	; 0x11ee <DIO_voidSetPortDirection+0x17c>
    10b2:	2b 85       	ldd	r18, Y+11	; 0x0b
    10b4:	3c 85       	ldd	r19, Y+12	; 0x0c
    10b6:	22 30       	cpi	r18, 0x02	; 2
    10b8:	31 05       	cpc	r19, r1
    10ba:	09 f4       	brne	.+2      	; 0x10be <DIO_voidSetPortDirection+0x4c>
    10bc:	51 c0       	rjmp	.+162    	; 0x1160 <DIO_voidSetPortDirection+0xee>
    10be:	8b 85       	ldd	r24, Y+11	; 0x0b
    10c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    10c2:	83 30       	cpi	r24, 0x03	; 3
    10c4:	91 05       	cpc	r25, r1
    10c6:	09 f4       	brne	.+2      	; 0x10ca <DIO_voidSetPortDirection+0x58>
    10c8:	6f c0       	rjmp	.+222    	; 0x11a8 <DIO_voidSetPortDirection+0x136>
    10ca:	91 c0       	rjmp	.+290    	; 0x11ee <DIO_voidSetPortDirection+0x17c>
	{
			/*in case of setting the direction of port A*/
			case DIO_PORTA :

				switch(Copy_u8PortDirection)
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	3a 87       	std	Y+10, r19	; 0x0a
    10d4:	29 87       	std	Y+9, r18	; 0x09
    10d6:	89 85       	ldd	r24, Y+9	; 0x09
    10d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	91 05       	cpc	r25, r1
    10de:	79 f0       	breq	.+30     	; 0x10fe <DIO_voidSetPortDirection+0x8c>
    10e0:	29 85       	ldd	r18, Y+9	; 0x09
    10e2:	3a 85       	ldd	r19, Y+10	; 0x0a
    10e4:	22 30       	cpi	r18, 0x02	; 2
    10e6:	31 05       	cpc	r19, r1
    10e8:	71 f0       	breq	.+28     	; 0x1106 <DIO_voidSetPortDirection+0x94>
    10ea:	89 85       	ldd	r24, Y+9	; 0x09
    10ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ee:	00 97       	sbiw	r24, 0x00	; 0
    10f0:	09 f0       	breq	.+2      	; 0x10f4 <DIO_voidSetPortDirection+0x82>
    10f2:	7d c0       	rjmp	.+250    	; 0x11ee <DIO_voidSetPortDirection+0x17c>
				{
					case DIO_PORT_OUTPUT :
						DDRA = 255 ;
    10f4:	ea e3       	ldi	r30, 0x3A	; 58
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	8f ef       	ldi	r24, 0xFF	; 255
    10fa:	80 83       	st	Z, r24
    10fc:	78 c0       	rjmp	.+240    	; 0x11ee <DIO_voidSetPortDirection+0x17c>
						break ;

					case DIO_PORT_INPUT_FLOAT :
						DDRA = 0 ;
    10fe:	ea e3       	ldi	r30, 0x3A	; 58
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	10 82       	st	Z, r1
    1104:	74 c0       	rjmp	.+232    	; 0x11ee <DIO_voidSetPortDirection+0x17c>
						break ;

					case DIO_PORT_INPUT_PULLUP :
						DDRA = 0 ;
    1106:	ea e3       	ldi	r30, 0x3A	; 58
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	10 82       	st	Z, r1
						PORTA = 255 ;
    110c:	eb e3       	ldi	r30, 0x3B	; 59
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	8f ef       	ldi	r24, 0xFF	; 255
    1112:	80 83       	st	Z, r24
    1114:	6c c0       	rjmp	.+216    	; 0x11ee <DIO_voidSetPortDirection+0x17c>
				break ;

			/*in case of setting the direction of port B*/
			case DIO_PORTB :

				switch(Copy_u8PortDirection)
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	38 87       	std	Y+8, r19	; 0x08
    111e:	2f 83       	std	Y+7, r18	; 0x07
    1120:	8f 81       	ldd	r24, Y+7	; 0x07
    1122:	98 85       	ldd	r25, Y+8	; 0x08
    1124:	81 30       	cpi	r24, 0x01	; 1
    1126:	91 05       	cpc	r25, r1
    1128:	79 f0       	breq	.+30     	; 0x1148 <DIO_voidSetPortDirection+0xd6>
    112a:	2f 81       	ldd	r18, Y+7	; 0x07
    112c:	38 85       	ldd	r19, Y+8	; 0x08
    112e:	22 30       	cpi	r18, 0x02	; 2
    1130:	31 05       	cpc	r19, r1
    1132:	71 f0       	breq	.+28     	; 0x1150 <DIO_voidSetPortDirection+0xde>
    1134:	8f 81       	ldd	r24, Y+7	; 0x07
    1136:	98 85       	ldd	r25, Y+8	; 0x08
    1138:	00 97       	sbiw	r24, 0x00	; 0
    113a:	09 f0       	breq	.+2      	; 0x113e <DIO_voidSetPortDirection+0xcc>
    113c:	58 c0       	rjmp	.+176    	; 0x11ee <DIO_voidSetPortDirection+0x17c>
				{
					case DIO_PORT_OUTPUT :
						DDRB = 255 ;
    113e:	e7 e3       	ldi	r30, 0x37	; 55
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	8f ef       	ldi	r24, 0xFF	; 255
    1144:	80 83       	st	Z, r24
    1146:	53 c0       	rjmp	.+166    	; 0x11ee <DIO_voidSetPortDirection+0x17c>
						break ;

					case DIO_PORT_INPUT_FLOAT :
						DDRB = 0 ;
    1148:	e7 e3       	ldi	r30, 0x37	; 55
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	10 82       	st	Z, r1
    114e:	4f c0       	rjmp	.+158    	; 0x11ee <DIO_voidSetPortDirection+0x17c>
						break ;

					case DIO_PORT_INPUT_PULLUP :
						DDRB = 0 ;
    1150:	e7 e3       	ldi	r30, 0x37	; 55
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	10 82       	st	Z, r1
						PORTB = 255 ;
    1156:	e8 e3       	ldi	r30, 0x38	; 56
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	8f ef       	ldi	r24, 0xFF	; 255
    115c:	80 83       	st	Z, r24
    115e:	47 c0       	rjmp	.+142    	; 0x11ee <DIO_voidSetPortDirection+0x17c>
				}
				break ;

			/*in case of setting the direction of port C*/
			case DIO_PORTC :
				switch(Copy_u8PortDirection)
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	3e 83       	std	Y+6, r19	; 0x06
    1168:	2d 83       	std	Y+5, r18	; 0x05
    116a:	8d 81       	ldd	r24, Y+5	; 0x05
    116c:	9e 81       	ldd	r25, Y+6	; 0x06
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	91 05       	cpc	r25, r1
    1172:	71 f0       	breq	.+28     	; 0x1190 <DIO_voidSetPortDirection+0x11e>
    1174:	2d 81       	ldd	r18, Y+5	; 0x05
    1176:	3e 81       	ldd	r19, Y+6	; 0x06
    1178:	22 30       	cpi	r18, 0x02	; 2
    117a:	31 05       	cpc	r19, r1
    117c:	69 f0       	breq	.+26     	; 0x1198 <DIO_voidSetPortDirection+0x126>
    117e:	8d 81       	ldd	r24, Y+5	; 0x05
    1180:	9e 81       	ldd	r25, Y+6	; 0x06
    1182:	00 97       	sbiw	r24, 0x00	; 0
    1184:	a1 f5       	brne	.+104    	; 0x11ee <DIO_voidSetPortDirection+0x17c>
				{
					case DIO_PORT_OUTPUT :
						DDRC = 255 ;
    1186:	e4 e3       	ldi	r30, 0x34	; 52
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	8f ef       	ldi	r24, 0xFF	; 255
    118c:	80 83       	st	Z, r24
    118e:	2f c0       	rjmp	.+94     	; 0x11ee <DIO_voidSetPortDirection+0x17c>
						break ;

					case DIO_PORT_INPUT_FLOAT :
						DDRC = 0 ;
    1190:	e4 e3       	ldi	r30, 0x34	; 52
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	10 82       	st	Z, r1
    1196:	2b c0       	rjmp	.+86     	; 0x11ee <DIO_voidSetPortDirection+0x17c>
						break ;

					case DIO_PORT_INPUT_PULLUP :
						DDRC  = 0 ;
    1198:	e4 e3       	ldi	r30, 0x34	; 52
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	10 82       	st	Z, r1
						PORTC = 255 ;
    119e:	e5 e3       	ldi	r30, 0x35	; 53
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	8f ef       	ldi	r24, 0xFF	; 255
    11a4:	80 83       	st	Z, r24
    11a6:	23 c0       	rjmp	.+70     	; 0x11ee <DIO_voidSetPortDirection+0x17c>
				}
				break ;

			/*in case of setting the direction of port D*/
			case DIO_PORTD :
				switch(Copy_u8PortDirection)
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	3c 83       	std	Y+4, r19	; 0x04
    11b0:	2b 83       	std	Y+3, r18	; 0x03
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	9c 81       	ldd	r25, Y+4	; 0x04
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	91 05       	cpc	r25, r1
    11ba:	71 f0       	breq	.+28     	; 0x11d8 <DIO_voidSetPortDirection+0x166>
    11bc:	2b 81       	ldd	r18, Y+3	; 0x03
    11be:	3c 81       	ldd	r19, Y+4	; 0x04
    11c0:	22 30       	cpi	r18, 0x02	; 2
    11c2:	31 05       	cpc	r19, r1
    11c4:	69 f0       	breq	.+26     	; 0x11e0 <DIO_voidSetPortDirection+0x16e>
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	81 f4       	brne	.+32     	; 0x11ee <DIO_voidSetPortDirection+0x17c>
				{
					case DIO_PORT_OUTPUT :
						DDRD = 255 ;
    11ce:	e1 e3       	ldi	r30, 0x31	; 49
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	8f ef       	ldi	r24, 0xFF	; 255
    11d4:	80 83       	st	Z, r24
    11d6:	0b c0       	rjmp	.+22     	; 0x11ee <DIO_voidSetPortDirection+0x17c>
						break ;

					case DIO_PORT_INPUT_FLOAT :
						DDRD = 0 ;
    11d8:	e1 e3       	ldi	r30, 0x31	; 49
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	10 82       	st	Z, r1
    11de:	07 c0       	rjmp	.+14     	; 0x11ee <DIO_voidSetPortDirection+0x17c>
						break ;

					case DIO_PORT_INPUT_PULLUP :
						DDRD  = 0 ;
    11e0:	e1 e3       	ldi	r30, 0x31	; 49
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	10 82       	st	Z, r1
						PORTD = 255 ;
    11e6:	e2 e3       	ldi	r30, 0x32	; 50
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	8f ef       	ldi	r24, 0xFF	; 255
    11ec:	80 83       	st	Z, r24
				}

				break ;
	}

}
    11ee:	2c 96       	adiw	r28, 0x0c	; 12
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortID  , u8 Copy_u8PortValue)
{
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	00 d0       	rcall	.+0      	; 0x1206 <DIO_u8SetPortValue+0x6>
    1206:	00 d0       	rcall	.+0      	; 0x1208 <DIO_u8SetPortValue+0x8>
    1208:	0f 92       	push	r0
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	8a 83       	std	Y+2, r24	; 0x02
    1210:	6b 83       	std	Y+3, r22	; 0x03
	 /*this local variable is for error reporting*/
	 /*initially = 0 (ok)*/
	 u8 Local_u8ErrorState = 0 ;
    1212:	19 82       	std	Y+1, r1	; 0x01

	/*checking for valid port value range*/
	if(Copy_u8PortValue >= 0 && Copy_u8PortValue <=255)
	{
		/*switching over ports*/
		switch(Copy_u8PortID)
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	3d 83       	std	Y+5, r19	; 0x05
    121c:	2c 83       	std	Y+4, r18	; 0x04
    121e:	8c 81       	ldd	r24, Y+4	; 0x04
    1220:	9d 81       	ldd	r25, Y+5	; 0x05
    1222:	81 30       	cpi	r24, 0x01	; 1
    1224:	91 05       	cpc	r25, r1
    1226:	d1 f0       	breq	.+52     	; 0x125c <DIO_u8SetPortValue+0x5c>
    1228:	2c 81       	ldd	r18, Y+4	; 0x04
    122a:	3d 81       	ldd	r19, Y+5	; 0x05
    122c:	22 30       	cpi	r18, 0x02	; 2
    122e:	31 05       	cpc	r19, r1
    1230:	2c f4       	brge	.+10     	; 0x123c <DIO_u8SetPortValue+0x3c>
    1232:	8c 81       	ldd	r24, Y+4	; 0x04
    1234:	9d 81       	ldd	r25, Y+5	; 0x05
    1236:	00 97       	sbiw	r24, 0x00	; 0
    1238:	61 f0       	breq	.+24     	; 0x1252 <DIO_u8SetPortValue+0x52>
    123a:	1f c0       	rjmp	.+62     	; 0x127a <DIO_u8SetPortValue+0x7a>
    123c:	2c 81       	ldd	r18, Y+4	; 0x04
    123e:	3d 81       	ldd	r19, Y+5	; 0x05
    1240:	22 30       	cpi	r18, 0x02	; 2
    1242:	31 05       	cpc	r19, r1
    1244:	81 f0       	breq	.+32     	; 0x1266 <DIO_u8SetPortValue+0x66>
    1246:	8c 81       	ldd	r24, Y+4	; 0x04
    1248:	9d 81       	ldd	r25, Y+5	; 0x05
    124a:	83 30       	cpi	r24, 0x03	; 3
    124c:	91 05       	cpc	r25, r1
    124e:	81 f0       	breq	.+32     	; 0x1270 <DIO_u8SetPortValue+0x70>
    1250:	14 c0       	rjmp	.+40     	; 0x127a <DIO_u8SetPortValue+0x7a>
		{
			/*in case of setting the direction of a pin in port A*/
			case DIO_PORTA :
				PORTA = Copy_u8PortValue ;
    1252:	eb e3       	ldi	r30, 0x3B	; 59
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	80 83       	st	Z, r24
    125a:	11 c0       	rjmp	.+34     	; 0x127e <DIO_u8SetPortValue+0x7e>
				break ;

			/*in case of setting the direction of a pin in port B*/
			case DIO_PORTB :
				PORTB = Copy_u8PortValue ;
    125c:	e8 e3       	ldi	r30, 0x38	; 56
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	80 83       	st	Z, r24
    1264:	0c c0       	rjmp	.+24     	; 0x127e <DIO_u8SetPortValue+0x7e>
				break ;

			/*in case of setting the direction of a pin in port C*/
			case DIO_PORTC :
				PORTC = Copy_u8PortValue ;
    1266:	e5 e3       	ldi	r30, 0x35	; 53
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	80 83       	st	Z, r24
    126e:	07 c0       	rjmp	.+14     	; 0x127e <DIO_u8SetPortValue+0x7e>
				break ;

			/*in case of setting the direction of a pin in port D*/
			case DIO_PORTD :
				PORTD = Copy_u8PortValue ;
    1270:	e2 e3       	ldi	r30, 0x32	; 50
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	80 83       	st	Z, r24
    1278:	02 c0       	rjmp	.+4      	; 0x127e <DIO_u8SetPortValue+0x7e>
				break ;

			default :
				/*in case of invalid port ID*/
				Local_u8ErrorState = 1 ;
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	89 83       	std	Y+1, r24	; 0x01
		/*in case of port value out of valid range*/
		Local_u8ErrorState = 2 ;
	}

	/*return the error state*/
	return Local_u8ErrorState ;
    127e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	cf 91       	pop	r28
    128c:	df 91       	pop	r29
    128e:	08 95       	ret

00001290 <DIO_voidTogglePin>:



void DIO_voidTogglePin(u8 Copy_u8PortID  , u8 Copy_u8Pin)
{
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	00 d0       	rcall	.+0      	; 0x1296 <DIO_voidTogglePin+0x6>
    1296:	00 d0       	rcall	.+0      	; 0x1298 <DIO_voidTogglePin+0x8>
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortID)
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	3c 83       	std	Y+4, r19	; 0x04
    12a8:	2b 83       	std	Y+3, r18	; 0x03
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	9c 81       	ldd	r25, Y+4	; 0x04
    12ae:	81 30       	cpi	r24, 0x01	; 1
    12b0:	91 05       	cpc	r25, r1
    12b2:	49 f1       	breq	.+82     	; 0x1306 <DIO_voidTogglePin+0x76>
    12b4:	2b 81       	ldd	r18, Y+3	; 0x03
    12b6:	3c 81       	ldd	r19, Y+4	; 0x04
    12b8:	22 30       	cpi	r18, 0x02	; 2
    12ba:	31 05       	cpc	r19, r1
    12bc:	2c f4       	brge	.+10     	; 0x12c8 <DIO_voidTogglePin+0x38>
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	9c 81       	ldd	r25, Y+4	; 0x04
    12c2:	00 97       	sbiw	r24, 0x00	; 0
    12c4:	61 f0       	breq	.+24     	; 0x12de <DIO_voidTogglePin+0x4e>
    12c6:	5a c0       	rjmp	.+180    	; 0x137c <DIO_voidTogglePin+0xec>
    12c8:	2b 81       	ldd	r18, Y+3	; 0x03
    12ca:	3c 81       	ldd	r19, Y+4	; 0x04
    12cc:	22 30       	cpi	r18, 0x02	; 2
    12ce:	31 05       	cpc	r19, r1
    12d0:	71 f1       	breq	.+92     	; 0x132e <DIO_voidTogglePin+0x9e>
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	9c 81       	ldd	r25, Y+4	; 0x04
    12d6:	83 30       	cpi	r24, 0x03	; 3
    12d8:	91 05       	cpc	r25, r1
    12da:	e9 f1       	breq	.+122    	; 0x1356 <DIO_voidTogglePin+0xc6>
    12dc:	4f c0       	rjmp	.+158    	; 0x137c <DIO_voidTogglePin+0xec>
			{
				/*in case of setting the direction of a pin in port A*/
				case DIO_PORTA :
					TGL_BIT(PORTA , Copy_u8Pin );
    12de:	ab e3       	ldi	r26, 0x3B	; 59
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	eb e3       	ldi	r30, 0x3B	; 59
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	48 2f       	mov	r20, r24
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	02 2e       	mov	r0, r18
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <DIO_voidTogglePin+0x6c>
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	0a 94       	dec	r0
    12fe:	e2 f7       	brpl	.-8      	; 0x12f8 <DIO_voidTogglePin+0x68>
    1300:	84 27       	eor	r24, r20
    1302:	8c 93       	st	X, r24
    1304:	3b c0       	rjmp	.+118    	; 0x137c <DIO_voidTogglePin+0xec>
					break ;

				/*in case of setting the direction of a pin in port B*/
				case DIO_PORTB :
					TGL_BIT(PORTB , Copy_u8Pin );
    1306:	a8 e3       	ldi	r26, 0x38	; 56
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	e8 e3       	ldi	r30, 0x38	; 56
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	48 2f       	mov	r20, r24
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	02 2e       	mov	r0, r18
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <DIO_voidTogglePin+0x94>
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	0a 94       	dec	r0
    1326:	e2 f7       	brpl	.-8      	; 0x1320 <DIO_voidTogglePin+0x90>
    1328:	84 27       	eor	r24, r20
    132a:	8c 93       	st	X, r24
    132c:	27 c0       	rjmp	.+78     	; 0x137c <DIO_voidTogglePin+0xec>
					break ;

				/*in case of setting the direction of a pin in port C*/
				case DIO_PORTC :
					TGL_BIT(PORTC , Copy_u8Pin );
    132e:	a5 e3       	ldi	r26, 0x35	; 53
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	e5 e3       	ldi	r30, 0x35	; 53
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	48 2f       	mov	r20, r24
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	02 2e       	mov	r0, r18
    1346:	02 c0       	rjmp	.+4      	; 0x134c <DIO_voidTogglePin+0xbc>
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	0a 94       	dec	r0
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <DIO_voidTogglePin+0xb8>
    1350:	84 27       	eor	r24, r20
    1352:	8c 93       	st	X, r24
    1354:	13 c0       	rjmp	.+38     	; 0x137c <DIO_voidTogglePin+0xec>
					break ;

				/*in case of setting the direction of a pin in port D*/
				case DIO_PORTD :
					TGL_BIT(PORTD , Copy_u8Pin );
    1356:	a2 e3       	ldi	r26, 0x32	; 50
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e2 e3       	ldi	r30, 0x32	; 50
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	48 2f       	mov	r20, r24
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	02 2e       	mov	r0, r18
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <DIO_voidTogglePin+0xe4>
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	0a 94       	dec	r0
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <DIO_voidTogglePin+0xe0>
    1378:	84 27       	eor	r24, r20
    137a:	8c 93       	st	X, r24
					break ;
			}

}
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <DIO_u8GetPinValue>:



u8 DIO_u8GetPinValue(u8 Copy_u8PortID , u8 Copy_u8Pin)
{
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	00 d0       	rcall	.+0      	; 0x1390 <DIO_u8GetPinValue+0x6>
    1390:	00 d0       	rcall	.+0      	; 0x1392 <DIO_u8GetPinValue+0x8>
    1392:	0f 92       	push	r0
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	8a 83       	std	Y+2, r24	; 0x02
    139a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8PinValue ;

	switch(Copy_u8PortID)
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	3d 83       	std	Y+5, r19	; 0x05
    13a4:	2c 83       	std	Y+4, r18	; 0x04
    13a6:	4c 81       	ldd	r20, Y+4	; 0x04
    13a8:	5d 81       	ldd	r21, Y+5	; 0x05
    13aa:	41 30       	cpi	r20, 0x01	; 1
    13ac:	51 05       	cpc	r21, r1
    13ae:	41 f1       	breq	.+80     	; 0x1400 <DIO_u8GetPinValue+0x76>
    13b0:	8c 81       	ldd	r24, Y+4	; 0x04
    13b2:	9d 81       	ldd	r25, Y+5	; 0x05
    13b4:	82 30       	cpi	r24, 0x02	; 2
    13b6:	91 05       	cpc	r25, r1
    13b8:	34 f4       	brge	.+12     	; 0x13c6 <DIO_u8GetPinValue+0x3c>
    13ba:	2c 81       	ldd	r18, Y+4	; 0x04
    13bc:	3d 81       	ldd	r19, Y+5	; 0x05
    13be:	21 15       	cp	r18, r1
    13c0:	31 05       	cpc	r19, r1
    13c2:	61 f0       	breq	.+24     	; 0x13dc <DIO_u8GetPinValue+0x52>
    13c4:	52 c0       	rjmp	.+164    	; 0x146a <DIO_u8GetPinValue+0xe0>
    13c6:	4c 81       	ldd	r20, Y+4	; 0x04
    13c8:	5d 81       	ldd	r21, Y+5	; 0x05
    13ca:	42 30       	cpi	r20, 0x02	; 2
    13cc:	51 05       	cpc	r21, r1
    13ce:	51 f1       	breq	.+84     	; 0x1424 <DIO_u8GetPinValue+0x9a>
    13d0:	8c 81       	ldd	r24, Y+4	; 0x04
    13d2:	9d 81       	ldd	r25, Y+5	; 0x05
    13d4:	83 30       	cpi	r24, 0x03	; 3
    13d6:	91 05       	cpc	r25, r1
    13d8:	b9 f1       	breq	.+110    	; 0x1448 <DIO_u8GetPinValue+0xbe>
    13da:	47 c0       	rjmp	.+142    	; 0x146a <DIO_u8GetPinValue+0xe0>
			{
				/*in case of setting the direction of a pin in port A*/
				case DIO_PORTA :
					Local_u8PinValue = GET_BIT(PINA , Copy_u8Pin );
    13dc:	e9 e3       	ldi	r30, 0x39	; 57
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	88 2f       	mov	r24, r24
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	a9 01       	movw	r20, r18
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <DIO_u8GetPinValue+0x6a>
    13f0:	55 95       	asr	r21
    13f2:	47 95       	ror	r20
    13f4:	8a 95       	dec	r24
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <DIO_u8GetPinValue+0x66>
    13f8:	ca 01       	movw	r24, r20
    13fa:	81 70       	andi	r24, 0x01	; 1
    13fc:	89 83       	std	Y+1, r24	; 0x01
    13fe:	35 c0       	rjmp	.+106    	; 0x146a <DIO_u8GetPinValue+0xe0>
					break ;

				/*in case of setting the direction of a pin in port B*/
				case DIO_PORTB :
					Local_u8PinValue = GET_BIT(PINB , Copy_u8Pin );
    1400:	e6 e3       	ldi	r30, 0x36	; 54
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	88 2f       	mov	r24, r24
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	a9 01       	movw	r20, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <DIO_u8GetPinValue+0x8e>
    1414:	55 95       	asr	r21
    1416:	47 95       	ror	r20
    1418:	8a 95       	dec	r24
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <DIO_u8GetPinValue+0x8a>
    141c:	ca 01       	movw	r24, r20
    141e:	81 70       	andi	r24, 0x01	; 1
    1420:	89 83       	std	Y+1, r24	; 0x01
    1422:	23 c0       	rjmp	.+70     	; 0x146a <DIO_u8GetPinValue+0xe0>
					break ;

				/*in case of setting the direction of a pin in port C*/
				case DIO_PORTC :
					Local_u8PinValue = GET_BIT(PINC , Copy_u8Pin );
    1424:	e3 e3       	ldi	r30, 0x33	; 51
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	88 2f       	mov	r24, r24
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	a9 01       	movw	r20, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <DIO_u8GetPinValue+0xb2>
    1438:	55 95       	asr	r21
    143a:	47 95       	ror	r20
    143c:	8a 95       	dec	r24
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <DIO_u8GetPinValue+0xae>
    1440:	ca 01       	movw	r24, r20
    1442:	81 70       	andi	r24, 0x01	; 1
    1444:	89 83       	std	Y+1, r24	; 0x01
    1446:	11 c0       	rjmp	.+34     	; 0x146a <DIO_u8GetPinValue+0xe0>
					break ;

				/*in case of setting the direction of a pin in port D*/
				case DIO_PORTD :
					Local_u8PinValue = GET_BIT(PIND , Copy_u8Pin );
    1448:	e0 e3       	ldi	r30, 0x30	; 48
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	88 2f       	mov	r24, r24
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	a9 01       	movw	r20, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <DIO_u8GetPinValue+0xd6>
    145c:	55 95       	asr	r21
    145e:	47 95       	ror	r20
    1460:	8a 95       	dec	r24
    1462:	e2 f7       	brpl	.-8      	; 0x145c <DIO_u8GetPinValue+0xd2>
    1464:	ca 01       	movw	r24, r20
    1466:	81 70       	andi	r24, 0x01	; 1
    1468:	89 83       	std	Y+1, r24	; 0x01
					break ;
			}

	return Local_u8PinValue ;
    146a:	89 81       	ldd	r24, Y+1	; 0x01

}
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	08 95       	ret

0000147c <LED_Init>:
#include "LED_private.h"
#include "LED_cfg.h"


void LED_Init(u8 Copy_u8PortID )
{
    147c:	df 93       	push	r29
    147e:	cf 93       	push	r28
    1480:	0f 92       	push	r0
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
    1486:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPortDirection(Copy_u8PortID , DIO_PORT_OUTPUT);
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	0e 94 39 08 	call	0x1072	; 0x1072 <DIO_voidSetPortDirection>
}
    1490:	0f 90       	pop	r0
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <LED_ON>:

/**********************************************************************************/
void LED_ON(u8 Copy_u8PortID , u8 Copy_u8Pin)
{
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	00 d0       	rcall	.+0      	; 0x149e <LED_ON+0x6>
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
    14a2:	89 83       	std	Y+1, r24	; 0x01
    14a4:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinValue(Copy_u8PortID , Copy_u8Pin , DIO_HIGH_PIN);
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	6a 81       	ldd	r22, Y+2	; 0x02
    14aa:	41 e0       	ldi	r20, 0x01	; 1
    14ac:	0e 94 62 07 	call	0xec4	; 0xec4 <DIO_voidSetPinValue>
}
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <LED_OFF>:

/**********************************************************************************/
void LED_OFF(u8 Copy_u8PortID , u8 Copy_u8Pin)
{
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <LED_OFF+0x6>
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    14c4:	89 83       	std	Y+1, r24	; 0x01
    14c6:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinValue(Copy_u8PortID , Copy_u8Pin , DIO_LOW_PIN);
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
    14ca:	6a 81       	ldd	r22, Y+2	; 0x02
    14cc:	40 e0       	ldi	r20, 0x00	; 0
    14ce:	0e 94 62 07 	call	0xec4	; 0xec4 <DIO_voidSetPinValue>
}
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	cf 91       	pop	r28
    14d8:	df 91       	pop	r29
    14da:	08 95       	ret

000014dc <LED_TOGGLE>:

/**********************************************************************************/
void LED_TOGGLE(u8 Copy_u8PortID , u8 Copy_u8Pin)
{
    14dc:	df 93       	push	r29
    14de:	cf 93       	push	r28
    14e0:	00 d0       	rcall	.+0      	; 0x14e2 <LED_TOGGLE+0x6>
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	89 83       	std	Y+1, r24	; 0x01
    14e8:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidTogglePin(Copy_u8PortID , Copy_u8Pin);
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	6a 81       	ldd	r22, Y+2	; 0x02
    14ee:	0e 94 48 09 	call	0x1290	; 0x1290 <DIO_voidTogglePin>
}
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	08 95       	ret

000014fc <main>:
void DIP_Init(void);

//void DIP_Get_value(u8 SW1 , u8 SW2 , u8 SW3);
/*************************************main function************************************/
void main(void)
{
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	00 d0       	rcall	.+0      	; 0x1502 <main+0x6>
    1502:	00 d0       	rcall	.+0      	; 0x1504 <main+0x8>
    1504:	00 d0       	rcall	.+0      	; 0x1506 <main+0xa>
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62

	u8 SW1 , SW2 ,  SW3, St;

    LED_Init(DIO_PORTA);
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	0e 94 3e 0a 	call	0x147c	; 0x147c <LED_Init>
	DIP_Init();
    1510:	0e 94 4e 24 	call	0x489c	; 0x489c <DIP_Init>

    while(1){

    	SW1 = DIO_u8GetPinValue(DIO_PORTC , DIO_PIN0 );
    1514:	82 e0       	ldi	r24, 0x02	; 2
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	0e 94 c5 09 	call	0x138a	; 0x138a <DIO_u8GetPinValue>
    151c:	8c 83       	std	Y+4, r24	; 0x04
    	SW2 = DIO_u8GetPinValue(DIO_PORTC , DIO_PIN1 );
    151e:	82 e0       	ldi	r24, 0x02	; 2
    1520:	61 e0       	ldi	r22, 0x01	; 1
    1522:	0e 94 c5 09 	call	0x138a	; 0x138a <DIO_u8GetPinValue>
    1526:	8b 83       	std	Y+3, r24	; 0x03
    	SW3 = DIO_u8GetPinValue(DIO_PORTC , DIO_PIN2 );
    1528:	82 e0       	ldi	r24, 0x02	; 2
    152a:	62 e0       	ldi	r22, 0x02	; 2
    152c:	0e 94 c5 09 	call	0x138a	; 0x138a <DIO_u8GetPinValue>
    1530:	8a 83       	std	Y+2, r24	; 0x02
    	St = ((SW1|(SW2<<1))|(SW3<<2));
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	88 2f       	mov	r24, r24
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	98 2f       	mov	r25, r24
    153e:	8c 81       	ldd	r24, Y+4	; 0x04
    1540:	29 2f       	mov	r18, r25
    1542:	28 2b       	or	r18, r24
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	88 2f       	mov	r24, r24
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	82 2b       	or	r24, r18
    1554:	89 83       	std	Y+1, r24	; 0x01

    	switch(St)
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	3e 83       	std	Y+6, r19	; 0x06
    155e:	2d 83       	std	Y+5, r18	; 0x05
    1560:	8d 81       	ldd	r24, Y+5	; 0x05
    1562:	9e 81       	ldd	r25, Y+6	; 0x06
    1564:	83 30       	cpi	r24, 0x03	; 3
    1566:	91 05       	cpc	r25, r1
    1568:	91 f1       	breq	.+100    	; 0x15ce <main+0xd2>
    156a:	2d 81       	ldd	r18, Y+5	; 0x05
    156c:	3e 81       	ldd	r19, Y+6	; 0x06
    156e:	24 30       	cpi	r18, 0x04	; 4
    1570:	31 05       	cpc	r19, r1
    1572:	7c f4       	brge	.+30     	; 0x1592 <main+0x96>
    1574:	8d 81       	ldd	r24, Y+5	; 0x05
    1576:	9e 81       	ldd	r25, Y+6	; 0x06
    1578:	81 30       	cpi	r24, 0x01	; 1
    157a:	91 05       	cpc	r25, r1
    157c:	11 f1       	breq	.+68     	; 0x15c2 <main+0xc6>
    157e:	2d 81       	ldd	r18, Y+5	; 0x05
    1580:	3e 81       	ldd	r19, Y+6	; 0x06
    1582:	22 30       	cpi	r18, 0x02	; 2
    1584:	31 05       	cpc	r19, r1
    1586:	04 f5       	brge	.+64     	; 0x15c8 <main+0xcc>
    1588:	8d 81       	ldd	r24, Y+5	; 0x05
    158a:	9e 81       	ldd	r25, Y+6	; 0x06
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	b1 f0       	breq	.+44     	; 0x15bc <main+0xc0>
    1590:	c1 cf       	rjmp	.-126    	; 0x1514 <main+0x18>
    1592:	2d 81       	ldd	r18, Y+5	; 0x05
    1594:	3e 81       	ldd	r19, Y+6	; 0x06
    1596:	25 30       	cpi	r18, 0x05	; 5
    1598:	31 05       	cpc	r19, r1
    159a:	f9 f0       	breq	.+62     	; 0x15da <main+0xde>
    159c:	8d 81       	ldd	r24, Y+5	; 0x05
    159e:	9e 81       	ldd	r25, Y+6	; 0x06
    15a0:	85 30       	cpi	r24, 0x05	; 5
    15a2:	91 05       	cpc	r25, r1
    15a4:	bc f0       	brlt	.+46     	; 0x15d4 <main+0xd8>
    15a6:	2d 81       	ldd	r18, Y+5	; 0x05
    15a8:	3e 81       	ldd	r19, Y+6	; 0x06
    15aa:	26 30       	cpi	r18, 0x06	; 6
    15ac:	31 05       	cpc	r19, r1
    15ae:	c1 f0       	breq	.+48     	; 0x15e0 <main+0xe4>
    15b0:	8d 81       	ldd	r24, Y+5	; 0x05
    15b2:	9e 81       	ldd	r25, Y+6	; 0x06
    15b4:	87 30       	cpi	r24, 0x07	; 7
    15b6:	91 05       	cpc	r25, r1
    15b8:	b1 f0       	breq	.+44     	; 0x15e6 <main+0xea>
    15ba:	ac cf       	rjmp	.-168    	; 0x1514 <main+0x18>
    	{
    	case 0:
    		Flash_LED();
    15bc:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <Flash_LED>
    15c0:	a9 cf       	rjmp	.-174    	; 0x1514 <main+0x18>
    		break;

    	case 1:
    		shift_UP_DOWN();
    15c2:	0e 94 2d 0c 	call	0x185a	; 0x185a <shift_UP_DOWN>
    15c6:	a6 cf       	rjmp	.-180    	; 0x1514 <main+0x18>
    		break;

    	case 2:
		shift_DOWN_UP();
    15c8:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <shift_DOWN_UP>
    15cc:	a3 cf       	rjmp	.-186    	; 0x1514 <main+0x18>
		break;

    	case 3 :
    		Converge_LED();
    15ce:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <Converge_LED>
    15d2:	a0 cf       	rjmp	.-192    	; 0x1514 <main+0x18>
    		break;

   		case 4 :
   			Diverge_LED();
    15d4:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <Diverge_LED>
    15d8:	9d cf       	rjmp	.-198    	; 0x1514 <main+0x18>
    		break;

    	case 5 :
 			Ping_pong_LED();
    15da:	0e 94 e1 19 	call	0x33c2	; 0x33c2 <Ping_pong_LED>
    15de:	9a cf       	rjmp	.-204    	; 0x1514 <main+0x18>
    		break;

    	case 6 :
    		Increment_LED();
    15e0:	0e 94 ec 19 	call	0x33d8	; 0x33d8 <Increment_LED>
    15e4:	97 cf       	rjmp	.-210    	; 0x1514 <main+0x18>
    		break;

    	case 7 :
    		Converge_Diverge_LED();
    15e6:	0e 94 43 24 	call	0x4886	; 0x4886 <Converge_Diverge_LED>
    15ea:	94 cf       	rjmp	.-216    	; 0x1514 <main+0x18>

000015ec <Flash_LED>:

}


void Flash_LED(void)
{
    15ec:	df 93       	push	r29
    15ee:	cf 93       	push	r28
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
    15f4:	6c 97       	sbiw	r28, 0x1c	; 28
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
	        LED_ON(DIO_PORTA,DIO_PIN0);
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	60 e0       	ldi	r22, 0x00	; 0
    1604:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
			LED_ON(DIO_PORTA,DIO_PIN1);
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	61 e0       	ldi	r22, 0x01	; 1
    160c:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
			LED_ON(DIO_PORTA,DIO_PIN2);
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	62 e0       	ldi	r22, 0x02	; 2
    1614:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
			LED_ON(DIO_PORTA,DIO_PIN3);
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	63 e0       	ldi	r22, 0x03	; 3
    161c:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
			LED_ON(DIO_PORTA,DIO_PIN4);
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	64 e0       	ldi	r22, 0x04	; 4
    1624:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
			LED_ON(DIO_PORTA,DIO_PIN5);
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	65 e0       	ldi	r22, 0x05	; 5
    162c:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
			LED_ON(DIO_PORTA,DIO_PIN6);
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	66 e0       	ldi	r22, 0x06	; 6
    1634:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
			LED_ON(DIO_PORTA,DIO_PIN7);
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	67 e0       	ldi	r22, 0x07	; 7
    163c:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    1640:	80 e0       	ldi	r24, 0x00	; 0
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	aa ef       	ldi	r26, 0xFA	; 250
    1646:	b3 e4       	ldi	r27, 0x43	; 67
    1648:	89 8f       	std	Y+25, r24	; 0x19
    164a:	9a 8f       	std	Y+26, r25	; 0x1a
    164c:	ab 8f       	std	Y+27, r26	; 0x1b
    164e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1650:	69 8d       	ldd	r22, Y+25	; 0x19
    1652:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1654:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1656:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	4a ef       	ldi	r20, 0xFA	; 250
    165e:	54 e4       	ldi	r21, 0x44	; 68
    1660:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	8d 8b       	std	Y+21, r24	; 0x15
    166a:	9e 8b       	std	Y+22, r25	; 0x16
    166c:	af 8b       	std	Y+23, r26	; 0x17
    166e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1670:	6d 89       	ldd	r22, Y+21	; 0x15
    1672:	7e 89       	ldd	r23, Y+22	; 0x16
    1674:	8f 89       	ldd	r24, Y+23	; 0x17
    1676:	98 8d       	ldd	r25, Y+24	; 0x18
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	40 e8       	ldi	r20, 0x80	; 128
    167e:	5f e3       	ldi	r21, 0x3F	; 63
    1680:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1684:	88 23       	and	r24, r24
    1686:	2c f4       	brge	.+10     	; 0x1692 <Flash_LED+0xa6>
		__ticks = 1;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	9c 8b       	std	Y+20, r25	; 0x14
    168e:	8b 8b       	std	Y+19, r24	; 0x13
    1690:	3f c0       	rjmp	.+126    	; 0x1710 <Flash_LED+0x124>
	else if (__tmp > 65535)
    1692:	6d 89       	ldd	r22, Y+21	; 0x15
    1694:	7e 89       	ldd	r23, Y+22	; 0x16
    1696:	8f 89       	ldd	r24, Y+23	; 0x17
    1698:	98 8d       	ldd	r25, Y+24	; 0x18
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	3f ef       	ldi	r19, 0xFF	; 255
    169e:	4f e7       	ldi	r20, 0x7F	; 127
    16a0:	57 e4       	ldi	r21, 0x47	; 71
    16a2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16a6:	18 16       	cp	r1, r24
    16a8:	4c f5       	brge	.+82     	; 0x16fc <Flash_LED+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16aa:	69 8d       	ldd	r22, Y+25	; 0x19
    16ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	40 e2       	ldi	r20, 0x20	; 32
    16b8:	51 e4       	ldi	r21, 0x41	; 65
    16ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	bc 01       	movw	r22, r24
    16c4:	cd 01       	movw	r24, r26
    16c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	9c 8b       	std	Y+20, r25	; 0x14
    16d0:	8b 8b       	std	Y+19, r24	; 0x13
    16d2:	0f c0       	rjmp	.+30     	; 0x16f2 <Flash_LED+0x106>
    16d4:	88 ec       	ldi	r24, 0xC8	; 200
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	9a 8b       	std	Y+18, r25	; 0x12
    16da:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16dc:	89 89       	ldd	r24, Y+17	; 0x11
    16de:	9a 89       	ldd	r25, Y+18	; 0x12
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	f1 f7       	brne	.-4      	; 0x16e0 <Flash_LED+0xf4>
    16e4:	9a 8b       	std	Y+18, r25	; 0x12
    16e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e8:	8b 89       	ldd	r24, Y+19	; 0x13
    16ea:	9c 89       	ldd	r25, Y+20	; 0x14
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	9c 8b       	std	Y+20, r25	; 0x14
    16f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f2:	8b 89       	ldd	r24, Y+19	; 0x13
    16f4:	9c 89       	ldd	r25, Y+20	; 0x14
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	69 f7       	brne	.-38     	; 0x16d4 <Flash_LED+0xe8>
    16fa:	14 c0       	rjmp	.+40     	; 0x1724 <Flash_LED+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16fc:	6d 89       	ldd	r22, Y+21	; 0x15
    16fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1700:	8f 89       	ldd	r24, Y+23	; 0x17
    1702:	98 8d       	ldd	r25, Y+24	; 0x18
    1704:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	9c 8b       	std	Y+20, r25	; 0x14
    170e:	8b 8b       	std	Y+19, r24	; 0x13
    1710:	8b 89       	ldd	r24, Y+19	; 0x13
    1712:	9c 89       	ldd	r25, Y+20	; 0x14
    1714:	98 8b       	std	Y+16, r25	; 0x10
    1716:	8f 87       	std	Y+15, r24	; 0x0f
    1718:	8f 85       	ldd	r24, Y+15	; 0x0f
    171a:	98 89       	ldd	r25, Y+16	; 0x10
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	f1 f7       	brne	.-4      	; 0x171c <Flash_LED+0x130>
    1720:	98 8b       	std	Y+16, r25	; 0x10
    1722:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);

			LED_OFF(DIO_PORTA,DIO_PIN0);
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>
			LED_OFF(DIO_PORTA,DIO_PIN1);
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	61 e0       	ldi	r22, 0x01	; 1
    1730:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>
			LED_OFF(DIO_PORTA,DIO_PIN2);
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	62 e0       	ldi	r22, 0x02	; 2
    1738:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>
			LED_OFF(DIO_PORTA,DIO_PIN3);
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	63 e0       	ldi	r22, 0x03	; 3
    1740:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>
			LED_OFF(DIO_PORTA,DIO_PIN4);
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	64 e0       	ldi	r22, 0x04	; 4
    1748:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>
			LED_OFF(DIO_PORTA,DIO_PIN5);
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	65 e0       	ldi	r22, 0x05	; 5
    1750:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>
			LED_OFF(DIO_PORTA,DIO_PIN6);
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	66 e0       	ldi	r22, 0x06	; 6
    1758:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>
			LED_OFF(DIO_PORTA,DIO_PIN7);
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	67 e0       	ldi	r22, 0x07	; 7
    1760:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	aa ef       	ldi	r26, 0xFA	; 250
    176a:	b3 e4       	ldi	r27, 0x43	; 67
    176c:	8b 87       	std	Y+11, r24	; 0x0b
    176e:	9c 87       	std	Y+12, r25	; 0x0c
    1770:	ad 87       	std	Y+13, r26	; 0x0d
    1772:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1774:	6b 85       	ldd	r22, Y+11	; 0x0b
    1776:	7c 85       	ldd	r23, Y+12	; 0x0c
    1778:	8d 85       	ldd	r24, Y+13	; 0x0d
    177a:	9e 85       	ldd	r25, Y+14	; 0x0e
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	4a ef       	ldi	r20, 0xFA	; 250
    1782:	54 e4       	ldi	r21, 0x44	; 68
    1784:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	8f 83       	std	Y+7, r24	; 0x07
    178e:	98 87       	std	Y+8, r25	; 0x08
    1790:	a9 87       	std	Y+9, r26	; 0x09
    1792:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1794:	6f 81       	ldd	r22, Y+7	; 0x07
    1796:	78 85       	ldd	r23, Y+8	; 0x08
    1798:	89 85       	ldd	r24, Y+9	; 0x09
    179a:	9a 85       	ldd	r25, Y+10	; 0x0a
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	40 e8       	ldi	r20, 0x80	; 128
    17a2:	5f e3       	ldi	r21, 0x3F	; 63
    17a4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17a8:	88 23       	and	r24, r24
    17aa:	2c f4       	brge	.+10     	; 0x17b6 <Flash_LED+0x1ca>
		__ticks = 1;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	9e 83       	std	Y+6, r25	; 0x06
    17b2:	8d 83       	std	Y+5, r24	; 0x05
    17b4:	3f c0       	rjmp	.+126    	; 0x1834 <Flash_LED+0x248>
	else if (__tmp > 65535)
    17b6:	6f 81       	ldd	r22, Y+7	; 0x07
    17b8:	78 85       	ldd	r23, Y+8	; 0x08
    17ba:	89 85       	ldd	r24, Y+9	; 0x09
    17bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	3f ef       	ldi	r19, 0xFF	; 255
    17c2:	4f e7       	ldi	r20, 0x7F	; 127
    17c4:	57 e4       	ldi	r21, 0x47	; 71
    17c6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17ca:	18 16       	cp	r1, r24
    17cc:	4c f5       	brge	.+82     	; 0x1820 <Flash_LED+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	40 e2       	ldi	r20, 0x20	; 32
    17dc:	51 e4       	ldi	r21, 0x41	; 65
    17de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	bc 01       	movw	r22, r24
    17e8:	cd 01       	movw	r24, r26
    17ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	9e 83       	std	Y+6, r25	; 0x06
    17f4:	8d 83       	std	Y+5, r24	; 0x05
    17f6:	0f c0       	rjmp	.+30     	; 0x1816 <Flash_LED+0x22a>
    17f8:	88 ec       	ldi	r24, 0xC8	; 200
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	9c 83       	std	Y+4, r25	; 0x04
    17fe:	8b 83       	std	Y+3, r24	; 0x03
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	9c 81       	ldd	r25, Y+4	; 0x04
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	f1 f7       	brne	.-4      	; 0x1804 <Flash_LED+0x218>
    1808:	9c 83       	std	Y+4, r25	; 0x04
    180a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180c:	8d 81       	ldd	r24, Y+5	; 0x05
    180e:	9e 81       	ldd	r25, Y+6	; 0x06
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	9e 83       	std	Y+6, r25	; 0x06
    1814:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1816:	8d 81       	ldd	r24, Y+5	; 0x05
    1818:	9e 81       	ldd	r25, Y+6	; 0x06
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	69 f7       	brne	.-38     	; 0x17f8 <Flash_LED+0x20c>
    181e:	14 c0       	rjmp	.+40     	; 0x1848 <Flash_LED+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1820:	6f 81       	ldd	r22, Y+7	; 0x07
    1822:	78 85       	ldd	r23, Y+8	; 0x08
    1824:	89 85       	ldd	r24, Y+9	; 0x09
    1826:	9a 85       	ldd	r25, Y+10	; 0x0a
    1828:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	9e 83       	std	Y+6, r25	; 0x06
    1832:	8d 83       	std	Y+5, r24	; 0x05
    1834:	8d 81       	ldd	r24, Y+5	; 0x05
    1836:	9e 81       	ldd	r25, Y+6	; 0x06
    1838:	9a 83       	std	Y+2, r25	; 0x02
    183a:	89 83       	std	Y+1, r24	; 0x01
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	9a 81       	ldd	r25, Y+2	; 0x02
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	f1 f7       	brne	.-4      	; 0x1840 <Flash_LED+0x254>
    1844:	9a 83       	std	Y+2, r25	; 0x02
    1846:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
}
    1848:	6c 96       	adiw	r28, 0x1c	; 28
    184a:	0f b6       	in	r0, 0x3f	; 63
    184c:	f8 94       	cli
    184e:	de bf       	out	0x3e, r29	; 62
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	cd bf       	out	0x3d, r28	; 61
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <shift_UP_DOWN>:

/*****************************************************************************/
void shift_UP_DOWN(void)
{
    185a:	0f 93       	push	r16
    185c:	1f 93       	push	r17
    185e:	df 93       	push	r29
    1860:	cf 93       	push	r28
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	c0 57       	subi	r28, 0x70	; 112
    1868:	d0 40       	sbci	r29, 0x00	; 0
    186a:	0f b6       	in	r0, 0x3f	; 63
    186c:	f8 94       	cli
    186e:	de bf       	out	0x3e, r29	; 62
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	cd bf       	out	0x3d, r28	; 61
	LED_ON(DIO_PORTA,DIO_PIN0);
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    187c:	fe 01       	movw	r30, r28
    187e:	e3 59       	subi	r30, 0x93	; 147
    1880:	ff 4f       	sbci	r31, 0xFF	; 255
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	aa e7       	ldi	r26, 0x7A	; 122
    1888:	b3 e4       	ldi	r27, 0x43	; 67
    188a:	80 83       	st	Z, r24
    188c:	91 83       	std	Z+1, r25	; 0x01
    188e:	a2 83       	std	Z+2, r26	; 0x02
    1890:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1892:	8e 01       	movw	r16, r28
    1894:	07 59       	subi	r16, 0x97	; 151
    1896:	1f 4f       	sbci	r17, 0xFF	; 255
    1898:	fe 01       	movw	r30, r28
    189a:	e3 59       	subi	r30, 0x93	; 147
    189c:	ff 4f       	sbci	r31, 0xFF	; 255
    189e:	60 81       	ld	r22, Z
    18a0:	71 81       	ldd	r23, Z+1	; 0x01
    18a2:	82 81       	ldd	r24, Z+2	; 0x02
    18a4:	93 81       	ldd	r25, Z+3	; 0x03
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	4a ef       	ldi	r20, 0xFA	; 250
    18ac:	54 e4       	ldi	r21, 0x44	; 68
    18ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	f8 01       	movw	r30, r16
    18b8:	80 83       	st	Z, r24
    18ba:	91 83       	std	Z+1, r25	; 0x01
    18bc:	a2 83       	std	Z+2, r26	; 0x02
    18be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18c0:	fe 01       	movw	r30, r28
    18c2:	e7 59       	subi	r30, 0x97	; 151
    18c4:	ff 4f       	sbci	r31, 0xFF	; 255
    18c6:	60 81       	ld	r22, Z
    18c8:	71 81       	ldd	r23, Z+1	; 0x01
    18ca:	82 81       	ldd	r24, Z+2	; 0x02
    18cc:	93 81       	ldd	r25, Z+3	; 0x03
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	40 e8       	ldi	r20, 0x80	; 128
    18d4:	5f e3       	ldi	r21, 0x3F	; 63
    18d6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18da:	88 23       	and	r24, r24
    18dc:	44 f4       	brge	.+16     	; 0x18ee <shift_UP_DOWN+0x94>
		__ticks = 1;
    18de:	fe 01       	movw	r30, r28
    18e0:	e9 59       	subi	r30, 0x99	; 153
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	91 83       	std	Z+1, r25	; 0x01
    18ea:	80 83       	st	Z, r24
    18ec:	64 c0       	rjmp	.+200    	; 0x19b6 <shift_UP_DOWN+0x15c>
	else if (__tmp > 65535)
    18ee:	fe 01       	movw	r30, r28
    18f0:	e7 59       	subi	r30, 0x97	; 151
    18f2:	ff 4f       	sbci	r31, 0xFF	; 255
    18f4:	60 81       	ld	r22, Z
    18f6:	71 81       	ldd	r23, Z+1	; 0x01
    18f8:	82 81       	ldd	r24, Z+2	; 0x02
    18fa:	93 81       	ldd	r25, Z+3	; 0x03
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	3f ef       	ldi	r19, 0xFF	; 255
    1900:	4f e7       	ldi	r20, 0x7F	; 127
    1902:	57 e4       	ldi	r21, 0x47	; 71
    1904:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1908:	18 16       	cp	r1, r24
    190a:	0c f0       	brlt	.+2      	; 0x190e <shift_UP_DOWN+0xb4>
    190c:	43 c0       	rjmp	.+134    	; 0x1994 <shift_UP_DOWN+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190e:	fe 01       	movw	r30, r28
    1910:	e3 59       	subi	r30, 0x93	; 147
    1912:	ff 4f       	sbci	r31, 0xFF	; 255
    1914:	60 81       	ld	r22, Z
    1916:	71 81       	ldd	r23, Z+1	; 0x01
    1918:	82 81       	ldd	r24, Z+2	; 0x02
    191a:	93 81       	ldd	r25, Z+3	; 0x03
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	40 e2       	ldi	r20, 0x20	; 32
    1922:	51 e4       	ldi	r21, 0x41	; 65
    1924:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	8e 01       	movw	r16, r28
    192e:	09 59       	subi	r16, 0x99	; 153
    1930:	1f 4f       	sbci	r17, 0xFF	; 255
    1932:	bc 01       	movw	r22, r24
    1934:	cd 01       	movw	r24, r26
    1936:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	f8 01       	movw	r30, r16
    1940:	91 83       	std	Z+1, r25	; 0x01
    1942:	80 83       	st	Z, r24
    1944:	1f c0       	rjmp	.+62     	; 0x1984 <shift_UP_DOWN+0x12a>
    1946:	fe 01       	movw	r30, r28
    1948:	eb 59       	subi	r30, 0x9B	; 155
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	88 ec       	ldi	r24, 0xC8	; 200
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	91 83       	std	Z+1, r25	; 0x01
    1952:	80 83       	st	Z, r24
    1954:	fe 01       	movw	r30, r28
    1956:	eb 59       	subi	r30, 0x9B	; 155
    1958:	ff 4f       	sbci	r31, 0xFF	; 255
    195a:	80 81       	ld	r24, Z
    195c:	91 81       	ldd	r25, Z+1	; 0x01
    195e:	01 97       	sbiw	r24, 0x01	; 1
    1960:	f1 f7       	brne	.-4      	; 0x195e <shift_UP_DOWN+0x104>
    1962:	fe 01       	movw	r30, r28
    1964:	eb 59       	subi	r30, 0x9B	; 155
    1966:	ff 4f       	sbci	r31, 0xFF	; 255
    1968:	91 83       	std	Z+1, r25	; 0x01
    196a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196c:	de 01       	movw	r26, r28
    196e:	a9 59       	subi	r26, 0x99	; 153
    1970:	bf 4f       	sbci	r27, 0xFF	; 255
    1972:	fe 01       	movw	r30, r28
    1974:	e9 59       	subi	r30, 0x99	; 153
    1976:	ff 4f       	sbci	r31, 0xFF	; 255
    1978:	80 81       	ld	r24, Z
    197a:	91 81       	ldd	r25, Z+1	; 0x01
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	11 96       	adiw	r26, 0x01	; 1
    1980:	9c 93       	st	X, r25
    1982:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1984:	fe 01       	movw	r30, r28
    1986:	e9 59       	subi	r30, 0x99	; 153
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	80 81       	ld	r24, Z
    198c:	91 81       	ldd	r25, Z+1	; 0x01
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	d1 f6       	brne	.-76     	; 0x1946 <shift_UP_DOWN+0xec>
    1992:	27 c0       	rjmp	.+78     	; 0x19e2 <shift_UP_DOWN+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1994:	8e 01       	movw	r16, r28
    1996:	09 59       	subi	r16, 0x99	; 153
    1998:	1f 4f       	sbci	r17, 0xFF	; 255
    199a:	fe 01       	movw	r30, r28
    199c:	e7 59       	subi	r30, 0x97	; 151
    199e:	ff 4f       	sbci	r31, 0xFF	; 255
    19a0:	60 81       	ld	r22, Z
    19a2:	71 81       	ldd	r23, Z+1	; 0x01
    19a4:	82 81       	ldd	r24, Z+2	; 0x02
    19a6:	93 81       	ldd	r25, Z+3	; 0x03
    19a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	f8 01       	movw	r30, r16
    19b2:	91 83       	std	Z+1, r25	; 0x01
    19b4:	80 83       	st	Z, r24
    19b6:	de 01       	movw	r26, r28
    19b8:	ad 59       	subi	r26, 0x9D	; 157
    19ba:	bf 4f       	sbci	r27, 0xFF	; 255
    19bc:	fe 01       	movw	r30, r28
    19be:	e9 59       	subi	r30, 0x99	; 153
    19c0:	ff 4f       	sbci	r31, 0xFF	; 255
    19c2:	80 81       	ld	r24, Z
    19c4:	91 81       	ldd	r25, Z+1	; 0x01
    19c6:	8d 93       	st	X+, r24
    19c8:	9c 93       	st	X, r25
    19ca:	fe 01       	movw	r30, r28
    19cc:	ed 59       	subi	r30, 0x9D	; 157
    19ce:	ff 4f       	sbci	r31, 0xFF	; 255
    19d0:	80 81       	ld	r24, Z
    19d2:	91 81       	ldd	r25, Z+1	; 0x01
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	f1 f7       	brne	.-4      	; 0x19d4 <shift_UP_DOWN+0x17a>
    19d8:	fe 01       	movw	r30, r28
    19da:	ed 59       	subi	r30, 0x9D	; 157
    19dc:	ff 4f       	sbci	r31, 0xFF	; 255
    19de:	91 83       	std	Z+1, r25	; 0x01
    19e0:	80 83       	st	Z, r24
	_delay_ms(250);
	LED_OFF(DIO_PORTA,DIO_PIN0);
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	60 e0       	ldi	r22, 0x00	; 0
    19e6:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>

	LED_ON(DIO_PORTA,DIO_PIN1);
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	61 e0       	ldi	r22, 0x01	; 1
    19ee:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    19f2:	fe 01       	movw	r30, r28
    19f4:	e1 5a       	subi	r30, 0xA1	; 161
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	aa e7       	ldi	r26, 0x7A	; 122
    19fe:	b3 e4       	ldi	r27, 0x43	; 67
    1a00:	80 83       	st	Z, r24
    1a02:	91 83       	std	Z+1, r25	; 0x01
    1a04:	a2 83       	std	Z+2, r26	; 0x02
    1a06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a08:	8e 01       	movw	r16, r28
    1a0a:	05 5a       	subi	r16, 0xA5	; 165
    1a0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0e:	fe 01       	movw	r30, r28
    1a10:	e1 5a       	subi	r30, 0xA1	; 161
    1a12:	ff 4f       	sbci	r31, 0xFF	; 255
    1a14:	60 81       	ld	r22, Z
    1a16:	71 81       	ldd	r23, Z+1	; 0x01
    1a18:	82 81       	ldd	r24, Z+2	; 0x02
    1a1a:	93 81       	ldd	r25, Z+3	; 0x03
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	4a ef       	ldi	r20, 0xFA	; 250
    1a22:	54 e4       	ldi	r21, 0x44	; 68
    1a24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	80 83       	st	Z, r24
    1a30:	91 83       	std	Z+1, r25	; 0x01
    1a32:	a2 83       	std	Z+2, r26	; 0x02
    1a34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a36:	fe 01       	movw	r30, r28
    1a38:	e5 5a       	subi	r30, 0xA5	; 165
    1a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3c:	60 81       	ld	r22, Z
    1a3e:	71 81       	ldd	r23, Z+1	; 0x01
    1a40:	82 81       	ldd	r24, Z+2	; 0x02
    1a42:	93 81       	ldd	r25, Z+3	; 0x03
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	40 e8       	ldi	r20, 0x80	; 128
    1a4a:	5f e3       	ldi	r21, 0x3F	; 63
    1a4c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a50:	88 23       	and	r24, r24
    1a52:	44 f4       	brge	.+16     	; 0x1a64 <shift_UP_DOWN+0x20a>
		__ticks = 1;
    1a54:	fe 01       	movw	r30, r28
    1a56:	e7 5a       	subi	r30, 0xA7	; 167
    1a58:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	91 83       	std	Z+1, r25	; 0x01
    1a60:	80 83       	st	Z, r24
    1a62:	64 c0       	rjmp	.+200    	; 0x1b2c <shift_UP_DOWN+0x2d2>
	else if (__tmp > 65535)
    1a64:	fe 01       	movw	r30, r28
    1a66:	e5 5a       	subi	r30, 0xA5	; 165
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	60 81       	ld	r22, Z
    1a6c:	71 81       	ldd	r23, Z+1	; 0x01
    1a6e:	82 81       	ldd	r24, Z+2	; 0x02
    1a70:	93 81       	ldd	r25, Z+3	; 0x03
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	3f ef       	ldi	r19, 0xFF	; 255
    1a76:	4f e7       	ldi	r20, 0x7F	; 127
    1a78:	57 e4       	ldi	r21, 0x47	; 71
    1a7a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a7e:	18 16       	cp	r1, r24
    1a80:	0c f0       	brlt	.+2      	; 0x1a84 <shift_UP_DOWN+0x22a>
    1a82:	43 c0       	rjmp	.+134    	; 0x1b0a <shift_UP_DOWN+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a84:	fe 01       	movw	r30, r28
    1a86:	e1 5a       	subi	r30, 0xA1	; 161
    1a88:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8a:	60 81       	ld	r22, Z
    1a8c:	71 81       	ldd	r23, Z+1	; 0x01
    1a8e:	82 81       	ldd	r24, Z+2	; 0x02
    1a90:	93 81       	ldd	r25, Z+3	; 0x03
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	40 e2       	ldi	r20, 0x20	; 32
    1a98:	51 e4       	ldi	r21, 0x41	; 65
    1a9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	8e 01       	movw	r16, r28
    1aa4:	07 5a       	subi	r16, 0xA7	; 167
    1aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa8:	bc 01       	movw	r22, r24
    1aaa:	cd 01       	movw	r24, r26
    1aac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	f8 01       	movw	r30, r16
    1ab6:	91 83       	std	Z+1, r25	; 0x01
    1ab8:	80 83       	st	Z, r24
    1aba:	1f c0       	rjmp	.+62     	; 0x1afa <shift_UP_DOWN+0x2a0>
    1abc:	fe 01       	movw	r30, r28
    1abe:	e9 5a       	subi	r30, 0xA9	; 169
    1ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac2:	88 ec       	ldi	r24, 0xC8	; 200
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	91 83       	std	Z+1, r25	; 0x01
    1ac8:	80 83       	st	Z, r24
    1aca:	fe 01       	movw	r30, r28
    1acc:	e9 5a       	subi	r30, 0xA9	; 169
    1ace:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad0:	80 81       	ld	r24, Z
    1ad2:	91 81       	ldd	r25, Z+1	; 0x01
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	f1 f7       	brne	.-4      	; 0x1ad4 <shift_UP_DOWN+0x27a>
    1ad8:	fe 01       	movw	r30, r28
    1ada:	e9 5a       	subi	r30, 0xA9	; 169
    1adc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ade:	91 83       	std	Z+1, r25	; 0x01
    1ae0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae2:	de 01       	movw	r26, r28
    1ae4:	a7 5a       	subi	r26, 0xA7	; 167
    1ae6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ae8:	fe 01       	movw	r30, r28
    1aea:	e7 5a       	subi	r30, 0xA7	; 167
    1aec:	ff 4f       	sbci	r31, 0xFF	; 255
    1aee:	80 81       	ld	r24, Z
    1af0:	91 81       	ldd	r25, Z+1	; 0x01
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	11 96       	adiw	r26, 0x01	; 1
    1af6:	9c 93       	st	X, r25
    1af8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1afa:	fe 01       	movw	r30, r28
    1afc:	e7 5a       	subi	r30, 0xA7	; 167
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	80 81       	ld	r24, Z
    1b02:	91 81       	ldd	r25, Z+1	; 0x01
    1b04:	00 97       	sbiw	r24, 0x00	; 0
    1b06:	d1 f6       	brne	.-76     	; 0x1abc <shift_UP_DOWN+0x262>
    1b08:	27 c0       	rjmp	.+78     	; 0x1b58 <shift_UP_DOWN+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0a:	8e 01       	movw	r16, r28
    1b0c:	07 5a       	subi	r16, 0xA7	; 167
    1b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b10:	fe 01       	movw	r30, r28
    1b12:	e5 5a       	subi	r30, 0xA5	; 165
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	60 81       	ld	r22, Z
    1b18:	71 81       	ldd	r23, Z+1	; 0x01
    1b1a:	82 81       	ldd	r24, Z+2	; 0x02
    1b1c:	93 81       	ldd	r25, Z+3	; 0x03
    1b1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	f8 01       	movw	r30, r16
    1b28:	91 83       	std	Z+1, r25	; 0x01
    1b2a:	80 83       	st	Z, r24
    1b2c:	de 01       	movw	r26, r28
    1b2e:	ab 5a       	subi	r26, 0xAB	; 171
    1b30:	bf 4f       	sbci	r27, 0xFF	; 255
    1b32:	fe 01       	movw	r30, r28
    1b34:	e7 5a       	subi	r30, 0xA7	; 167
    1b36:	ff 4f       	sbci	r31, 0xFF	; 255
    1b38:	80 81       	ld	r24, Z
    1b3a:	91 81       	ldd	r25, Z+1	; 0x01
    1b3c:	8d 93       	st	X+, r24
    1b3e:	9c 93       	st	X, r25
    1b40:	fe 01       	movw	r30, r28
    1b42:	eb 5a       	subi	r30, 0xAB	; 171
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	80 81       	ld	r24, Z
    1b48:	91 81       	ldd	r25, Z+1	; 0x01
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	f1 f7       	brne	.-4      	; 0x1b4a <shift_UP_DOWN+0x2f0>
    1b4e:	fe 01       	movw	r30, r28
    1b50:	eb 5a       	subi	r30, 0xAB	; 171
    1b52:	ff 4f       	sbci	r31, 0xFF	; 255
    1b54:	91 83       	std	Z+1, r25	; 0x01
    1b56:	80 83       	st	Z, r24
	_delay_ms(250);
	LED_OFF(DIO_PORTA,DIO_PIN1);
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	61 e0       	ldi	r22, 0x01	; 1
    1b5c:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>

	LED_ON(DIO_PORTA,DIO_PIN2);
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	62 e0       	ldi	r22, 0x02	; 2
    1b64:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    1b68:	fe 01       	movw	r30, r28
    1b6a:	ef 5a       	subi	r30, 0xAF	; 175
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	aa e7       	ldi	r26, 0x7A	; 122
    1b74:	b3 e4       	ldi	r27, 0x43	; 67
    1b76:	80 83       	st	Z, r24
    1b78:	91 83       	std	Z+1, r25	; 0x01
    1b7a:	a2 83       	std	Z+2, r26	; 0x02
    1b7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b7e:	8e 01       	movw	r16, r28
    1b80:	03 5b       	subi	r16, 0xB3	; 179
    1b82:	1f 4f       	sbci	r17, 0xFF	; 255
    1b84:	fe 01       	movw	r30, r28
    1b86:	ef 5a       	subi	r30, 0xAF	; 175
    1b88:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8a:	60 81       	ld	r22, Z
    1b8c:	71 81       	ldd	r23, Z+1	; 0x01
    1b8e:	82 81       	ldd	r24, Z+2	; 0x02
    1b90:	93 81       	ldd	r25, Z+3	; 0x03
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	4a ef       	ldi	r20, 0xFA	; 250
    1b98:	54 e4       	ldi	r21, 0x44	; 68
    1b9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	f8 01       	movw	r30, r16
    1ba4:	80 83       	st	Z, r24
    1ba6:	91 83       	std	Z+1, r25	; 0x01
    1ba8:	a2 83       	std	Z+2, r26	; 0x02
    1baa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bac:	fe 01       	movw	r30, r28
    1bae:	e3 5b       	subi	r30, 0xB3	; 179
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	60 81       	ld	r22, Z
    1bb4:	71 81       	ldd	r23, Z+1	; 0x01
    1bb6:	82 81       	ldd	r24, Z+2	; 0x02
    1bb8:	93 81       	ldd	r25, Z+3	; 0x03
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	40 e8       	ldi	r20, 0x80	; 128
    1bc0:	5f e3       	ldi	r21, 0x3F	; 63
    1bc2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bc6:	88 23       	and	r24, r24
    1bc8:	44 f4       	brge	.+16     	; 0x1bda <shift_UP_DOWN+0x380>
		__ticks = 1;
    1bca:	fe 01       	movw	r30, r28
    1bcc:	e5 5b       	subi	r30, 0xB5	; 181
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	91 83       	std	Z+1, r25	; 0x01
    1bd6:	80 83       	st	Z, r24
    1bd8:	64 c0       	rjmp	.+200    	; 0x1ca2 <shift_UP_DOWN+0x448>
	else if (__tmp > 65535)
    1bda:	fe 01       	movw	r30, r28
    1bdc:	e3 5b       	subi	r30, 0xB3	; 179
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	60 81       	ld	r22, Z
    1be2:	71 81       	ldd	r23, Z+1	; 0x01
    1be4:	82 81       	ldd	r24, Z+2	; 0x02
    1be6:	93 81       	ldd	r25, Z+3	; 0x03
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	3f ef       	ldi	r19, 0xFF	; 255
    1bec:	4f e7       	ldi	r20, 0x7F	; 127
    1bee:	57 e4       	ldi	r21, 0x47	; 71
    1bf0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bf4:	18 16       	cp	r1, r24
    1bf6:	0c f0       	brlt	.+2      	; 0x1bfa <shift_UP_DOWN+0x3a0>
    1bf8:	43 c0       	rjmp	.+134    	; 0x1c80 <shift_UP_DOWN+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bfa:	fe 01       	movw	r30, r28
    1bfc:	ef 5a       	subi	r30, 0xAF	; 175
    1bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1c00:	60 81       	ld	r22, Z
    1c02:	71 81       	ldd	r23, Z+1	; 0x01
    1c04:	82 81       	ldd	r24, Z+2	; 0x02
    1c06:	93 81       	ldd	r25, Z+3	; 0x03
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	40 e2       	ldi	r20, 0x20	; 32
    1c0e:	51 e4       	ldi	r21, 0x41	; 65
    1c10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	8e 01       	movw	r16, r28
    1c1a:	05 5b       	subi	r16, 0xB5	; 181
    1c1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1e:	bc 01       	movw	r22, r24
    1c20:	cd 01       	movw	r24, r26
    1c22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	f8 01       	movw	r30, r16
    1c2c:	91 83       	std	Z+1, r25	; 0x01
    1c2e:	80 83       	st	Z, r24
    1c30:	1f c0       	rjmp	.+62     	; 0x1c70 <shift_UP_DOWN+0x416>
    1c32:	fe 01       	movw	r30, r28
    1c34:	e7 5b       	subi	r30, 0xB7	; 183
    1c36:	ff 4f       	sbci	r31, 0xFF	; 255
    1c38:	88 ec       	ldi	r24, 0xC8	; 200
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	91 83       	std	Z+1, r25	; 0x01
    1c3e:	80 83       	st	Z, r24
    1c40:	fe 01       	movw	r30, r28
    1c42:	e7 5b       	subi	r30, 0xB7	; 183
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	80 81       	ld	r24, Z
    1c48:	91 81       	ldd	r25, Z+1	; 0x01
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	f1 f7       	brne	.-4      	; 0x1c4a <shift_UP_DOWN+0x3f0>
    1c4e:	fe 01       	movw	r30, r28
    1c50:	e7 5b       	subi	r30, 0xB7	; 183
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	91 83       	std	Z+1, r25	; 0x01
    1c56:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c58:	de 01       	movw	r26, r28
    1c5a:	a5 5b       	subi	r26, 0xB5	; 181
    1c5c:	bf 4f       	sbci	r27, 0xFF	; 255
    1c5e:	fe 01       	movw	r30, r28
    1c60:	e5 5b       	subi	r30, 0xB5	; 181
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	80 81       	ld	r24, Z
    1c66:	91 81       	ldd	r25, Z+1	; 0x01
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	11 96       	adiw	r26, 0x01	; 1
    1c6c:	9c 93       	st	X, r25
    1c6e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c70:	fe 01       	movw	r30, r28
    1c72:	e5 5b       	subi	r30, 0xB5	; 181
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	80 81       	ld	r24, Z
    1c78:	91 81       	ldd	r25, Z+1	; 0x01
    1c7a:	00 97       	sbiw	r24, 0x00	; 0
    1c7c:	d1 f6       	brne	.-76     	; 0x1c32 <shift_UP_DOWN+0x3d8>
    1c7e:	27 c0       	rjmp	.+78     	; 0x1cce <shift_UP_DOWN+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c80:	8e 01       	movw	r16, r28
    1c82:	05 5b       	subi	r16, 0xB5	; 181
    1c84:	1f 4f       	sbci	r17, 0xFF	; 255
    1c86:	fe 01       	movw	r30, r28
    1c88:	e3 5b       	subi	r30, 0xB3	; 179
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	60 81       	ld	r22, Z
    1c8e:	71 81       	ldd	r23, Z+1	; 0x01
    1c90:	82 81       	ldd	r24, Z+2	; 0x02
    1c92:	93 81       	ldd	r25, Z+3	; 0x03
    1c94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	f8 01       	movw	r30, r16
    1c9e:	91 83       	std	Z+1, r25	; 0x01
    1ca0:	80 83       	st	Z, r24
    1ca2:	de 01       	movw	r26, r28
    1ca4:	a9 5b       	subi	r26, 0xB9	; 185
    1ca6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ca8:	fe 01       	movw	r30, r28
    1caa:	e5 5b       	subi	r30, 0xB5	; 181
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	80 81       	ld	r24, Z
    1cb0:	91 81       	ldd	r25, Z+1	; 0x01
    1cb2:	8d 93       	st	X+, r24
    1cb4:	9c 93       	st	X, r25
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	e9 5b       	subi	r30, 0xB9	; 185
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	80 81       	ld	r24, Z
    1cbe:	91 81       	ldd	r25, Z+1	; 0x01
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	f1 f7       	brne	.-4      	; 0x1cc0 <shift_UP_DOWN+0x466>
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	e9 5b       	subi	r30, 0xB9	; 185
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	91 83       	std	Z+1, r25	; 0x01
    1ccc:	80 83       	st	Z, r24
	_delay_ms(250);
	LED_OFF(DIO_PORTA,DIO_PIN2);
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	62 e0       	ldi	r22, 0x02	; 2
    1cd2:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>

	LED_ON(DIO_PORTA,DIO_PIN3);
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	63 e0       	ldi	r22, 0x03	; 3
    1cda:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    1cde:	fe 01       	movw	r30, r28
    1ce0:	ed 5b       	subi	r30, 0xBD	; 189
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	aa e7       	ldi	r26, 0x7A	; 122
    1cea:	b3 e4       	ldi	r27, 0x43	; 67
    1cec:	80 83       	st	Z, r24
    1cee:	91 83       	std	Z+1, r25	; 0x01
    1cf0:	a2 83       	std	Z+2, r26	; 0x02
    1cf2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf4:	8e 01       	movw	r16, r28
    1cf6:	01 5c       	subi	r16, 0xC1	; 193
    1cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	ed 5b       	subi	r30, 0xBD	; 189
    1cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1d00:	60 81       	ld	r22, Z
    1d02:	71 81       	ldd	r23, Z+1	; 0x01
    1d04:	82 81       	ldd	r24, Z+2	; 0x02
    1d06:	93 81       	ldd	r25, Z+3	; 0x03
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	4a ef       	ldi	r20, 0xFA	; 250
    1d0e:	54 e4       	ldi	r21, 0x44	; 68
    1d10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	f8 01       	movw	r30, r16
    1d1a:	80 83       	st	Z, r24
    1d1c:	91 83       	std	Z+1, r25	; 0x01
    1d1e:	a2 83       	std	Z+2, r26	; 0x02
    1d20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d22:	fe 01       	movw	r30, r28
    1d24:	ff 96       	adiw	r30, 0x3f	; 63
    1d26:	60 81       	ld	r22, Z
    1d28:	71 81       	ldd	r23, Z+1	; 0x01
    1d2a:	82 81       	ldd	r24, Z+2	; 0x02
    1d2c:	93 81       	ldd	r25, Z+3	; 0x03
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	40 e8       	ldi	r20, 0x80	; 128
    1d34:	5f e3       	ldi	r21, 0x3F	; 63
    1d36:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d3a:	88 23       	and	r24, r24
    1d3c:	2c f4       	brge	.+10     	; 0x1d48 <shift_UP_DOWN+0x4ee>
		__ticks = 1;
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	9e af       	std	Y+62, r25	; 0x3e
    1d44:	8d af       	std	Y+61, r24	; 0x3d
    1d46:	46 c0       	rjmp	.+140    	; 0x1dd4 <shift_UP_DOWN+0x57a>
	else if (__tmp > 65535)
    1d48:	fe 01       	movw	r30, r28
    1d4a:	ff 96       	adiw	r30, 0x3f	; 63
    1d4c:	60 81       	ld	r22, Z
    1d4e:	71 81       	ldd	r23, Z+1	; 0x01
    1d50:	82 81       	ldd	r24, Z+2	; 0x02
    1d52:	93 81       	ldd	r25, Z+3	; 0x03
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	3f ef       	ldi	r19, 0xFF	; 255
    1d58:	4f e7       	ldi	r20, 0x7F	; 127
    1d5a:	57 e4       	ldi	r21, 0x47	; 71
    1d5c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d60:	18 16       	cp	r1, r24
    1d62:	64 f5       	brge	.+88     	; 0x1dbc <shift_UP_DOWN+0x562>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d64:	fe 01       	movw	r30, r28
    1d66:	ed 5b       	subi	r30, 0xBD	; 189
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	60 81       	ld	r22, Z
    1d6c:	71 81       	ldd	r23, Z+1	; 0x01
    1d6e:	82 81       	ldd	r24, Z+2	; 0x02
    1d70:	93 81       	ldd	r25, Z+3	; 0x03
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e2       	ldi	r20, 0x20	; 32
    1d78:	51 e4       	ldi	r21, 0x41	; 65
    1d7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	bc 01       	movw	r22, r24
    1d84:	cd 01       	movw	r24, r26
    1d86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	9e af       	std	Y+62, r25	; 0x3e
    1d90:	8d af       	std	Y+61, r24	; 0x3d
    1d92:	0f c0       	rjmp	.+30     	; 0x1db2 <shift_UP_DOWN+0x558>
    1d94:	88 ec       	ldi	r24, 0xC8	; 200
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	9c af       	std	Y+60, r25	; 0x3c
    1d9a:	8b af       	std	Y+59, r24	; 0x3b
    1d9c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d9e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1da0:	01 97       	sbiw	r24, 0x01	; 1
    1da2:	f1 f7       	brne	.-4      	; 0x1da0 <shift_UP_DOWN+0x546>
    1da4:	9c af       	std	Y+60, r25	; 0x3c
    1da6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1daa:	9e ad       	ldd	r25, Y+62	; 0x3e
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	9e af       	std	Y+62, r25	; 0x3e
    1db0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1db4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1db6:	00 97       	sbiw	r24, 0x00	; 0
    1db8:	69 f7       	brne	.-38     	; 0x1d94 <shift_UP_DOWN+0x53a>
    1dba:	16 c0       	rjmp	.+44     	; 0x1de8 <shift_UP_DOWN+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	ff 96       	adiw	r30, 0x3f	; 63
    1dc0:	60 81       	ld	r22, Z
    1dc2:	71 81       	ldd	r23, Z+1	; 0x01
    1dc4:	82 81       	ldd	r24, Z+2	; 0x02
    1dc6:	93 81       	ldd	r25, Z+3	; 0x03
    1dc8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	9e af       	std	Y+62, r25	; 0x3e
    1dd2:	8d af       	std	Y+61, r24	; 0x3d
    1dd4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1dd6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1dd8:	9a af       	std	Y+58, r25	; 0x3a
    1dda:	89 af       	std	Y+57, r24	; 0x39
    1ddc:	89 ad       	ldd	r24, Y+57	; 0x39
    1dde:	9a ad       	ldd	r25, Y+58	; 0x3a
    1de0:	01 97       	sbiw	r24, 0x01	; 1
    1de2:	f1 f7       	brne	.-4      	; 0x1de0 <shift_UP_DOWN+0x586>
    1de4:	9a af       	std	Y+58, r25	; 0x3a
    1de6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(250);
	LED_OFF(DIO_PORTA,DIO_PIN3);
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	63 e0       	ldi	r22, 0x03	; 3
    1dec:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>

	LED_ON(DIO_PORTA,DIO_PIN4);
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	64 e0       	ldi	r22, 0x04	; 4
    1df4:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	aa e7       	ldi	r26, 0x7A	; 122
    1dfe:	b3 e4       	ldi	r27, 0x43	; 67
    1e00:	8d ab       	std	Y+53, r24	; 0x35
    1e02:	9e ab       	std	Y+54, r25	; 0x36
    1e04:	af ab       	std	Y+55, r26	; 0x37
    1e06:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e08:	6d a9       	ldd	r22, Y+53	; 0x35
    1e0a:	7e a9       	ldd	r23, Y+54	; 0x36
    1e0c:	8f a9       	ldd	r24, Y+55	; 0x37
    1e0e:	98 ad       	ldd	r25, Y+56	; 0x38
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	4a ef       	ldi	r20, 0xFA	; 250
    1e16:	54 e4       	ldi	r21, 0x44	; 68
    1e18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	89 ab       	std	Y+49, r24	; 0x31
    1e22:	9a ab       	std	Y+50, r25	; 0x32
    1e24:	ab ab       	std	Y+51, r26	; 0x33
    1e26:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e28:	69 a9       	ldd	r22, Y+49	; 0x31
    1e2a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e2c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e2e:	9c a9       	ldd	r25, Y+52	; 0x34
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e8       	ldi	r20, 0x80	; 128
    1e36:	5f e3       	ldi	r21, 0x3F	; 63
    1e38:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e3c:	88 23       	and	r24, r24
    1e3e:	2c f4       	brge	.+10     	; 0x1e4a <shift_UP_DOWN+0x5f0>
		__ticks = 1;
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	98 ab       	std	Y+48, r25	; 0x30
    1e46:	8f a7       	std	Y+47, r24	; 0x2f
    1e48:	3f c0       	rjmp	.+126    	; 0x1ec8 <shift_UP_DOWN+0x66e>
	else if (__tmp > 65535)
    1e4a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e4c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e4e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e50:	9c a9       	ldd	r25, Y+52	; 0x34
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	3f ef       	ldi	r19, 0xFF	; 255
    1e56:	4f e7       	ldi	r20, 0x7F	; 127
    1e58:	57 e4       	ldi	r21, 0x47	; 71
    1e5a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e5e:	18 16       	cp	r1, r24
    1e60:	4c f5       	brge	.+82     	; 0x1eb4 <shift_UP_DOWN+0x65a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e62:	6d a9       	ldd	r22, Y+53	; 0x35
    1e64:	7e a9       	ldd	r23, Y+54	; 0x36
    1e66:	8f a9       	ldd	r24, Y+55	; 0x37
    1e68:	98 ad       	ldd	r25, Y+56	; 0x38
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	40 e2       	ldi	r20, 0x20	; 32
    1e70:	51 e4       	ldi	r21, 0x41	; 65
    1e72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	bc 01       	movw	r22, r24
    1e7c:	cd 01       	movw	r24, r26
    1e7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	98 ab       	std	Y+48, r25	; 0x30
    1e88:	8f a7       	std	Y+47, r24	; 0x2f
    1e8a:	0f c0       	rjmp	.+30     	; 0x1eaa <shift_UP_DOWN+0x650>
    1e8c:	88 ec       	ldi	r24, 0xC8	; 200
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	9e a7       	std	Y+46, r25	; 0x2e
    1e92:	8d a7       	std	Y+45, r24	; 0x2d
    1e94:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e96:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	f1 f7       	brne	.-4      	; 0x1e98 <shift_UP_DOWN+0x63e>
    1e9c:	9e a7       	std	Y+46, r25	; 0x2e
    1e9e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ea2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	98 ab       	std	Y+48, r25	; 0x30
    1ea8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eaa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eac:	98 a9       	ldd	r25, Y+48	; 0x30
    1eae:	00 97       	sbiw	r24, 0x00	; 0
    1eb0:	69 f7       	brne	.-38     	; 0x1e8c <shift_UP_DOWN+0x632>
    1eb2:	14 c0       	rjmp	.+40     	; 0x1edc <shift_UP_DOWN+0x682>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb4:	69 a9       	ldd	r22, Y+49	; 0x31
    1eb6:	7a a9       	ldd	r23, Y+50	; 0x32
    1eb8:	8b a9       	ldd	r24, Y+51	; 0x33
    1eba:	9c a9       	ldd	r25, Y+52	; 0x34
    1ebc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	98 ab       	std	Y+48, r25	; 0x30
    1ec6:	8f a7       	std	Y+47, r24	; 0x2f
    1ec8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eca:	98 a9       	ldd	r25, Y+48	; 0x30
    1ecc:	9c a7       	std	Y+44, r25	; 0x2c
    1ece:	8b a7       	std	Y+43, r24	; 0x2b
    1ed0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ed2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	f1 f7       	brne	.-4      	; 0x1ed4 <shift_UP_DOWN+0x67a>
    1ed8:	9c a7       	std	Y+44, r25	; 0x2c
    1eda:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(250);
	LED_OFF(DIO_PORTA,DIO_PIN4);
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	64 e0       	ldi	r22, 0x04	; 4
    1ee0:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>

	LED_ON(DIO_PORTA,DIO_PIN5);
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	65 e0       	ldi	r22, 0x05	; 5
    1ee8:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	aa e7       	ldi	r26, 0x7A	; 122
    1ef2:	b3 e4       	ldi	r27, 0x43	; 67
    1ef4:	8f a3       	std	Y+39, r24	; 0x27
    1ef6:	98 a7       	std	Y+40, r25	; 0x28
    1ef8:	a9 a7       	std	Y+41, r26	; 0x29
    1efa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efc:	6f a1       	ldd	r22, Y+39	; 0x27
    1efe:	78 a5       	ldd	r23, Y+40	; 0x28
    1f00:	89 a5       	ldd	r24, Y+41	; 0x29
    1f02:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	4a ef       	ldi	r20, 0xFA	; 250
    1f0a:	54 e4       	ldi	r21, 0x44	; 68
    1f0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	8b a3       	std	Y+35, r24	; 0x23
    1f16:	9c a3       	std	Y+36, r25	; 0x24
    1f18:	ad a3       	std	Y+37, r26	; 0x25
    1f1a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f1c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f1e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f20:	8d a1       	ldd	r24, Y+37	; 0x25
    1f22:	9e a1       	ldd	r25, Y+38	; 0x26
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	40 e8       	ldi	r20, 0x80	; 128
    1f2a:	5f e3       	ldi	r21, 0x3F	; 63
    1f2c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f30:	88 23       	and	r24, r24
    1f32:	2c f4       	brge	.+10     	; 0x1f3e <shift_UP_DOWN+0x6e4>
		__ticks = 1;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	9a a3       	std	Y+34, r25	; 0x22
    1f3a:	89 a3       	std	Y+33, r24	; 0x21
    1f3c:	3f c0       	rjmp	.+126    	; 0x1fbc <shift_UP_DOWN+0x762>
	else if (__tmp > 65535)
    1f3e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f40:	7c a1       	ldd	r23, Y+36	; 0x24
    1f42:	8d a1       	ldd	r24, Y+37	; 0x25
    1f44:	9e a1       	ldd	r25, Y+38	; 0x26
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	3f ef       	ldi	r19, 0xFF	; 255
    1f4a:	4f e7       	ldi	r20, 0x7F	; 127
    1f4c:	57 e4       	ldi	r21, 0x47	; 71
    1f4e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f52:	18 16       	cp	r1, r24
    1f54:	4c f5       	brge	.+82     	; 0x1fa8 <shift_UP_DOWN+0x74e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f56:	6f a1       	ldd	r22, Y+39	; 0x27
    1f58:	78 a5       	ldd	r23, Y+40	; 0x28
    1f5a:	89 a5       	ldd	r24, Y+41	; 0x29
    1f5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e2       	ldi	r20, 0x20	; 32
    1f64:	51 e4       	ldi	r21, 0x41	; 65
    1f66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	bc 01       	movw	r22, r24
    1f70:	cd 01       	movw	r24, r26
    1f72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	9a a3       	std	Y+34, r25	; 0x22
    1f7c:	89 a3       	std	Y+33, r24	; 0x21
    1f7e:	0f c0       	rjmp	.+30     	; 0x1f9e <shift_UP_DOWN+0x744>
    1f80:	88 ec       	ldi	r24, 0xC8	; 200
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	98 a3       	std	Y+32, r25	; 0x20
    1f86:	8f 8f       	std	Y+31, r24	; 0x1f
    1f88:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f8a:	98 a1       	ldd	r25, Y+32	; 0x20
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	f1 f7       	brne	.-4      	; 0x1f8c <shift_UP_DOWN+0x732>
    1f90:	98 a3       	std	Y+32, r25	; 0x20
    1f92:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f94:	89 a1       	ldd	r24, Y+33	; 0x21
    1f96:	9a a1       	ldd	r25, Y+34	; 0x22
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	9a a3       	std	Y+34, r25	; 0x22
    1f9c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9e:	89 a1       	ldd	r24, Y+33	; 0x21
    1fa0:	9a a1       	ldd	r25, Y+34	; 0x22
    1fa2:	00 97       	sbiw	r24, 0x00	; 0
    1fa4:	69 f7       	brne	.-38     	; 0x1f80 <shift_UP_DOWN+0x726>
    1fa6:	14 c0       	rjmp	.+40     	; 0x1fd0 <shift_UP_DOWN+0x776>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa8:	6b a1       	ldd	r22, Y+35	; 0x23
    1faa:	7c a1       	ldd	r23, Y+36	; 0x24
    1fac:	8d a1       	ldd	r24, Y+37	; 0x25
    1fae:	9e a1       	ldd	r25, Y+38	; 0x26
    1fb0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	9a a3       	std	Y+34, r25	; 0x22
    1fba:	89 a3       	std	Y+33, r24	; 0x21
    1fbc:	89 a1       	ldd	r24, Y+33	; 0x21
    1fbe:	9a a1       	ldd	r25, Y+34	; 0x22
    1fc0:	9e 8f       	std	Y+30, r25	; 0x1e
    1fc2:	8d 8f       	std	Y+29, r24	; 0x1d
    1fc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fc6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	f1 f7       	brne	.-4      	; 0x1fc8 <shift_UP_DOWN+0x76e>
    1fcc:	9e 8f       	std	Y+30, r25	; 0x1e
    1fce:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(250);
	LED_OFF(DIO_PORTA,DIO_PIN5);
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	65 e0       	ldi	r22, 0x05	; 5
    1fd4:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>

	LED_ON(DIO_PORTA,DIO_PIN6);
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	66 e0       	ldi	r22, 0x06	; 6
    1fdc:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	aa e7       	ldi	r26, 0x7A	; 122
    1fe6:	b3 e4       	ldi	r27, 0x43	; 67
    1fe8:	89 8f       	std	Y+25, r24	; 0x19
    1fea:	9a 8f       	std	Y+26, r25	; 0x1a
    1fec:	ab 8f       	std	Y+27, r26	; 0x1b
    1fee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ff2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ff4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ff6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	4a ef       	ldi	r20, 0xFA	; 250
    1ffe:	54 e4       	ldi	r21, 0x44	; 68
    2000:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	8d 8b       	std	Y+21, r24	; 0x15
    200a:	9e 8b       	std	Y+22, r25	; 0x16
    200c:	af 8b       	std	Y+23, r26	; 0x17
    200e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2010:	6d 89       	ldd	r22, Y+21	; 0x15
    2012:	7e 89       	ldd	r23, Y+22	; 0x16
    2014:	8f 89       	ldd	r24, Y+23	; 0x17
    2016:	98 8d       	ldd	r25, Y+24	; 0x18
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	40 e8       	ldi	r20, 0x80	; 128
    201e:	5f e3       	ldi	r21, 0x3F	; 63
    2020:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2024:	88 23       	and	r24, r24
    2026:	2c f4       	brge	.+10     	; 0x2032 <shift_UP_DOWN+0x7d8>
		__ticks = 1;
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	9c 8b       	std	Y+20, r25	; 0x14
    202e:	8b 8b       	std	Y+19, r24	; 0x13
    2030:	3f c0       	rjmp	.+126    	; 0x20b0 <shift_UP_DOWN+0x856>
	else if (__tmp > 65535)
    2032:	6d 89       	ldd	r22, Y+21	; 0x15
    2034:	7e 89       	ldd	r23, Y+22	; 0x16
    2036:	8f 89       	ldd	r24, Y+23	; 0x17
    2038:	98 8d       	ldd	r25, Y+24	; 0x18
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	3f ef       	ldi	r19, 0xFF	; 255
    203e:	4f e7       	ldi	r20, 0x7F	; 127
    2040:	57 e4       	ldi	r21, 0x47	; 71
    2042:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2046:	18 16       	cp	r1, r24
    2048:	4c f5       	brge	.+82     	; 0x209c <shift_UP_DOWN+0x842>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204a:	69 8d       	ldd	r22, Y+25	; 0x19
    204c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    204e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2050:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	40 e2       	ldi	r20, 0x20	; 32
    2058:	51 e4       	ldi	r21, 0x41	; 65
    205a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	bc 01       	movw	r22, r24
    2064:	cd 01       	movw	r24, r26
    2066:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	9c 8b       	std	Y+20, r25	; 0x14
    2070:	8b 8b       	std	Y+19, r24	; 0x13
    2072:	0f c0       	rjmp	.+30     	; 0x2092 <shift_UP_DOWN+0x838>
    2074:	88 ec       	ldi	r24, 0xC8	; 200
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	9a 8b       	std	Y+18, r25	; 0x12
    207a:	89 8b       	std	Y+17, r24	; 0x11
    207c:	89 89       	ldd	r24, Y+17	; 0x11
    207e:	9a 89       	ldd	r25, Y+18	; 0x12
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	f1 f7       	brne	.-4      	; 0x2080 <shift_UP_DOWN+0x826>
    2084:	9a 8b       	std	Y+18, r25	; 0x12
    2086:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2088:	8b 89       	ldd	r24, Y+19	; 0x13
    208a:	9c 89       	ldd	r25, Y+20	; 0x14
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	9c 8b       	std	Y+20, r25	; 0x14
    2090:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2092:	8b 89       	ldd	r24, Y+19	; 0x13
    2094:	9c 89       	ldd	r25, Y+20	; 0x14
    2096:	00 97       	sbiw	r24, 0x00	; 0
    2098:	69 f7       	brne	.-38     	; 0x2074 <shift_UP_DOWN+0x81a>
    209a:	14 c0       	rjmp	.+40     	; 0x20c4 <shift_UP_DOWN+0x86a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    209c:	6d 89       	ldd	r22, Y+21	; 0x15
    209e:	7e 89       	ldd	r23, Y+22	; 0x16
    20a0:	8f 89       	ldd	r24, Y+23	; 0x17
    20a2:	98 8d       	ldd	r25, Y+24	; 0x18
    20a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	9c 8b       	std	Y+20, r25	; 0x14
    20ae:	8b 8b       	std	Y+19, r24	; 0x13
    20b0:	8b 89       	ldd	r24, Y+19	; 0x13
    20b2:	9c 89       	ldd	r25, Y+20	; 0x14
    20b4:	98 8b       	std	Y+16, r25	; 0x10
    20b6:	8f 87       	std	Y+15, r24	; 0x0f
    20b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ba:	98 89       	ldd	r25, Y+16	; 0x10
    20bc:	01 97       	sbiw	r24, 0x01	; 1
    20be:	f1 f7       	brne	.-4      	; 0x20bc <shift_UP_DOWN+0x862>
    20c0:	98 8b       	std	Y+16, r25	; 0x10
    20c2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(250);
	LED_OFF(DIO_PORTA,DIO_PIN6);
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	66 e0       	ldi	r22, 0x06	; 6
    20c8:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>

	LED_ON(DIO_PORTA,DIO_PIN7);
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	67 e0       	ldi	r22, 0x07	; 7
    20d0:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	aa e7       	ldi	r26, 0x7A	; 122
    20da:	b3 e4       	ldi	r27, 0x43	; 67
    20dc:	8b 87       	std	Y+11, r24	; 0x0b
    20de:	9c 87       	std	Y+12, r25	; 0x0c
    20e0:	ad 87       	std	Y+13, r26	; 0x0d
    20e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    20e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    20e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	4a ef       	ldi	r20, 0xFA	; 250
    20f2:	54 e4       	ldi	r21, 0x44	; 68
    20f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	8f 83       	std	Y+7, r24	; 0x07
    20fe:	98 87       	std	Y+8, r25	; 0x08
    2100:	a9 87       	std	Y+9, r26	; 0x09
    2102:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2104:	6f 81       	ldd	r22, Y+7	; 0x07
    2106:	78 85       	ldd	r23, Y+8	; 0x08
    2108:	89 85       	ldd	r24, Y+9	; 0x09
    210a:	9a 85       	ldd	r25, Y+10	; 0x0a
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	40 e8       	ldi	r20, 0x80	; 128
    2112:	5f e3       	ldi	r21, 0x3F	; 63
    2114:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2118:	88 23       	and	r24, r24
    211a:	2c f4       	brge	.+10     	; 0x2126 <shift_UP_DOWN+0x8cc>
		__ticks = 1;
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	9e 83       	std	Y+6, r25	; 0x06
    2122:	8d 83       	std	Y+5, r24	; 0x05
    2124:	3f c0       	rjmp	.+126    	; 0x21a4 <shift_UP_DOWN+0x94a>
	else if (__tmp > 65535)
    2126:	6f 81       	ldd	r22, Y+7	; 0x07
    2128:	78 85       	ldd	r23, Y+8	; 0x08
    212a:	89 85       	ldd	r24, Y+9	; 0x09
    212c:	9a 85       	ldd	r25, Y+10	; 0x0a
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	3f ef       	ldi	r19, 0xFF	; 255
    2132:	4f e7       	ldi	r20, 0x7F	; 127
    2134:	57 e4       	ldi	r21, 0x47	; 71
    2136:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    213a:	18 16       	cp	r1, r24
    213c:	4c f5       	brge	.+82     	; 0x2190 <shift_UP_DOWN+0x936>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2140:	7c 85       	ldd	r23, Y+12	; 0x0c
    2142:	8d 85       	ldd	r24, Y+13	; 0x0d
    2144:	9e 85       	ldd	r25, Y+14	; 0x0e
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	40 e2       	ldi	r20, 0x20	; 32
    214c:	51 e4       	ldi	r21, 0x41	; 65
    214e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	bc 01       	movw	r22, r24
    2158:	cd 01       	movw	r24, r26
    215a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	9e 83       	std	Y+6, r25	; 0x06
    2164:	8d 83       	std	Y+5, r24	; 0x05
    2166:	0f c0       	rjmp	.+30     	; 0x2186 <shift_UP_DOWN+0x92c>
    2168:	88 ec       	ldi	r24, 0xC8	; 200
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	9c 83       	std	Y+4, r25	; 0x04
    216e:	8b 83       	std	Y+3, r24	; 0x03
    2170:	8b 81       	ldd	r24, Y+3	; 0x03
    2172:	9c 81       	ldd	r25, Y+4	; 0x04
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	f1 f7       	brne	.-4      	; 0x2174 <shift_UP_DOWN+0x91a>
    2178:	9c 83       	std	Y+4, r25	; 0x04
    217a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217c:	8d 81       	ldd	r24, Y+5	; 0x05
    217e:	9e 81       	ldd	r25, Y+6	; 0x06
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	9e 83       	std	Y+6, r25	; 0x06
    2184:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2186:	8d 81       	ldd	r24, Y+5	; 0x05
    2188:	9e 81       	ldd	r25, Y+6	; 0x06
    218a:	00 97       	sbiw	r24, 0x00	; 0
    218c:	69 f7       	brne	.-38     	; 0x2168 <shift_UP_DOWN+0x90e>
    218e:	14 c0       	rjmp	.+40     	; 0x21b8 <shift_UP_DOWN+0x95e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2190:	6f 81       	ldd	r22, Y+7	; 0x07
    2192:	78 85       	ldd	r23, Y+8	; 0x08
    2194:	89 85       	ldd	r24, Y+9	; 0x09
    2196:	9a 85       	ldd	r25, Y+10	; 0x0a
    2198:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	9e 83       	std	Y+6, r25	; 0x06
    21a2:	8d 83       	std	Y+5, r24	; 0x05
    21a4:	8d 81       	ldd	r24, Y+5	; 0x05
    21a6:	9e 81       	ldd	r25, Y+6	; 0x06
    21a8:	9a 83       	std	Y+2, r25	; 0x02
    21aa:	89 83       	std	Y+1, r24	; 0x01
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	9a 81       	ldd	r25, Y+2	; 0x02
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	f1 f7       	brne	.-4      	; 0x21b0 <shift_UP_DOWN+0x956>
    21b4:	9a 83       	std	Y+2, r25	; 0x02
    21b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(250);
	LED_OFF(DIO_PORTA,DIO_PIN7);
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	67 e0       	ldi	r22, 0x07	; 7
    21bc:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>
}
    21c0:	c0 59       	subi	r28, 0x90	; 144
    21c2:	df 4f       	sbci	r29, 0xFF	; 255
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	f8 94       	cli
    21c8:	de bf       	out	0x3e, r29	; 62
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	cd bf       	out	0x3d, r28	; 61
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	1f 91       	pop	r17
    21d4:	0f 91       	pop	r16
    21d6:	08 95       	ret

000021d8 <shift_DOWN_UP>:


/*****************************************************************************/
void shift_DOWN_UP(void)
{
    21d8:	0f 93       	push	r16
    21da:	1f 93       	push	r17
    21dc:	df 93       	push	r29
    21de:	cf 93       	push	r28
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
    21e4:	c0 57       	subi	r28, 0x70	; 112
    21e6:	d0 40       	sbci	r29, 0x00	; 0
    21e8:	0f b6       	in	r0, 0x3f	; 63
    21ea:	f8 94       	cli
    21ec:	de bf       	out	0x3e, r29	; 62
    21ee:	0f be       	out	0x3f, r0	; 63
    21f0:	cd bf       	out	0x3d, r28	; 61
	LED_ON(DIO_PORTA,DIO_PIN7);
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	67 e0       	ldi	r22, 0x07	; 7
    21f6:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    21fa:	fe 01       	movw	r30, r28
    21fc:	e3 59       	subi	r30, 0x93	; 147
    21fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	aa e7       	ldi	r26, 0x7A	; 122
    2206:	b3 e4       	ldi	r27, 0x43	; 67
    2208:	80 83       	st	Z, r24
    220a:	91 83       	std	Z+1, r25	; 0x01
    220c:	a2 83       	std	Z+2, r26	; 0x02
    220e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2210:	8e 01       	movw	r16, r28
    2212:	07 59       	subi	r16, 0x97	; 151
    2214:	1f 4f       	sbci	r17, 0xFF	; 255
    2216:	fe 01       	movw	r30, r28
    2218:	e3 59       	subi	r30, 0x93	; 147
    221a:	ff 4f       	sbci	r31, 0xFF	; 255
    221c:	60 81       	ld	r22, Z
    221e:	71 81       	ldd	r23, Z+1	; 0x01
    2220:	82 81       	ldd	r24, Z+2	; 0x02
    2222:	93 81       	ldd	r25, Z+3	; 0x03
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	4a ef       	ldi	r20, 0xFA	; 250
    222a:	54 e4       	ldi	r21, 0x44	; 68
    222c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	f8 01       	movw	r30, r16
    2236:	80 83       	st	Z, r24
    2238:	91 83       	std	Z+1, r25	; 0x01
    223a:	a2 83       	std	Z+2, r26	; 0x02
    223c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    223e:	fe 01       	movw	r30, r28
    2240:	e7 59       	subi	r30, 0x97	; 151
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	60 81       	ld	r22, Z
    2246:	71 81       	ldd	r23, Z+1	; 0x01
    2248:	82 81       	ldd	r24, Z+2	; 0x02
    224a:	93 81       	ldd	r25, Z+3	; 0x03
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e8       	ldi	r20, 0x80	; 128
    2252:	5f e3       	ldi	r21, 0x3F	; 63
    2254:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2258:	88 23       	and	r24, r24
    225a:	44 f4       	brge	.+16     	; 0x226c <shift_DOWN_UP+0x94>
		__ticks = 1;
    225c:	fe 01       	movw	r30, r28
    225e:	e9 59       	subi	r30, 0x99	; 153
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	91 83       	std	Z+1, r25	; 0x01
    2268:	80 83       	st	Z, r24
    226a:	64 c0       	rjmp	.+200    	; 0x2334 <shift_DOWN_UP+0x15c>
	else if (__tmp > 65535)
    226c:	fe 01       	movw	r30, r28
    226e:	e7 59       	subi	r30, 0x97	; 151
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	60 81       	ld	r22, Z
    2274:	71 81       	ldd	r23, Z+1	; 0x01
    2276:	82 81       	ldd	r24, Z+2	; 0x02
    2278:	93 81       	ldd	r25, Z+3	; 0x03
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	3f ef       	ldi	r19, 0xFF	; 255
    227e:	4f e7       	ldi	r20, 0x7F	; 127
    2280:	57 e4       	ldi	r21, 0x47	; 71
    2282:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2286:	18 16       	cp	r1, r24
    2288:	0c f0       	brlt	.+2      	; 0x228c <shift_DOWN_UP+0xb4>
    228a:	43 c0       	rjmp	.+134    	; 0x2312 <shift_DOWN_UP+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228c:	fe 01       	movw	r30, r28
    228e:	e3 59       	subi	r30, 0x93	; 147
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	60 81       	ld	r22, Z
    2294:	71 81       	ldd	r23, Z+1	; 0x01
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	93 81       	ldd	r25, Z+3	; 0x03
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e2       	ldi	r20, 0x20	; 32
    22a0:	51 e4       	ldi	r21, 0x41	; 65
    22a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	8e 01       	movw	r16, r28
    22ac:	09 59       	subi	r16, 0x99	; 153
    22ae:	1f 4f       	sbci	r17, 0xFF	; 255
    22b0:	bc 01       	movw	r22, r24
    22b2:	cd 01       	movw	r24, r26
    22b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	f8 01       	movw	r30, r16
    22be:	91 83       	std	Z+1, r25	; 0x01
    22c0:	80 83       	st	Z, r24
    22c2:	1f c0       	rjmp	.+62     	; 0x2302 <shift_DOWN_UP+0x12a>
    22c4:	fe 01       	movw	r30, r28
    22c6:	eb 59       	subi	r30, 0x9B	; 155
    22c8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ca:	88 ec       	ldi	r24, 0xC8	; 200
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	91 83       	std	Z+1, r25	; 0x01
    22d0:	80 83       	st	Z, r24
    22d2:	fe 01       	movw	r30, r28
    22d4:	eb 59       	subi	r30, 0x9B	; 155
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	80 81       	ld	r24, Z
    22da:	91 81       	ldd	r25, Z+1	; 0x01
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	f1 f7       	brne	.-4      	; 0x22dc <shift_DOWN_UP+0x104>
    22e0:	fe 01       	movw	r30, r28
    22e2:	eb 59       	subi	r30, 0x9B	; 155
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	91 83       	std	Z+1, r25	; 0x01
    22e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ea:	de 01       	movw	r26, r28
    22ec:	a9 59       	subi	r26, 0x99	; 153
    22ee:	bf 4f       	sbci	r27, 0xFF	; 255
    22f0:	fe 01       	movw	r30, r28
    22f2:	e9 59       	subi	r30, 0x99	; 153
    22f4:	ff 4f       	sbci	r31, 0xFF	; 255
    22f6:	80 81       	ld	r24, Z
    22f8:	91 81       	ldd	r25, Z+1	; 0x01
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	11 96       	adiw	r26, 0x01	; 1
    22fe:	9c 93       	st	X, r25
    2300:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2302:	fe 01       	movw	r30, r28
    2304:	e9 59       	subi	r30, 0x99	; 153
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	80 81       	ld	r24, Z
    230a:	91 81       	ldd	r25, Z+1	; 0x01
    230c:	00 97       	sbiw	r24, 0x00	; 0
    230e:	d1 f6       	brne	.-76     	; 0x22c4 <shift_DOWN_UP+0xec>
    2310:	27 c0       	rjmp	.+78     	; 0x2360 <shift_DOWN_UP+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2312:	8e 01       	movw	r16, r28
    2314:	09 59       	subi	r16, 0x99	; 153
    2316:	1f 4f       	sbci	r17, 0xFF	; 255
    2318:	fe 01       	movw	r30, r28
    231a:	e7 59       	subi	r30, 0x97	; 151
    231c:	ff 4f       	sbci	r31, 0xFF	; 255
    231e:	60 81       	ld	r22, Z
    2320:	71 81       	ldd	r23, Z+1	; 0x01
    2322:	82 81       	ldd	r24, Z+2	; 0x02
    2324:	93 81       	ldd	r25, Z+3	; 0x03
    2326:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	f8 01       	movw	r30, r16
    2330:	91 83       	std	Z+1, r25	; 0x01
    2332:	80 83       	st	Z, r24
    2334:	de 01       	movw	r26, r28
    2336:	ad 59       	subi	r26, 0x9D	; 157
    2338:	bf 4f       	sbci	r27, 0xFF	; 255
    233a:	fe 01       	movw	r30, r28
    233c:	e9 59       	subi	r30, 0x99	; 153
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	80 81       	ld	r24, Z
    2342:	91 81       	ldd	r25, Z+1	; 0x01
    2344:	8d 93       	st	X+, r24
    2346:	9c 93       	st	X, r25
    2348:	fe 01       	movw	r30, r28
    234a:	ed 59       	subi	r30, 0x9D	; 157
    234c:	ff 4f       	sbci	r31, 0xFF	; 255
    234e:	80 81       	ld	r24, Z
    2350:	91 81       	ldd	r25, Z+1	; 0x01
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	f1 f7       	brne	.-4      	; 0x2352 <shift_DOWN_UP+0x17a>
    2356:	fe 01       	movw	r30, r28
    2358:	ed 59       	subi	r30, 0x9D	; 157
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	91 83       	std	Z+1, r25	; 0x01
    235e:	80 83       	st	Z, r24
	_delay_ms(250);
	LED_OFF(DIO_PORTA,DIO_PIN7);
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	67 e0       	ldi	r22, 0x07	; 7
    2364:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>

	LED_ON(DIO_PORTA,DIO_PIN6);
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	66 e0       	ldi	r22, 0x06	; 6
    236c:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    2370:	fe 01       	movw	r30, r28
    2372:	e1 5a       	subi	r30, 0xA1	; 161
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	80 e0       	ldi	r24, 0x00	; 0
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	aa e7       	ldi	r26, 0x7A	; 122
    237c:	b3 e4       	ldi	r27, 0x43	; 67
    237e:	80 83       	st	Z, r24
    2380:	91 83       	std	Z+1, r25	; 0x01
    2382:	a2 83       	std	Z+2, r26	; 0x02
    2384:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2386:	8e 01       	movw	r16, r28
    2388:	05 5a       	subi	r16, 0xA5	; 165
    238a:	1f 4f       	sbci	r17, 0xFF	; 255
    238c:	fe 01       	movw	r30, r28
    238e:	e1 5a       	subi	r30, 0xA1	; 161
    2390:	ff 4f       	sbci	r31, 0xFF	; 255
    2392:	60 81       	ld	r22, Z
    2394:	71 81       	ldd	r23, Z+1	; 0x01
    2396:	82 81       	ldd	r24, Z+2	; 0x02
    2398:	93 81       	ldd	r25, Z+3	; 0x03
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	4a ef       	ldi	r20, 0xFA	; 250
    23a0:	54 e4       	ldi	r21, 0x44	; 68
    23a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	f8 01       	movw	r30, r16
    23ac:	80 83       	st	Z, r24
    23ae:	91 83       	std	Z+1, r25	; 0x01
    23b0:	a2 83       	std	Z+2, r26	; 0x02
    23b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23b4:	fe 01       	movw	r30, r28
    23b6:	e5 5a       	subi	r30, 0xA5	; 165
    23b8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ba:	60 81       	ld	r22, Z
    23bc:	71 81       	ldd	r23, Z+1	; 0x01
    23be:	82 81       	ldd	r24, Z+2	; 0x02
    23c0:	93 81       	ldd	r25, Z+3	; 0x03
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	40 e8       	ldi	r20, 0x80	; 128
    23c8:	5f e3       	ldi	r21, 0x3F	; 63
    23ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23ce:	88 23       	and	r24, r24
    23d0:	44 f4       	brge	.+16     	; 0x23e2 <shift_DOWN_UP+0x20a>
		__ticks = 1;
    23d2:	fe 01       	movw	r30, r28
    23d4:	e7 5a       	subi	r30, 0xA7	; 167
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	91 83       	std	Z+1, r25	; 0x01
    23de:	80 83       	st	Z, r24
    23e0:	64 c0       	rjmp	.+200    	; 0x24aa <shift_DOWN_UP+0x2d2>
	else if (__tmp > 65535)
    23e2:	fe 01       	movw	r30, r28
    23e4:	e5 5a       	subi	r30, 0xA5	; 165
    23e6:	ff 4f       	sbci	r31, 0xFF	; 255
    23e8:	60 81       	ld	r22, Z
    23ea:	71 81       	ldd	r23, Z+1	; 0x01
    23ec:	82 81       	ldd	r24, Z+2	; 0x02
    23ee:	93 81       	ldd	r25, Z+3	; 0x03
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	3f ef       	ldi	r19, 0xFF	; 255
    23f4:	4f e7       	ldi	r20, 0x7F	; 127
    23f6:	57 e4       	ldi	r21, 0x47	; 71
    23f8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23fc:	18 16       	cp	r1, r24
    23fe:	0c f0       	brlt	.+2      	; 0x2402 <shift_DOWN_UP+0x22a>
    2400:	43 c0       	rjmp	.+134    	; 0x2488 <shift_DOWN_UP+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2402:	fe 01       	movw	r30, r28
    2404:	e1 5a       	subi	r30, 0xA1	; 161
    2406:	ff 4f       	sbci	r31, 0xFF	; 255
    2408:	60 81       	ld	r22, Z
    240a:	71 81       	ldd	r23, Z+1	; 0x01
    240c:	82 81       	ldd	r24, Z+2	; 0x02
    240e:	93 81       	ldd	r25, Z+3	; 0x03
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	40 e2       	ldi	r20, 0x20	; 32
    2416:	51 e4       	ldi	r21, 0x41	; 65
    2418:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	8e 01       	movw	r16, r28
    2422:	07 5a       	subi	r16, 0xA7	; 167
    2424:	1f 4f       	sbci	r17, 0xFF	; 255
    2426:	bc 01       	movw	r22, r24
    2428:	cd 01       	movw	r24, r26
    242a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	f8 01       	movw	r30, r16
    2434:	91 83       	std	Z+1, r25	; 0x01
    2436:	80 83       	st	Z, r24
    2438:	1f c0       	rjmp	.+62     	; 0x2478 <shift_DOWN_UP+0x2a0>
    243a:	fe 01       	movw	r30, r28
    243c:	e9 5a       	subi	r30, 0xA9	; 169
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	88 ec       	ldi	r24, 0xC8	; 200
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	91 83       	std	Z+1, r25	; 0x01
    2446:	80 83       	st	Z, r24
    2448:	fe 01       	movw	r30, r28
    244a:	e9 5a       	subi	r30, 0xA9	; 169
    244c:	ff 4f       	sbci	r31, 0xFF	; 255
    244e:	80 81       	ld	r24, Z
    2450:	91 81       	ldd	r25, Z+1	; 0x01
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	f1 f7       	brne	.-4      	; 0x2452 <shift_DOWN_UP+0x27a>
    2456:	fe 01       	movw	r30, r28
    2458:	e9 5a       	subi	r30, 0xA9	; 169
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	91 83       	std	Z+1, r25	; 0x01
    245e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2460:	de 01       	movw	r26, r28
    2462:	a7 5a       	subi	r26, 0xA7	; 167
    2464:	bf 4f       	sbci	r27, 0xFF	; 255
    2466:	fe 01       	movw	r30, r28
    2468:	e7 5a       	subi	r30, 0xA7	; 167
    246a:	ff 4f       	sbci	r31, 0xFF	; 255
    246c:	80 81       	ld	r24, Z
    246e:	91 81       	ldd	r25, Z+1	; 0x01
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	11 96       	adiw	r26, 0x01	; 1
    2474:	9c 93       	st	X, r25
    2476:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2478:	fe 01       	movw	r30, r28
    247a:	e7 5a       	subi	r30, 0xA7	; 167
    247c:	ff 4f       	sbci	r31, 0xFF	; 255
    247e:	80 81       	ld	r24, Z
    2480:	91 81       	ldd	r25, Z+1	; 0x01
    2482:	00 97       	sbiw	r24, 0x00	; 0
    2484:	d1 f6       	brne	.-76     	; 0x243a <shift_DOWN_UP+0x262>
    2486:	27 c0       	rjmp	.+78     	; 0x24d6 <shift_DOWN_UP+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2488:	8e 01       	movw	r16, r28
    248a:	07 5a       	subi	r16, 0xA7	; 167
    248c:	1f 4f       	sbci	r17, 0xFF	; 255
    248e:	fe 01       	movw	r30, r28
    2490:	e5 5a       	subi	r30, 0xA5	; 165
    2492:	ff 4f       	sbci	r31, 0xFF	; 255
    2494:	60 81       	ld	r22, Z
    2496:	71 81       	ldd	r23, Z+1	; 0x01
    2498:	82 81       	ldd	r24, Z+2	; 0x02
    249a:	93 81       	ldd	r25, Z+3	; 0x03
    249c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	f8 01       	movw	r30, r16
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	80 83       	st	Z, r24
    24aa:	de 01       	movw	r26, r28
    24ac:	ab 5a       	subi	r26, 0xAB	; 171
    24ae:	bf 4f       	sbci	r27, 0xFF	; 255
    24b0:	fe 01       	movw	r30, r28
    24b2:	e7 5a       	subi	r30, 0xA7	; 167
    24b4:	ff 4f       	sbci	r31, 0xFF	; 255
    24b6:	80 81       	ld	r24, Z
    24b8:	91 81       	ldd	r25, Z+1	; 0x01
    24ba:	8d 93       	st	X+, r24
    24bc:	9c 93       	st	X, r25
    24be:	fe 01       	movw	r30, r28
    24c0:	eb 5a       	subi	r30, 0xAB	; 171
    24c2:	ff 4f       	sbci	r31, 0xFF	; 255
    24c4:	80 81       	ld	r24, Z
    24c6:	91 81       	ldd	r25, Z+1	; 0x01
    24c8:	01 97       	sbiw	r24, 0x01	; 1
    24ca:	f1 f7       	brne	.-4      	; 0x24c8 <shift_DOWN_UP+0x2f0>
    24cc:	fe 01       	movw	r30, r28
    24ce:	eb 5a       	subi	r30, 0xAB	; 171
    24d0:	ff 4f       	sbci	r31, 0xFF	; 255
    24d2:	91 83       	std	Z+1, r25	; 0x01
    24d4:	80 83       	st	Z, r24
	_delay_ms(250);
	LED_OFF(DIO_PORTA,DIO_PIN6);
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	66 e0       	ldi	r22, 0x06	; 6
    24da:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>

	LED_ON(DIO_PORTA,DIO_PIN5);
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	65 e0       	ldi	r22, 0x05	; 5
    24e2:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    24e6:	fe 01       	movw	r30, r28
    24e8:	ef 5a       	subi	r30, 0xAF	; 175
    24ea:	ff 4f       	sbci	r31, 0xFF	; 255
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	aa e7       	ldi	r26, 0x7A	; 122
    24f2:	b3 e4       	ldi	r27, 0x43	; 67
    24f4:	80 83       	st	Z, r24
    24f6:	91 83       	std	Z+1, r25	; 0x01
    24f8:	a2 83       	std	Z+2, r26	; 0x02
    24fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24fc:	8e 01       	movw	r16, r28
    24fe:	03 5b       	subi	r16, 0xB3	; 179
    2500:	1f 4f       	sbci	r17, 0xFF	; 255
    2502:	fe 01       	movw	r30, r28
    2504:	ef 5a       	subi	r30, 0xAF	; 175
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	60 81       	ld	r22, Z
    250a:	71 81       	ldd	r23, Z+1	; 0x01
    250c:	82 81       	ldd	r24, Z+2	; 0x02
    250e:	93 81       	ldd	r25, Z+3	; 0x03
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	4a ef       	ldi	r20, 0xFA	; 250
    2516:	54 e4       	ldi	r21, 0x44	; 68
    2518:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	f8 01       	movw	r30, r16
    2522:	80 83       	st	Z, r24
    2524:	91 83       	std	Z+1, r25	; 0x01
    2526:	a2 83       	std	Z+2, r26	; 0x02
    2528:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    252a:	fe 01       	movw	r30, r28
    252c:	e3 5b       	subi	r30, 0xB3	; 179
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	60 81       	ld	r22, Z
    2532:	71 81       	ldd	r23, Z+1	; 0x01
    2534:	82 81       	ldd	r24, Z+2	; 0x02
    2536:	93 81       	ldd	r25, Z+3	; 0x03
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	40 e8       	ldi	r20, 0x80	; 128
    253e:	5f e3       	ldi	r21, 0x3F	; 63
    2540:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2544:	88 23       	and	r24, r24
    2546:	44 f4       	brge	.+16     	; 0x2558 <shift_DOWN_UP+0x380>
		__ticks = 1;
    2548:	fe 01       	movw	r30, r28
    254a:	e5 5b       	subi	r30, 0xB5	; 181
    254c:	ff 4f       	sbci	r31, 0xFF	; 255
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	91 83       	std	Z+1, r25	; 0x01
    2554:	80 83       	st	Z, r24
    2556:	64 c0       	rjmp	.+200    	; 0x2620 <shift_DOWN_UP+0x448>
	else if (__tmp > 65535)
    2558:	fe 01       	movw	r30, r28
    255a:	e3 5b       	subi	r30, 0xB3	; 179
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	60 81       	ld	r22, Z
    2560:	71 81       	ldd	r23, Z+1	; 0x01
    2562:	82 81       	ldd	r24, Z+2	; 0x02
    2564:	93 81       	ldd	r25, Z+3	; 0x03
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	3f ef       	ldi	r19, 0xFF	; 255
    256a:	4f e7       	ldi	r20, 0x7F	; 127
    256c:	57 e4       	ldi	r21, 0x47	; 71
    256e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2572:	18 16       	cp	r1, r24
    2574:	0c f0       	brlt	.+2      	; 0x2578 <shift_DOWN_UP+0x3a0>
    2576:	43 c0       	rjmp	.+134    	; 0x25fe <shift_DOWN_UP+0x426>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2578:	fe 01       	movw	r30, r28
    257a:	ef 5a       	subi	r30, 0xAF	; 175
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	60 81       	ld	r22, Z
    2580:	71 81       	ldd	r23, Z+1	; 0x01
    2582:	82 81       	ldd	r24, Z+2	; 0x02
    2584:	93 81       	ldd	r25, Z+3	; 0x03
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	40 e2       	ldi	r20, 0x20	; 32
    258c:	51 e4       	ldi	r21, 0x41	; 65
    258e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	8e 01       	movw	r16, r28
    2598:	05 5b       	subi	r16, 0xB5	; 181
    259a:	1f 4f       	sbci	r17, 0xFF	; 255
    259c:	bc 01       	movw	r22, r24
    259e:	cd 01       	movw	r24, r26
    25a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	f8 01       	movw	r30, r16
    25aa:	91 83       	std	Z+1, r25	; 0x01
    25ac:	80 83       	st	Z, r24
    25ae:	1f c0       	rjmp	.+62     	; 0x25ee <shift_DOWN_UP+0x416>
    25b0:	fe 01       	movw	r30, r28
    25b2:	e7 5b       	subi	r30, 0xB7	; 183
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	88 ec       	ldi	r24, 0xC8	; 200
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	91 83       	std	Z+1, r25	; 0x01
    25bc:	80 83       	st	Z, r24
    25be:	fe 01       	movw	r30, r28
    25c0:	e7 5b       	subi	r30, 0xB7	; 183
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	80 81       	ld	r24, Z
    25c6:	91 81       	ldd	r25, Z+1	; 0x01
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	f1 f7       	brne	.-4      	; 0x25c8 <shift_DOWN_UP+0x3f0>
    25cc:	fe 01       	movw	r30, r28
    25ce:	e7 5b       	subi	r30, 0xB7	; 183
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	91 83       	std	Z+1, r25	; 0x01
    25d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d6:	de 01       	movw	r26, r28
    25d8:	a5 5b       	subi	r26, 0xB5	; 181
    25da:	bf 4f       	sbci	r27, 0xFF	; 255
    25dc:	fe 01       	movw	r30, r28
    25de:	e5 5b       	subi	r30, 0xB5	; 181
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	80 81       	ld	r24, Z
    25e4:	91 81       	ldd	r25, Z+1	; 0x01
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	11 96       	adiw	r26, 0x01	; 1
    25ea:	9c 93       	st	X, r25
    25ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ee:	fe 01       	movw	r30, r28
    25f0:	e5 5b       	subi	r30, 0xB5	; 181
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	80 81       	ld	r24, Z
    25f6:	91 81       	ldd	r25, Z+1	; 0x01
    25f8:	00 97       	sbiw	r24, 0x00	; 0
    25fa:	d1 f6       	brne	.-76     	; 0x25b0 <shift_DOWN_UP+0x3d8>
    25fc:	27 c0       	rjmp	.+78     	; 0x264c <shift_DOWN_UP+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25fe:	8e 01       	movw	r16, r28
    2600:	05 5b       	subi	r16, 0xB5	; 181
    2602:	1f 4f       	sbci	r17, 0xFF	; 255
    2604:	fe 01       	movw	r30, r28
    2606:	e3 5b       	subi	r30, 0xB3	; 179
    2608:	ff 4f       	sbci	r31, 0xFF	; 255
    260a:	60 81       	ld	r22, Z
    260c:	71 81       	ldd	r23, Z+1	; 0x01
    260e:	82 81       	ldd	r24, Z+2	; 0x02
    2610:	93 81       	ldd	r25, Z+3	; 0x03
    2612:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	f8 01       	movw	r30, r16
    261c:	91 83       	std	Z+1, r25	; 0x01
    261e:	80 83       	st	Z, r24
    2620:	de 01       	movw	r26, r28
    2622:	a9 5b       	subi	r26, 0xB9	; 185
    2624:	bf 4f       	sbci	r27, 0xFF	; 255
    2626:	fe 01       	movw	r30, r28
    2628:	e5 5b       	subi	r30, 0xB5	; 181
    262a:	ff 4f       	sbci	r31, 0xFF	; 255
    262c:	80 81       	ld	r24, Z
    262e:	91 81       	ldd	r25, Z+1	; 0x01
    2630:	8d 93       	st	X+, r24
    2632:	9c 93       	st	X, r25
    2634:	fe 01       	movw	r30, r28
    2636:	e9 5b       	subi	r30, 0xB9	; 185
    2638:	ff 4f       	sbci	r31, 0xFF	; 255
    263a:	80 81       	ld	r24, Z
    263c:	91 81       	ldd	r25, Z+1	; 0x01
    263e:	01 97       	sbiw	r24, 0x01	; 1
    2640:	f1 f7       	brne	.-4      	; 0x263e <shift_DOWN_UP+0x466>
    2642:	fe 01       	movw	r30, r28
    2644:	e9 5b       	subi	r30, 0xB9	; 185
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	91 83       	std	Z+1, r25	; 0x01
    264a:	80 83       	st	Z, r24
	_delay_ms(250);
	LED_OFF(DIO_PORTA,DIO_PIN5);
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	65 e0       	ldi	r22, 0x05	; 5
    2650:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>

	LED_ON(DIO_PORTA,DIO_PIN4);
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	64 e0       	ldi	r22, 0x04	; 4
    2658:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    265c:	fe 01       	movw	r30, r28
    265e:	ed 5b       	subi	r30, 0xBD	; 189
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	80 e0       	ldi	r24, 0x00	; 0
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	aa e7       	ldi	r26, 0x7A	; 122
    2668:	b3 e4       	ldi	r27, 0x43	; 67
    266a:	80 83       	st	Z, r24
    266c:	91 83       	std	Z+1, r25	; 0x01
    266e:	a2 83       	std	Z+2, r26	; 0x02
    2670:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2672:	8e 01       	movw	r16, r28
    2674:	01 5c       	subi	r16, 0xC1	; 193
    2676:	1f 4f       	sbci	r17, 0xFF	; 255
    2678:	fe 01       	movw	r30, r28
    267a:	ed 5b       	subi	r30, 0xBD	; 189
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	60 81       	ld	r22, Z
    2680:	71 81       	ldd	r23, Z+1	; 0x01
    2682:	82 81       	ldd	r24, Z+2	; 0x02
    2684:	93 81       	ldd	r25, Z+3	; 0x03
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	4a ef       	ldi	r20, 0xFA	; 250
    268c:	54 e4       	ldi	r21, 0x44	; 68
    268e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	f8 01       	movw	r30, r16
    2698:	80 83       	st	Z, r24
    269a:	91 83       	std	Z+1, r25	; 0x01
    269c:	a2 83       	std	Z+2, r26	; 0x02
    269e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26a0:	fe 01       	movw	r30, r28
    26a2:	ff 96       	adiw	r30, 0x3f	; 63
    26a4:	60 81       	ld	r22, Z
    26a6:	71 81       	ldd	r23, Z+1	; 0x01
    26a8:	82 81       	ldd	r24, Z+2	; 0x02
    26aa:	93 81       	ldd	r25, Z+3	; 0x03
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	40 e8       	ldi	r20, 0x80	; 128
    26b2:	5f e3       	ldi	r21, 0x3F	; 63
    26b4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    26b8:	88 23       	and	r24, r24
    26ba:	2c f4       	brge	.+10     	; 0x26c6 <shift_DOWN_UP+0x4ee>
		__ticks = 1;
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	9e af       	std	Y+62, r25	; 0x3e
    26c2:	8d af       	std	Y+61, r24	; 0x3d
    26c4:	46 c0       	rjmp	.+140    	; 0x2752 <shift_DOWN_UP+0x57a>
	else if (__tmp > 65535)
    26c6:	fe 01       	movw	r30, r28
    26c8:	ff 96       	adiw	r30, 0x3f	; 63
    26ca:	60 81       	ld	r22, Z
    26cc:	71 81       	ldd	r23, Z+1	; 0x01
    26ce:	82 81       	ldd	r24, Z+2	; 0x02
    26d0:	93 81       	ldd	r25, Z+3	; 0x03
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	3f ef       	ldi	r19, 0xFF	; 255
    26d6:	4f e7       	ldi	r20, 0x7F	; 127
    26d8:	57 e4       	ldi	r21, 0x47	; 71
    26da:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26de:	18 16       	cp	r1, r24
    26e0:	64 f5       	brge	.+88     	; 0x273a <shift_DOWN_UP+0x562>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e2:	fe 01       	movw	r30, r28
    26e4:	ed 5b       	subi	r30, 0xBD	; 189
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	60 81       	ld	r22, Z
    26ea:	71 81       	ldd	r23, Z+1	; 0x01
    26ec:	82 81       	ldd	r24, Z+2	; 0x02
    26ee:	93 81       	ldd	r25, Z+3	; 0x03
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	40 e2       	ldi	r20, 0x20	; 32
    26f6:	51 e4       	ldi	r21, 0x41	; 65
    26f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	bc 01       	movw	r22, r24
    2702:	cd 01       	movw	r24, r26
    2704:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	9e af       	std	Y+62, r25	; 0x3e
    270e:	8d af       	std	Y+61, r24	; 0x3d
    2710:	0f c0       	rjmp	.+30     	; 0x2730 <shift_DOWN_UP+0x558>
    2712:	88 ec       	ldi	r24, 0xC8	; 200
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	9c af       	std	Y+60, r25	; 0x3c
    2718:	8b af       	std	Y+59, r24	; 0x3b
    271a:	8b ad       	ldd	r24, Y+59	; 0x3b
    271c:	9c ad       	ldd	r25, Y+60	; 0x3c
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	f1 f7       	brne	.-4      	; 0x271e <shift_DOWN_UP+0x546>
    2722:	9c af       	std	Y+60, r25	; 0x3c
    2724:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2726:	8d ad       	ldd	r24, Y+61	; 0x3d
    2728:	9e ad       	ldd	r25, Y+62	; 0x3e
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	9e af       	std	Y+62, r25	; 0x3e
    272e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2730:	8d ad       	ldd	r24, Y+61	; 0x3d
    2732:	9e ad       	ldd	r25, Y+62	; 0x3e
    2734:	00 97       	sbiw	r24, 0x00	; 0
    2736:	69 f7       	brne	.-38     	; 0x2712 <shift_DOWN_UP+0x53a>
    2738:	16 c0       	rjmp	.+44     	; 0x2766 <shift_DOWN_UP+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    273a:	fe 01       	movw	r30, r28
    273c:	ff 96       	adiw	r30, 0x3f	; 63
    273e:	60 81       	ld	r22, Z
    2740:	71 81       	ldd	r23, Z+1	; 0x01
    2742:	82 81       	ldd	r24, Z+2	; 0x02
    2744:	93 81       	ldd	r25, Z+3	; 0x03
    2746:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	9e af       	std	Y+62, r25	; 0x3e
    2750:	8d af       	std	Y+61, r24	; 0x3d
    2752:	8d ad       	ldd	r24, Y+61	; 0x3d
    2754:	9e ad       	ldd	r25, Y+62	; 0x3e
    2756:	9a af       	std	Y+58, r25	; 0x3a
    2758:	89 af       	std	Y+57, r24	; 0x39
    275a:	89 ad       	ldd	r24, Y+57	; 0x39
    275c:	9a ad       	ldd	r25, Y+58	; 0x3a
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	f1 f7       	brne	.-4      	; 0x275e <shift_DOWN_UP+0x586>
    2762:	9a af       	std	Y+58, r25	; 0x3a
    2764:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(250);
	LED_OFF(DIO_PORTA,DIO_PIN4);
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	64 e0       	ldi	r22, 0x04	; 4
    276a:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>

	LED_ON(DIO_PORTA,DIO_PIN3);
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	63 e0       	ldi	r22, 0x03	; 3
    2772:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	aa e7       	ldi	r26, 0x7A	; 122
    277c:	b3 e4       	ldi	r27, 0x43	; 67
    277e:	8d ab       	std	Y+53, r24	; 0x35
    2780:	9e ab       	std	Y+54, r25	; 0x36
    2782:	af ab       	std	Y+55, r26	; 0x37
    2784:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2786:	6d a9       	ldd	r22, Y+53	; 0x35
    2788:	7e a9       	ldd	r23, Y+54	; 0x36
    278a:	8f a9       	ldd	r24, Y+55	; 0x37
    278c:	98 ad       	ldd	r25, Y+56	; 0x38
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	4a ef       	ldi	r20, 0xFA	; 250
    2794:	54 e4       	ldi	r21, 0x44	; 68
    2796:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	89 ab       	std	Y+49, r24	; 0x31
    27a0:	9a ab       	std	Y+50, r25	; 0x32
    27a2:	ab ab       	std	Y+51, r26	; 0x33
    27a4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    27a6:	69 a9       	ldd	r22, Y+49	; 0x31
    27a8:	7a a9       	ldd	r23, Y+50	; 0x32
    27aa:	8b a9       	ldd	r24, Y+51	; 0x33
    27ac:	9c a9       	ldd	r25, Y+52	; 0x34
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	40 e8       	ldi	r20, 0x80	; 128
    27b4:	5f e3       	ldi	r21, 0x3F	; 63
    27b6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    27ba:	88 23       	and	r24, r24
    27bc:	2c f4       	brge	.+10     	; 0x27c8 <shift_DOWN_UP+0x5f0>
		__ticks = 1;
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	98 ab       	std	Y+48, r25	; 0x30
    27c4:	8f a7       	std	Y+47, r24	; 0x2f
    27c6:	3f c0       	rjmp	.+126    	; 0x2846 <shift_DOWN_UP+0x66e>
	else if (__tmp > 65535)
    27c8:	69 a9       	ldd	r22, Y+49	; 0x31
    27ca:	7a a9       	ldd	r23, Y+50	; 0x32
    27cc:	8b a9       	ldd	r24, Y+51	; 0x33
    27ce:	9c a9       	ldd	r25, Y+52	; 0x34
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	3f ef       	ldi	r19, 0xFF	; 255
    27d4:	4f e7       	ldi	r20, 0x7F	; 127
    27d6:	57 e4       	ldi	r21, 0x47	; 71
    27d8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27dc:	18 16       	cp	r1, r24
    27de:	4c f5       	brge	.+82     	; 0x2832 <shift_DOWN_UP+0x65a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e0:	6d a9       	ldd	r22, Y+53	; 0x35
    27e2:	7e a9       	ldd	r23, Y+54	; 0x36
    27e4:	8f a9       	ldd	r24, Y+55	; 0x37
    27e6:	98 ad       	ldd	r25, Y+56	; 0x38
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	40 e2       	ldi	r20, 0x20	; 32
    27ee:	51 e4       	ldi	r21, 0x41	; 65
    27f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	bc 01       	movw	r22, r24
    27fa:	cd 01       	movw	r24, r26
    27fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2800:	dc 01       	movw	r26, r24
    2802:	cb 01       	movw	r24, r22
    2804:	98 ab       	std	Y+48, r25	; 0x30
    2806:	8f a7       	std	Y+47, r24	; 0x2f
    2808:	0f c0       	rjmp	.+30     	; 0x2828 <shift_DOWN_UP+0x650>
    280a:	88 ec       	ldi	r24, 0xC8	; 200
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	9e a7       	std	Y+46, r25	; 0x2e
    2810:	8d a7       	std	Y+45, r24	; 0x2d
    2812:	8d a5       	ldd	r24, Y+45	; 0x2d
    2814:	9e a5       	ldd	r25, Y+46	; 0x2e
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	f1 f7       	brne	.-4      	; 0x2816 <shift_DOWN_UP+0x63e>
    281a:	9e a7       	std	Y+46, r25	; 0x2e
    281c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    281e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2820:	98 a9       	ldd	r25, Y+48	; 0x30
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	98 ab       	std	Y+48, r25	; 0x30
    2826:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2828:	8f a5       	ldd	r24, Y+47	; 0x2f
    282a:	98 a9       	ldd	r25, Y+48	; 0x30
    282c:	00 97       	sbiw	r24, 0x00	; 0
    282e:	69 f7       	brne	.-38     	; 0x280a <shift_DOWN_UP+0x632>
    2830:	14 c0       	rjmp	.+40     	; 0x285a <shift_DOWN_UP+0x682>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2832:	69 a9       	ldd	r22, Y+49	; 0x31
    2834:	7a a9       	ldd	r23, Y+50	; 0x32
    2836:	8b a9       	ldd	r24, Y+51	; 0x33
    2838:	9c a9       	ldd	r25, Y+52	; 0x34
    283a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	98 ab       	std	Y+48, r25	; 0x30
    2844:	8f a7       	std	Y+47, r24	; 0x2f
    2846:	8f a5       	ldd	r24, Y+47	; 0x2f
    2848:	98 a9       	ldd	r25, Y+48	; 0x30
    284a:	9c a7       	std	Y+44, r25	; 0x2c
    284c:	8b a7       	std	Y+43, r24	; 0x2b
    284e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2850:	9c a5       	ldd	r25, Y+44	; 0x2c
    2852:	01 97       	sbiw	r24, 0x01	; 1
    2854:	f1 f7       	brne	.-4      	; 0x2852 <shift_DOWN_UP+0x67a>
    2856:	9c a7       	std	Y+44, r25	; 0x2c
    2858:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(250);
	LED_OFF(DIO_PORTA,DIO_PIN3);
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	63 e0       	ldi	r22, 0x03	; 3
    285e:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>

	LED_ON(DIO_PORTA,DIO_PIN2);
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	62 e0       	ldi	r22, 0x02	; 2
    2866:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	aa e7       	ldi	r26, 0x7A	; 122
    2870:	b3 e4       	ldi	r27, 0x43	; 67
    2872:	8f a3       	std	Y+39, r24	; 0x27
    2874:	98 a7       	std	Y+40, r25	; 0x28
    2876:	a9 a7       	std	Y+41, r26	; 0x29
    2878:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    287a:	6f a1       	ldd	r22, Y+39	; 0x27
    287c:	78 a5       	ldd	r23, Y+40	; 0x28
    287e:	89 a5       	ldd	r24, Y+41	; 0x29
    2880:	9a a5       	ldd	r25, Y+42	; 0x2a
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	4a ef       	ldi	r20, 0xFA	; 250
    2888:	54 e4       	ldi	r21, 0x44	; 68
    288a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	8b a3       	std	Y+35, r24	; 0x23
    2894:	9c a3       	std	Y+36, r25	; 0x24
    2896:	ad a3       	std	Y+37, r26	; 0x25
    2898:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    289a:	6b a1       	ldd	r22, Y+35	; 0x23
    289c:	7c a1       	ldd	r23, Y+36	; 0x24
    289e:	8d a1       	ldd	r24, Y+37	; 0x25
    28a0:	9e a1       	ldd	r25, Y+38	; 0x26
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	40 e8       	ldi	r20, 0x80	; 128
    28a8:	5f e3       	ldi	r21, 0x3F	; 63
    28aa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    28ae:	88 23       	and	r24, r24
    28b0:	2c f4       	brge	.+10     	; 0x28bc <shift_DOWN_UP+0x6e4>
		__ticks = 1;
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	9a a3       	std	Y+34, r25	; 0x22
    28b8:	89 a3       	std	Y+33, r24	; 0x21
    28ba:	3f c0       	rjmp	.+126    	; 0x293a <shift_DOWN_UP+0x762>
	else if (__tmp > 65535)
    28bc:	6b a1       	ldd	r22, Y+35	; 0x23
    28be:	7c a1       	ldd	r23, Y+36	; 0x24
    28c0:	8d a1       	ldd	r24, Y+37	; 0x25
    28c2:	9e a1       	ldd	r25, Y+38	; 0x26
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	3f ef       	ldi	r19, 0xFF	; 255
    28c8:	4f e7       	ldi	r20, 0x7F	; 127
    28ca:	57 e4       	ldi	r21, 0x47	; 71
    28cc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28d0:	18 16       	cp	r1, r24
    28d2:	4c f5       	brge	.+82     	; 0x2926 <shift_DOWN_UP+0x74e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d4:	6f a1       	ldd	r22, Y+39	; 0x27
    28d6:	78 a5       	ldd	r23, Y+40	; 0x28
    28d8:	89 a5       	ldd	r24, Y+41	; 0x29
    28da:	9a a5       	ldd	r25, Y+42	; 0x2a
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	40 e2       	ldi	r20, 0x20	; 32
    28e2:	51 e4       	ldi	r21, 0x41	; 65
    28e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	bc 01       	movw	r22, r24
    28ee:	cd 01       	movw	r24, r26
    28f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	9a a3       	std	Y+34, r25	; 0x22
    28fa:	89 a3       	std	Y+33, r24	; 0x21
    28fc:	0f c0       	rjmp	.+30     	; 0x291c <shift_DOWN_UP+0x744>
    28fe:	88 ec       	ldi	r24, 0xC8	; 200
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	98 a3       	std	Y+32, r25	; 0x20
    2904:	8f 8f       	std	Y+31, r24	; 0x1f
    2906:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2908:	98 a1       	ldd	r25, Y+32	; 0x20
    290a:	01 97       	sbiw	r24, 0x01	; 1
    290c:	f1 f7       	brne	.-4      	; 0x290a <shift_DOWN_UP+0x732>
    290e:	98 a3       	std	Y+32, r25	; 0x20
    2910:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2912:	89 a1       	ldd	r24, Y+33	; 0x21
    2914:	9a a1       	ldd	r25, Y+34	; 0x22
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	9a a3       	std	Y+34, r25	; 0x22
    291a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    291c:	89 a1       	ldd	r24, Y+33	; 0x21
    291e:	9a a1       	ldd	r25, Y+34	; 0x22
    2920:	00 97       	sbiw	r24, 0x00	; 0
    2922:	69 f7       	brne	.-38     	; 0x28fe <shift_DOWN_UP+0x726>
    2924:	14 c0       	rjmp	.+40     	; 0x294e <shift_DOWN_UP+0x776>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2926:	6b a1       	ldd	r22, Y+35	; 0x23
    2928:	7c a1       	ldd	r23, Y+36	; 0x24
    292a:	8d a1       	ldd	r24, Y+37	; 0x25
    292c:	9e a1       	ldd	r25, Y+38	; 0x26
    292e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	9a a3       	std	Y+34, r25	; 0x22
    2938:	89 a3       	std	Y+33, r24	; 0x21
    293a:	89 a1       	ldd	r24, Y+33	; 0x21
    293c:	9a a1       	ldd	r25, Y+34	; 0x22
    293e:	9e 8f       	std	Y+30, r25	; 0x1e
    2940:	8d 8f       	std	Y+29, r24	; 0x1d
    2942:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2944:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2946:	01 97       	sbiw	r24, 0x01	; 1
    2948:	f1 f7       	brne	.-4      	; 0x2946 <shift_DOWN_UP+0x76e>
    294a:	9e 8f       	std	Y+30, r25	; 0x1e
    294c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(250);
	LED_OFF(DIO_PORTA,DIO_PIN2);
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	62 e0       	ldi	r22, 0x02	; 2
    2952:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>

	LED_ON(DIO_PORTA,DIO_PIN1);
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	61 e0       	ldi	r22, 0x01	; 1
    295a:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    295e:	80 e0       	ldi	r24, 0x00	; 0
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	aa e7       	ldi	r26, 0x7A	; 122
    2964:	b3 e4       	ldi	r27, 0x43	; 67
    2966:	89 8f       	std	Y+25, r24	; 0x19
    2968:	9a 8f       	std	Y+26, r25	; 0x1a
    296a:	ab 8f       	std	Y+27, r26	; 0x1b
    296c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    296e:	69 8d       	ldd	r22, Y+25	; 0x19
    2970:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2972:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2974:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	4a ef       	ldi	r20, 0xFA	; 250
    297c:	54 e4       	ldi	r21, 0x44	; 68
    297e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	8d 8b       	std	Y+21, r24	; 0x15
    2988:	9e 8b       	std	Y+22, r25	; 0x16
    298a:	af 8b       	std	Y+23, r26	; 0x17
    298c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    298e:	6d 89       	ldd	r22, Y+21	; 0x15
    2990:	7e 89       	ldd	r23, Y+22	; 0x16
    2992:	8f 89       	ldd	r24, Y+23	; 0x17
    2994:	98 8d       	ldd	r25, Y+24	; 0x18
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	40 e8       	ldi	r20, 0x80	; 128
    299c:	5f e3       	ldi	r21, 0x3F	; 63
    299e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    29a2:	88 23       	and	r24, r24
    29a4:	2c f4       	brge	.+10     	; 0x29b0 <shift_DOWN_UP+0x7d8>
		__ticks = 1;
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	9c 8b       	std	Y+20, r25	; 0x14
    29ac:	8b 8b       	std	Y+19, r24	; 0x13
    29ae:	3f c0       	rjmp	.+126    	; 0x2a2e <shift_DOWN_UP+0x856>
	else if (__tmp > 65535)
    29b0:	6d 89       	ldd	r22, Y+21	; 0x15
    29b2:	7e 89       	ldd	r23, Y+22	; 0x16
    29b4:	8f 89       	ldd	r24, Y+23	; 0x17
    29b6:	98 8d       	ldd	r25, Y+24	; 0x18
    29b8:	20 e0       	ldi	r18, 0x00	; 0
    29ba:	3f ef       	ldi	r19, 0xFF	; 255
    29bc:	4f e7       	ldi	r20, 0x7F	; 127
    29be:	57 e4       	ldi	r21, 0x47	; 71
    29c0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    29c4:	18 16       	cp	r1, r24
    29c6:	4c f5       	brge	.+82     	; 0x2a1a <shift_DOWN_UP+0x842>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c8:	69 8d       	ldd	r22, Y+25	; 0x19
    29ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	40 e2       	ldi	r20, 0x20	; 32
    29d6:	51 e4       	ldi	r21, 0x41	; 65
    29d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	bc 01       	movw	r22, r24
    29e2:	cd 01       	movw	r24, r26
    29e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	9c 8b       	std	Y+20, r25	; 0x14
    29ee:	8b 8b       	std	Y+19, r24	; 0x13
    29f0:	0f c0       	rjmp	.+30     	; 0x2a10 <shift_DOWN_UP+0x838>
    29f2:	88 ec       	ldi	r24, 0xC8	; 200
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	9a 8b       	std	Y+18, r25	; 0x12
    29f8:	89 8b       	std	Y+17, r24	; 0x11
    29fa:	89 89       	ldd	r24, Y+17	; 0x11
    29fc:	9a 89       	ldd	r25, Y+18	; 0x12
    29fe:	01 97       	sbiw	r24, 0x01	; 1
    2a00:	f1 f7       	brne	.-4      	; 0x29fe <shift_DOWN_UP+0x826>
    2a02:	9a 8b       	std	Y+18, r25	; 0x12
    2a04:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a06:	8b 89       	ldd	r24, Y+19	; 0x13
    2a08:	9c 89       	ldd	r25, Y+20	; 0x14
    2a0a:	01 97       	sbiw	r24, 0x01	; 1
    2a0c:	9c 8b       	std	Y+20, r25	; 0x14
    2a0e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a10:	8b 89       	ldd	r24, Y+19	; 0x13
    2a12:	9c 89       	ldd	r25, Y+20	; 0x14
    2a14:	00 97       	sbiw	r24, 0x00	; 0
    2a16:	69 f7       	brne	.-38     	; 0x29f2 <shift_DOWN_UP+0x81a>
    2a18:	14 c0       	rjmp	.+40     	; 0x2a42 <shift_DOWN_UP+0x86a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a1a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a1c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a1e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a20:	98 8d       	ldd	r25, Y+24	; 0x18
    2a22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	9c 8b       	std	Y+20, r25	; 0x14
    2a2c:	8b 8b       	std	Y+19, r24	; 0x13
    2a2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a30:	9c 89       	ldd	r25, Y+20	; 0x14
    2a32:	98 8b       	std	Y+16, r25	; 0x10
    2a34:	8f 87       	std	Y+15, r24	; 0x0f
    2a36:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a38:	98 89       	ldd	r25, Y+16	; 0x10
    2a3a:	01 97       	sbiw	r24, 0x01	; 1
    2a3c:	f1 f7       	brne	.-4      	; 0x2a3a <shift_DOWN_UP+0x862>
    2a3e:	98 8b       	std	Y+16, r25	; 0x10
    2a40:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(250);
	LED_OFF(DIO_PORTA,DIO_PIN1);
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	61 e0       	ldi	r22, 0x01	; 1
    2a46:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>

	LED_ON(DIO_PORTA,DIO_PIN0);
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	60 e0       	ldi	r22, 0x00	; 0
    2a4e:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    2a52:	80 e0       	ldi	r24, 0x00	; 0
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	aa e7       	ldi	r26, 0x7A	; 122
    2a58:	b3 e4       	ldi	r27, 0x43	; 67
    2a5a:	8b 87       	std	Y+11, r24	; 0x0b
    2a5c:	9c 87       	std	Y+12, r25	; 0x0c
    2a5e:	ad 87       	std	Y+13, r26	; 0x0d
    2a60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a62:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a64:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a6a:	20 e0       	ldi	r18, 0x00	; 0
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	4a ef       	ldi	r20, 0xFA	; 250
    2a70:	54 e4       	ldi	r21, 0x44	; 68
    2a72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	8f 83       	std	Y+7, r24	; 0x07
    2a7c:	98 87       	std	Y+8, r25	; 0x08
    2a7e:	a9 87       	std	Y+9, r26	; 0x09
    2a80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a82:	6f 81       	ldd	r22, Y+7	; 0x07
    2a84:	78 85       	ldd	r23, Y+8	; 0x08
    2a86:	89 85       	ldd	r24, Y+9	; 0x09
    2a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	40 e8       	ldi	r20, 0x80	; 128
    2a90:	5f e3       	ldi	r21, 0x3F	; 63
    2a92:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a96:	88 23       	and	r24, r24
    2a98:	2c f4       	brge	.+10     	; 0x2aa4 <shift_DOWN_UP+0x8cc>
		__ticks = 1;
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	9e 83       	std	Y+6, r25	; 0x06
    2aa0:	8d 83       	std	Y+5, r24	; 0x05
    2aa2:	3f c0       	rjmp	.+126    	; 0x2b22 <shift_DOWN_UP+0x94a>
	else if (__tmp > 65535)
    2aa4:	6f 81       	ldd	r22, Y+7	; 0x07
    2aa6:	78 85       	ldd	r23, Y+8	; 0x08
    2aa8:	89 85       	ldd	r24, Y+9	; 0x09
    2aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	3f ef       	ldi	r19, 0xFF	; 255
    2ab0:	4f e7       	ldi	r20, 0x7F	; 127
    2ab2:	57 e4       	ldi	r21, 0x47	; 71
    2ab4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2ab8:	18 16       	cp	r1, r24
    2aba:	4c f5       	brge	.+82     	; 0x2b0e <shift_DOWN_UP+0x936>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2abc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2abe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ac0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ac2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e2       	ldi	r20, 0x20	; 32
    2aca:	51 e4       	ldi	r21, 0x41	; 65
    2acc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	bc 01       	movw	r22, r24
    2ad6:	cd 01       	movw	r24, r26
    2ad8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	9e 83       	std	Y+6, r25	; 0x06
    2ae2:	8d 83       	std	Y+5, r24	; 0x05
    2ae4:	0f c0       	rjmp	.+30     	; 0x2b04 <shift_DOWN_UP+0x92c>
    2ae6:	88 ec       	ldi	r24, 0xC8	; 200
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	9c 83       	std	Y+4, r25	; 0x04
    2aec:	8b 83       	std	Y+3, r24	; 0x03
    2aee:	8b 81       	ldd	r24, Y+3	; 0x03
    2af0:	9c 81       	ldd	r25, Y+4	; 0x04
    2af2:	01 97       	sbiw	r24, 0x01	; 1
    2af4:	f1 f7       	brne	.-4      	; 0x2af2 <shift_DOWN_UP+0x91a>
    2af6:	9c 83       	std	Y+4, r25	; 0x04
    2af8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2afa:	8d 81       	ldd	r24, Y+5	; 0x05
    2afc:	9e 81       	ldd	r25, Y+6	; 0x06
    2afe:	01 97       	sbiw	r24, 0x01	; 1
    2b00:	9e 83       	std	Y+6, r25	; 0x06
    2b02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b04:	8d 81       	ldd	r24, Y+5	; 0x05
    2b06:	9e 81       	ldd	r25, Y+6	; 0x06
    2b08:	00 97       	sbiw	r24, 0x00	; 0
    2b0a:	69 f7       	brne	.-38     	; 0x2ae6 <shift_DOWN_UP+0x90e>
    2b0c:	14 c0       	rjmp	.+40     	; 0x2b36 <shift_DOWN_UP+0x95e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b10:	78 85       	ldd	r23, Y+8	; 0x08
    2b12:	89 85       	ldd	r24, Y+9	; 0x09
    2b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	9e 83       	std	Y+6, r25	; 0x06
    2b20:	8d 83       	std	Y+5, r24	; 0x05
    2b22:	8d 81       	ldd	r24, Y+5	; 0x05
    2b24:	9e 81       	ldd	r25, Y+6	; 0x06
    2b26:	9a 83       	std	Y+2, r25	; 0x02
    2b28:	89 83       	std	Y+1, r24	; 0x01
    2b2a:	89 81       	ldd	r24, Y+1	; 0x01
    2b2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b2e:	01 97       	sbiw	r24, 0x01	; 1
    2b30:	f1 f7       	brne	.-4      	; 0x2b2e <shift_DOWN_UP+0x956>
    2b32:	9a 83       	std	Y+2, r25	; 0x02
    2b34:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(250);
	LED_OFF(DIO_PORTA,DIO_PIN0);
    2b36:	80 e0       	ldi	r24, 0x00	; 0
    2b38:	60 e0       	ldi	r22, 0x00	; 0
    2b3a:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>

}
    2b3e:	c0 59       	subi	r28, 0x90	; 144
    2b40:	df 4f       	sbci	r29, 0xFF	; 255
    2b42:	0f b6       	in	r0, 0x3f	; 63
    2b44:	f8 94       	cli
    2b46:	de bf       	out	0x3e, r29	; 62
    2b48:	0f be       	out	0x3f, r0	; 63
    2b4a:	cd bf       	out	0x3d, r28	; 61
    2b4c:	cf 91       	pop	r28
    2b4e:	df 91       	pop	r29
    2b50:	1f 91       	pop	r17
    2b52:	0f 91       	pop	r16
    2b54:	08 95       	ret

00002b56 <Converge_LED>:


/*****************************************************************************/
void Converge_LED(void)
{
    2b56:	df 93       	push	r29
    2b58:	cf 93       	push	r28
    2b5a:	cd b7       	in	r28, 0x3d	; 61
    2b5c:	de b7       	in	r29, 0x3e	; 62
    2b5e:	e8 97       	sbiw	r28, 0x38	; 56
    2b60:	0f b6       	in	r0, 0x3f	; 63
    2b62:	f8 94       	cli
    2b64:	de bf       	out	0x3e, r29	; 62
    2b66:	0f be       	out	0x3f, r0	; 63
    2b68:	cd bf       	out	0x3d, r28	; 61
	LED_ON(DIO_PORTA,DIO_PIN0);
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	60 e0       	ldi	r22, 0x00	; 0
    2b6e:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
	LED_ON(DIO_PORTA,DIO_PIN7);
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	67 e0       	ldi	r22, 0x07	; 7
    2b76:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	a6 e9       	ldi	r26, 0x96	; 150
    2b80:	b3 e4       	ldi	r27, 0x43	; 67
    2b82:	8d ab       	std	Y+53, r24	; 0x35
    2b84:	9e ab       	std	Y+54, r25	; 0x36
    2b86:	af ab       	std	Y+55, r26	; 0x37
    2b88:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b8a:	6d a9       	ldd	r22, Y+53	; 0x35
    2b8c:	7e a9       	ldd	r23, Y+54	; 0x36
    2b8e:	8f a9       	ldd	r24, Y+55	; 0x37
    2b90:	98 ad       	ldd	r25, Y+56	; 0x38
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	4a ef       	ldi	r20, 0xFA	; 250
    2b98:	54 e4       	ldi	r21, 0x44	; 68
    2b9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	89 ab       	std	Y+49, r24	; 0x31
    2ba4:	9a ab       	std	Y+50, r25	; 0x32
    2ba6:	ab ab       	std	Y+51, r26	; 0x33
    2ba8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2baa:	69 a9       	ldd	r22, Y+49	; 0x31
    2bac:	7a a9       	ldd	r23, Y+50	; 0x32
    2bae:	8b a9       	ldd	r24, Y+51	; 0x33
    2bb0:	9c a9       	ldd	r25, Y+52	; 0x34
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	40 e8       	ldi	r20, 0x80	; 128
    2bb8:	5f e3       	ldi	r21, 0x3F	; 63
    2bba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2bbe:	88 23       	and	r24, r24
    2bc0:	2c f4       	brge	.+10     	; 0x2bcc <Converge_LED+0x76>
		__ticks = 1;
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	98 ab       	std	Y+48, r25	; 0x30
    2bc8:	8f a7       	std	Y+47, r24	; 0x2f
    2bca:	3f c0       	rjmp	.+126    	; 0x2c4a <Converge_LED+0xf4>
	else if (__tmp > 65535)
    2bcc:	69 a9       	ldd	r22, Y+49	; 0x31
    2bce:	7a a9       	ldd	r23, Y+50	; 0x32
    2bd0:	8b a9       	ldd	r24, Y+51	; 0x33
    2bd2:	9c a9       	ldd	r25, Y+52	; 0x34
    2bd4:	20 e0       	ldi	r18, 0x00	; 0
    2bd6:	3f ef       	ldi	r19, 0xFF	; 255
    2bd8:	4f e7       	ldi	r20, 0x7F	; 127
    2bda:	57 e4       	ldi	r21, 0x47	; 71
    2bdc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2be0:	18 16       	cp	r1, r24
    2be2:	4c f5       	brge	.+82     	; 0x2c36 <Converge_LED+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be4:	6d a9       	ldd	r22, Y+53	; 0x35
    2be6:	7e a9       	ldd	r23, Y+54	; 0x36
    2be8:	8f a9       	ldd	r24, Y+55	; 0x37
    2bea:	98 ad       	ldd	r25, Y+56	; 0x38
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	40 e2       	ldi	r20, 0x20	; 32
    2bf2:	51 e4       	ldi	r21, 0x41	; 65
    2bf4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	bc 01       	movw	r22, r24
    2bfe:	cd 01       	movw	r24, r26
    2c00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	98 ab       	std	Y+48, r25	; 0x30
    2c0a:	8f a7       	std	Y+47, r24	; 0x2f
    2c0c:	0f c0       	rjmp	.+30     	; 0x2c2c <Converge_LED+0xd6>
    2c0e:	88 ec       	ldi	r24, 0xC8	; 200
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	9e a7       	std	Y+46, r25	; 0x2e
    2c14:	8d a7       	std	Y+45, r24	; 0x2d
    2c16:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c18:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	f1 f7       	brne	.-4      	; 0x2c1a <Converge_LED+0xc4>
    2c1e:	9e a7       	std	Y+46, r25	; 0x2e
    2c20:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c22:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c24:	98 a9       	ldd	r25, Y+48	; 0x30
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	98 ab       	std	Y+48, r25	; 0x30
    2c2a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c2e:	98 a9       	ldd	r25, Y+48	; 0x30
    2c30:	00 97       	sbiw	r24, 0x00	; 0
    2c32:	69 f7       	brne	.-38     	; 0x2c0e <Converge_LED+0xb8>
    2c34:	14 c0       	rjmp	.+40     	; 0x2c5e <Converge_LED+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c36:	69 a9       	ldd	r22, Y+49	; 0x31
    2c38:	7a a9       	ldd	r23, Y+50	; 0x32
    2c3a:	8b a9       	ldd	r24, Y+51	; 0x33
    2c3c:	9c a9       	ldd	r25, Y+52	; 0x34
    2c3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	98 ab       	std	Y+48, r25	; 0x30
    2c48:	8f a7       	std	Y+47, r24	; 0x2f
    2c4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c4c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c4e:	9c a7       	std	Y+44, r25	; 0x2c
    2c50:	8b a7       	std	Y+43, r24	; 0x2b
    2c52:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c54:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	f1 f7       	brne	.-4      	; 0x2c56 <Converge_LED+0x100>
    2c5a:	9c a7       	std	Y+44, r25	; 0x2c
    2c5c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(300);

	LED_OFF(DIO_PORTA,DIO_PIN0);
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	60 e0       	ldi	r22, 0x00	; 0
    2c62:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>
	LED_OFF(DIO_PORTA,DIO_PIN7);
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	67 e0       	ldi	r22, 0x07	; 7
    2c6a:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>

	LED_ON(DIO_PORTA,DIO_PIN1);
    2c6e:	80 e0       	ldi	r24, 0x00	; 0
    2c70:	61 e0       	ldi	r22, 0x01	; 1
    2c72:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
	LED_ON(DIO_PORTA,DIO_PIN6);
    2c76:	80 e0       	ldi	r24, 0x00	; 0
    2c78:	66 e0       	ldi	r22, 0x06	; 6
    2c7a:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	a6 e9       	ldi	r26, 0x96	; 150
    2c84:	b3 e4       	ldi	r27, 0x43	; 67
    2c86:	8f a3       	std	Y+39, r24	; 0x27
    2c88:	98 a7       	std	Y+40, r25	; 0x28
    2c8a:	a9 a7       	std	Y+41, r26	; 0x29
    2c8c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c8e:	6f a1       	ldd	r22, Y+39	; 0x27
    2c90:	78 a5       	ldd	r23, Y+40	; 0x28
    2c92:	89 a5       	ldd	r24, Y+41	; 0x29
    2c94:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c96:	20 e0       	ldi	r18, 0x00	; 0
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	4a ef       	ldi	r20, 0xFA	; 250
    2c9c:	54 e4       	ldi	r21, 0x44	; 68
    2c9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	8b a3       	std	Y+35, r24	; 0x23
    2ca8:	9c a3       	std	Y+36, r25	; 0x24
    2caa:	ad a3       	std	Y+37, r26	; 0x25
    2cac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cae:	6b a1       	ldd	r22, Y+35	; 0x23
    2cb0:	7c a1       	ldd	r23, Y+36	; 0x24
    2cb2:	8d a1       	ldd	r24, Y+37	; 0x25
    2cb4:	9e a1       	ldd	r25, Y+38	; 0x26
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	40 e8       	ldi	r20, 0x80	; 128
    2cbc:	5f e3       	ldi	r21, 0x3F	; 63
    2cbe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2cc2:	88 23       	and	r24, r24
    2cc4:	2c f4       	brge	.+10     	; 0x2cd0 <Converge_LED+0x17a>
		__ticks = 1;
    2cc6:	81 e0       	ldi	r24, 0x01	; 1
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	9a a3       	std	Y+34, r25	; 0x22
    2ccc:	89 a3       	std	Y+33, r24	; 0x21
    2cce:	3f c0       	rjmp	.+126    	; 0x2d4e <Converge_LED+0x1f8>
	else if (__tmp > 65535)
    2cd0:	6b a1       	ldd	r22, Y+35	; 0x23
    2cd2:	7c a1       	ldd	r23, Y+36	; 0x24
    2cd4:	8d a1       	ldd	r24, Y+37	; 0x25
    2cd6:	9e a1       	ldd	r25, Y+38	; 0x26
    2cd8:	20 e0       	ldi	r18, 0x00	; 0
    2cda:	3f ef       	ldi	r19, 0xFF	; 255
    2cdc:	4f e7       	ldi	r20, 0x7F	; 127
    2cde:	57 e4       	ldi	r21, 0x47	; 71
    2ce0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2ce4:	18 16       	cp	r1, r24
    2ce6:	4c f5       	brge	.+82     	; 0x2d3a <Converge_LED+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce8:	6f a1       	ldd	r22, Y+39	; 0x27
    2cea:	78 a5       	ldd	r23, Y+40	; 0x28
    2cec:	89 a5       	ldd	r24, Y+41	; 0x29
    2cee:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cf0:	20 e0       	ldi	r18, 0x00	; 0
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	40 e2       	ldi	r20, 0x20	; 32
    2cf6:	51 e4       	ldi	r21, 0x41	; 65
    2cf8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	cb 01       	movw	r24, r22
    2d00:	bc 01       	movw	r22, r24
    2d02:	cd 01       	movw	r24, r26
    2d04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d08:	dc 01       	movw	r26, r24
    2d0a:	cb 01       	movw	r24, r22
    2d0c:	9a a3       	std	Y+34, r25	; 0x22
    2d0e:	89 a3       	std	Y+33, r24	; 0x21
    2d10:	0f c0       	rjmp	.+30     	; 0x2d30 <Converge_LED+0x1da>
    2d12:	88 ec       	ldi	r24, 0xC8	; 200
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	98 a3       	std	Y+32, r25	; 0x20
    2d18:	8f 8f       	std	Y+31, r24	; 0x1f
    2d1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d1c:	98 a1       	ldd	r25, Y+32	; 0x20
    2d1e:	01 97       	sbiw	r24, 0x01	; 1
    2d20:	f1 f7       	brne	.-4      	; 0x2d1e <Converge_LED+0x1c8>
    2d22:	98 a3       	std	Y+32, r25	; 0x20
    2d24:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d26:	89 a1       	ldd	r24, Y+33	; 0x21
    2d28:	9a a1       	ldd	r25, Y+34	; 0x22
    2d2a:	01 97       	sbiw	r24, 0x01	; 1
    2d2c:	9a a3       	std	Y+34, r25	; 0x22
    2d2e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d30:	89 a1       	ldd	r24, Y+33	; 0x21
    2d32:	9a a1       	ldd	r25, Y+34	; 0x22
    2d34:	00 97       	sbiw	r24, 0x00	; 0
    2d36:	69 f7       	brne	.-38     	; 0x2d12 <Converge_LED+0x1bc>
    2d38:	14 c0       	rjmp	.+40     	; 0x2d62 <Converge_LED+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d3a:	6b a1       	ldd	r22, Y+35	; 0x23
    2d3c:	7c a1       	ldd	r23, Y+36	; 0x24
    2d3e:	8d a1       	ldd	r24, Y+37	; 0x25
    2d40:	9e a1       	ldd	r25, Y+38	; 0x26
    2d42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d46:	dc 01       	movw	r26, r24
    2d48:	cb 01       	movw	r24, r22
    2d4a:	9a a3       	std	Y+34, r25	; 0x22
    2d4c:	89 a3       	std	Y+33, r24	; 0x21
    2d4e:	89 a1       	ldd	r24, Y+33	; 0x21
    2d50:	9a a1       	ldd	r25, Y+34	; 0x22
    2d52:	9e 8f       	std	Y+30, r25	; 0x1e
    2d54:	8d 8f       	std	Y+29, r24	; 0x1d
    2d56:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d58:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d5a:	01 97       	sbiw	r24, 0x01	; 1
    2d5c:	f1 f7       	brne	.-4      	; 0x2d5a <Converge_LED+0x204>
    2d5e:	9e 8f       	std	Y+30, r25	; 0x1e
    2d60:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(300);

	LED_OFF(DIO_PORTA,DIO_PIN1);
    2d62:	80 e0       	ldi	r24, 0x00	; 0
    2d64:	61 e0       	ldi	r22, 0x01	; 1
    2d66:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>
	LED_OFF(DIO_PORTA,DIO_PIN6);
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    2d6c:	66 e0       	ldi	r22, 0x06	; 6
    2d6e:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>

	LED_ON(DIO_PORTA,DIO_PIN2);
    2d72:	80 e0       	ldi	r24, 0x00	; 0
    2d74:	62 e0       	ldi	r22, 0x02	; 2
    2d76:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
	LED_ON(DIO_PORTA,DIO_PIN5);
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
    2d7c:	65 e0       	ldi	r22, 0x05	; 5
    2d7e:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    2d82:	80 e0       	ldi	r24, 0x00	; 0
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	a6 e9       	ldi	r26, 0x96	; 150
    2d88:	b3 e4       	ldi	r27, 0x43	; 67
    2d8a:	89 8f       	std	Y+25, r24	; 0x19
    2d8c:	9a 8f       	std	Y+26, r25	; 0x1a
    2d8e:	ab 8f       	std	Y+27, r26	; 0x1b
    2d90:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d92:	69 8d       	ldd	r22, Y+25	; 0x19
    2d94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	4a ef       	ldi	r20, 0xFA	; 250
    2da0:	54 e4       	ldi	r21, 0x44	; 68
    2da2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22
    2daa:	8d 8b       	std	Y+21, r24	; 0x15
    2dac:	9e 8b       	std	Y+22, r25	; 0x16
    2dae:	af 8b       	std	Y+23, r26	; 0x17
    2db0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2db2:	6d 89       	ldd	r22, Y+21	; 0x15
    2db4:	7e 89       	ldd	r23, Y+22	; 0x16
    2db6:	8f 89       	ldd	r24, Y+23	; 0x17
    2db8:	98 8d       	ldd	r25, Y+24	; 0x18
    2dba:	20 e0       	ldi	r18, 0x00	; 0
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	40 e8       	ldi	r20, 0x80	; 128
    2dc0:	5f e3       	ldi	r21, 0x3F	; 63
    2dc2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2dc6:	88 23       	and	r24, r24
    2dc8:	2c f4       	brge	.+10     	; 0x2dd4 <Converge_LED+0x27e>
		__ticks = 1;
    2dca:	81 e0       	ldi	r24, 0x01	; 1
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	9c 8b       	std	Y+20, r25	; 0x14
    2dd0:	8b 8b       	std	Y+19, r24	; 0x13
    2dd2:	3f c0       	rjmp	.+126    	; 0x2e52 <Converge_LED+0x2fc>
	else if (__tmp > 65535)
    2dd4:	6d 89       	ldd	r22, Y+21	; 0x15
    2dd6:	7e 89       	ldd	r23, Y+22	; 0x16
    2dd8:	8f 89       	ldd	r24, Y+23	; 0x17
    2dda:	98 8d       	ldd	r25, Y+24	; 0x18
    2ddc:	20 e0       	ldi	r18, 0x00	; 0
    2dde:	3f ef       	ldi	r19, 0xFF	; 255
    2de0:	4f e7       	ldi	r20, 0x7F	; 127
    2de2:	57 e4       	ldi	r21, 0x47	; 71
    2de4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2de8:	18 16       	cp	r1, r24
    2dea:	4c f5       	brge	.+82     	; 0x2e3e <Converge_LED+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dec:	69 8d       	ldd	r22, Y+25	; 0x19
    2dee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2df0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2df2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2df4:	20 e0       	ldi	r18, 0x00	; 0
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	40 e2       	ldi	r20, 0x20	; 32
    2dfa:	51 e4       	ldi	r21, 0x41	; 65
    2dfc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e00:	dc 01       	movw	r26, r24
    2e02:	cb 01       	movw	r24, r22
    2e04:	bc 01       	movw	r22, r24
    2e06:	cd 01       	movw	r24, r26
    2e08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	9c 8b       	std	Y+20, r25	; 0x14
    2e12:	8b 8b       	std	Y+19, r24	; 0x13
    2e14:	0f c0       	rjmp	.+30     	; 0x2e34 <Converge_LED+0x2de>
    2e16:	88 ec       	ldi	r24, 0xC8	; 200
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	9a 8b       	std	Y+18, r25	; 0x12
    2e1c:	89 8b       	std	Y+17, r24	; 0x11
    2e1e:	89 89       	ldd	r24, Y+17	; 0x11
    2e20:	9a 89       	ldd	r25, Y+18	; 0x12
    2e22:	01 97       	sbiw	r24, 0x01	; 1
    2e24:	f1 f7       	brne	.-4      	; 0x2e22 <Converge_LED+0x2cc>
    2e26:	9a 8b       	std	Y+18, r25	; 0x12
    2e28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e2e:	01 97       	sbiw	r24, 0x01	; 1
    2e30:	9c 8b       	std	Y+20, r25	; 0x14
    2e32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e34:	8b 89       	ldd	r24, Y+19	; 0x13
    2e36:	9c 89       	ldd	r25, Y+20	; 0x14
    2e38:	00 97       	sbiw	r24, 0x00	; 0
    2e3a:	69 f7       	brne	.-38     	; 0x2e16 <Converge_LED+0x2c0>
    2e3c:	14 c0       	rjmp	.+40     	; 0x2e66 <Converge_LED+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e3e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e40:	7e 89       	ldd	r23, Y+22	; 0x16
    2e42:	8f 89       	ldd	r24, Y+23	; 0x17
    2e44:	98 8d       	ldd	r25, Y+24	; 0x18
    2e46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e4a:	dc 01       	movw	r26, r24
    2e4c:	cb 01       	movw	r24, r22
    2e4e:	9c 8b       	std	Y+20, r25	; 0x14
    2e50:	8b 8b       	std	Y+19, r24	; 0x13
    2e52:	8b 89       	ldd	r24, Y+19	; 0x13
    2e54:	9c 89       	ldd	r25, Y+20	; 0x14
    2e56:	98 8b       	std	Y+16, r25	; 0x10
    2e58:	8f 87       	std	Y+15, r24	; 0x0f
    2e5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e5c:	98 89       	ldd	r25, Y+16	; 0x10
    2e5e:	01 97       	sbiw	r24, 0x01	; 1
    2e60:	f1 f7       	brne	.-4      	; 0x2e5e <Converge_LED+0x308>
    2e62:	98 8b       	std	Y+16, r25	; 0x10
    2e64:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(300);

	LED_OFF(DIO_PORTA,DIO_PIN2);
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	62 e0       	ldi	r22, 0x02	; 2
    2e6a:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>
	LED_OFF(DIO_PORTA,DIO_PIN5);
    2e6e:	80 e0       	ldi	r24, 0x00	; 0
    2e70:	65 e0       	ldi	r22, 0x05	; 5
    2e72:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>

	LED_ON(DIO_PORTA,DIO_PIN3);
    2e76:	80 e0       	ldi	r24, 0x00	; 0
    2e78:	63 e0       	ldi	r22, 0x03	; 3
    2e7a:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
	LED_ON(DIO_PORTA,DIO_PIN4);
    2e7e:	80 e0       	ldi	r24, 0x00	; 0
    2e80:	64 e0       	ldi	r22, 0x04	; 4
    2e82:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    2e86:	80 e0       	ldi	r24, 0x00	; 0
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	a6 e9       	ldi	r26, 0x96	; 150
    2e8c:	b3 e4       	ldi	r27, 0x43	; 67
    2e8e:	8b 87       	std	Y+11, r24	; 0x0b
    2e90:	9c 87       	std	Y+12, r25	; 0x0c
    2e92:	ad 87       	std	Y+13, r26	; 0x0d
    2e94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e96:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e98:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	4a ef       	ldi	r20, 0xFA	; 250
    2ea4:	54 e4       	ldi	r21, 0x44	; 68
    2ea6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2eaa:	dc 01       	movw	r26, r24
    2eac:	cb 01       	movw	r24, r22
    2eae:	8f 83       	std	Y+7, r24	; 0x07
    2eb0:	98 87       	std	Y+8, r25	; 0x08
    2eb2:	a9 87       	std	Y+9, r26	; 0x09
    2eb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eb6:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb8:	78 85       	ldd	r23, Y+8	; 0x08
    2eba:	89 85       	ldd	r24, Y+9	; 0x09
    2ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ebe:	20 e0       	ldi	r18, 0x00	; 0
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	40 e8       	ldi	r20, 0x80	; 128
    2ec4:	5f e3       	ldi	r21, 0x3F	; 63
    2ec6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2eca:	88 23       	and	r24, r24
    2ecc:	2c f4       	brge	.+10     	; 0x2ed8 <Converge_LED+0x382>
		__ticks = 1;
    2ece:	81 e0       	ldi	r24, 0x01	; 1
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	9e 83       	std	Y+6, r25	; 0x06
    2ed4:	8d 83       	std	Y+5, r24	; 0x05
    2ed6:	3f c0       	rjmp	.+126    	; 0x2f56 <Converge_LED+0x400>
	else if (__tmp > 65535)
    2ed8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eda:	78 85       	ldd	r23, Y+8	; 0x08
    2edc:	89 85       	ldd	r24, Y+9	; 0x09
    2ede:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ee0:	20 e0       	ldi	r18, 0x00	; 0
    2ee2:	3f ef       	ldi	r19, 0xFF	; 255
    2ee4:	4f e7       	ldi	r20, 0x7F	; 127
    2ee6:	57 e4       	ldi	r21, 0x47	; 71
    2ee8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2eec:	18 16       	cp	r1, r24
    2eee:	4c f5       	brge	.+82     	; 0x2f42 <Converge_LED+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ef0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ef2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ef8:	20 e0       	ldi	r18, 0x00	; 0
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	40 e2       	ldi	r20, 0x20	; 32
    2efe:	51 e4       	ldi	r21, 0x41	; 65
    2f00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f04:	dc 01       	movw	r26, r24
    2f06:	cb 01       	movw	r24, r22
    2f08:	bc 01       	movw	r22, r24
    2f0a:	cd 01       	movw	r24, r26
    2f0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	9e 83       	std	Y+6, r25	; 0x06
    2f16:	8d 83       	std	Y+5, r24	; 0x05
    2f18:	0f c0       	rjmp	.+30     	; 0x2f38 <Converge_LED+0x3e2>
    2f1a:	88 ec       	ldi	r24, 0xC8	; 200
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	9c 83       	std	Y+4, r25	; 0x04
    2f20:	8b 83       	std	Y+3, r24	; 0x03
    2f22:	8b 81       	ldd	r24, Y+3	; 0x03
    2f24:	9c 81       	ldd	r25, Y+4	; 0x04
    2f26:	01 97       	sbiw	r24, 0x01	; 1
    2f28:	f1 f7       	brne	.-4      	; 0x2f26 <Converge_LED+0x3d0>
    2f2a:	9c 83       	std	Y+4, r25	; 0x04
    2f2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f30:	9e 81       	ldd	r25, Y+6	; 0x06
    2f32:	01 97       	sbiw	r24, 0x01	; 1
    2f34:	9e 83       	std	Y+6, r25	; 0x06
    2f36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f38:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f3c:	00 97       	sbiw	r24, 0x00	; 0
    2f3e:	69 f7       	brne	.-38     	; 0x2f1a <Converge_LED+0x3c4>
    2f40:	14 c0       	rjmp	.+40     	; 0x2f6a <Converge_LED+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f42:	6f 81       	ldd	r22, Y+7	; 0x07
    2f44:	78 85       	ldd	r23, Y+8	; 0x08
    2f46:	89 85       	ldd	r24, Y+9	; 0x09
    2f48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	cb 01       	movw	r24, r22
    2f52:	9e 83       	std	Y+6, r25	; 0x06
    2f54:	8d 83       	std	Y+5, r24	; 0x05
    2f56:	8d 81       	ldd	r24, Y+5	; 0x05
    2f58:	9e 81       	ldd	r25, Y+6	; 0x06
    2f5a:	9a 83       	std	Y+2, r25	; 0x02
    2f5c:	89 83       	std	Y+1, r24	; 0x01
    2f5e:	89 81       	ldd	r24, Y+1	; 0x01
    2f60:	9a 81       	ldd	r25, Y+2	; 0x02
    2f62:	01 97       	sbiw	r24, 0x01	; 1
    2f64:	f1 f7       	brne	.-4      	; 0x2f62 <Converge_LED+0x40c>
    2f66:	9a 83       	std	Y+2, r25	; 0x02
    2f68:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);

	LED_OFF(DIO_PORTA,DIO_PIN3);
    2f6a:	80 e0       	ldi	r24, 0x00	; 0
    2f6c:	63 e0       	ldi	r22, 0x03	; 3
    2f6e:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>
	LED_OFF(DIO_PORTA,DIO_PIN4);
    2f72:	80 e0       	ldi	r24, 0x00	; 0
    2f74:	64 e0       	ldi	r22, 0x04	; 4
    2f76:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>
}
    2f7a:	e8 96       	adiw	r28, 0x38	; 56
    2f7c:	0f b6       	in	r0, 0x3f	; 63
    2f7e:	f8 94       	cli
    2f80:	de bf       	out	0x3e, r29	; 62
    2f82:	0f be       	out	0x3f, r0	; 63
    2f84:	cd bf       	out	0x3d, r28	; 61
    2f86:	cf 91       	pop	r28
    2f88:	df 91       	pop	r29
    2f8a:	08 95       	ret

00002f8c <Diverge_LED>:


/*****************************************************************************/
void Diverge_LED(void)
{
    2f8c:	df 93       	push	r29
    2f8e:	cf 93       	push	r28
    2f90:	cd b7       	in	r28, 0x3d	; 61
    2f92:	de b7       	in	r29, 0x3e	; 62
    2f94:	e8 97       	sbiw	r28, 0x38	; 56
    2f96:	0f b6       	in	r0, 0x3f	; 63
    2f98:	f8 94       	cli
    2f9a:	de bf       	out	0x3e, r29	; 62
    2f9c:	0f be       	out	0x3f, r0	; 63
    2f9e:	cd bf       	out	0x3d, r28	; 61
	LED_ON(DIO_PORTA,DIO_PIN3);
    2fa0:	80 e0       	ldi	r24, 0x00	; 0
    2fa2:	63 e0       	ldi	r22, 0x03	; 3
    2fa4:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
	LED_ON(DIO_PORTA,DIO_PIN4);
    2fa8:	80 e0       	ldi	r24, 0x00	; 0
    2faa:	64 e0       	ldi	r22, 0x04	; 4
    2fac:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	a6 e9       	ldi	r26, 0x96	; 150
    2fb6:	b3 e4       	ldi	r27, 0x43	; 67
    2fb8:	8d ab       	std	Y+53, r24	; 0x35
    2fba:	9e ab       	std	Y+54, r25	; 0x36
    2fbc:	af ab       	std	Y+55, r26	; 0x37
    2fbe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fc0:	6d a9       	ldd	r22, Y+53	; 0x35
    2fc2:	7e a9       	ldd	r23, Y+54	; 0x36
    2fc4:	8f a9       	ldd	r24, Y+55	; 0x37
    2fc6:	98 ad       	ldd	r25, Y+56	; 0x38
    2fc8:	20 e0       	ldi	r18, 0x00	; 0
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	4a ef       	ldi	r20, 0xFA	; 250
    2fce:	54 e4       	ldi	r21, 0x44	; 68
    2fd0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	89 ab       	std	Y+49, r24	; 0x31
    2fda:	9a ab       	std	Y+50, r25	; 0x32
    2fdc:	ab ab       	std	Y+51, r26	; 0x33
    2fde:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2fe0:	69 a9       	ldd	r22, Y+49	; 0x31
    2fe2:	7a a9       	ldd	r23, Y+50	; 0x32
    2fe4:	8b a9       	ldd	r24, Y+51	; 0x33
    2fe6:	9c a9       	ldd	r25, Y+52	; 0x34
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	40 e8       	ldi	r20, 0x80	; 128
    2fee:	5f e3       	ldi	r21, 0x3F	; 63
    2ff0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2ff4:	88 23       	and	r24, r24
    2ff6:	2c f4       	brge	.+10     	; 0x3002 <Diverge_LED+0x76>
		__ticks = 1;
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	98 ab       	std	Y+48, r25	; 0x30
    2ffe:	8f a7       	std	Y+47, r24	; 0x2f
    3000:	3f c0       	rjmp	.+126    	; 0x3080 <Diverge_LED+0xf4>
	else if (__tmp > 65535)
    3002:	69 a9       	ldd	r22, Y+49	; 0x31
    3004:	7a a9       	ldd	r23, Y+50	; 0x32
    3006:	8b a9       	ldd	r24, Y+51	; 0x33
    3008:	9c a9       	ldd	r25, Y+52	; 0x34
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	3f ef       	ldi	r19, 0xFF	; 255
    300e:	4f e7       	ldi	r20, 0x7F	; 127
    3010:	57 e4       	ldi	r21, 0x47	; 71
    3012:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3016:	18 16       	cp	r1, r24
    3018:	4c f5       	brge	.+82     	; 0x306c <Diverge_LED+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    301a:	6d a9       	ldd	r22, Y+53	; 0x35
    301c:	7e a9       	ldd	r23, Y+54	; 0x36
    301e:	8f a9       	ldd	r24, Y+55	; 0x37
    3020:	98 ad       	ldd	r25, Y+56	; 0x38
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	40 e2       	ldi	r20, 0x20	; 32
    3028:	51 e4       	ldi	r21, 0x41	; 65
    302a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    302e:	dc 01       	movw	r26, r24
    3030:	cb 01       	movw	r24, r22
    3032:	bc 01       	movw	r22, r24
    3034:	cd 01       	movw	r24, r26
    3036:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	98 ab       	std	Y+48, r25	; 0x30
    3040:	8f a7       	std	Y+47, r24	; 0x2f
    3042:	0f c0       	rjmp	.+30     	; 0x3062 <Diverge_LED+0xd6>
    3044:	88 ec       	ldi	r24, 0xC8	; 200
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	9e a7       	std	Y+46, r25	; 0x2e
    304a:	8d a7       	std	Y+45, r24	; 0x2d
    304c:	8d a5       	ldd	r24, Y+45	; 0x2d
    304e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3050:	01 97       	sbiw	r24, 0x01	; 1
    3052:	f1 f7       	brne	.-4      	; 0x3050 <Diverge_LED+0xc4>
    3054:	9e a7       	std	Y+46, r25	; 0x2e
    3056:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3058:	8f a5       	ldd	r24, Y+47	; 0x2f
    305a:	98 a9       	ldd	r25, Y+48	; 0x30
    305c:	01 97       	sbiw	r24, 0x01	; 1
    305e:	98 ab       	std	Y+48, r25	; 0x30
    3060:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3062:	8f a5       	ldd	r24, Y+47	; 0x2f
    3064:	98 a9       	ldd	r25, Y+48	; 0x30
    3066:	00 97       	sbiw	r24, 0x00	; 0
    3068:	69 f7       	brne	.-38     	; 0x3044 <Diverge_LED+0xb8>
    306a:	14 c0       	rjmp	.+40     	; 0x3094 <Diverge_LED+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    306c:	69 a9       	ldd	r22, Y+49	; 0x31
    306e:	7a a9       	ldd	r23, Y+50	; 0x32
    3070:	8b a9       	ldd	r24, Y+51	; 0x33
    3072:	9c a9       	ldd	r25, Y+52	; 0x34
    3074:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3078:	dc 01       	movw	r26, r24
    307a:	cb 01       	movw	r24, r22
    307c:	98 ab       	std	Y+48, r25	; 0x30
    307e:	8f a7       	std	Y+47, r24	; 0x2f
    3080:	8f a5       	ldd	r24, Y+47	; 0x2f
    3082:	98 a9       	ldd	r25, Y+48	; 0x30
    3084:	9c a7       	std	Y+44, r25	; 0x2c
    3086:	8b a7       	std	Y+43, r24	; 0x2b
    3088:	8b a5       	ldd	r24, Y+43	; 0x2b
    308a:	9c a5       	ldd	r25, Y+44	; 0x2c
    308c:	01 97       	sbiw	r24, 0x01	; 1
    308e:	f1 f7       	brne	.-4      	; 0x308c <Diverge_LED+0x100>
    3090:	9c a7       	std	Y+44, r25	; 0x2c
    3092:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(300);

	LED_OFF(DIO_PORTA,DIO_PIN3);
    3094:	80 e0       	ldi	r24, 0x00	; 0
    3096:	63 e0       	ldi	r22, 0x03	; 3
    3098:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>
	LED_OFF(DIO_PORTA,DIO_PIN4);
    309c:	80 e0       	ldi	r24, 0x00	; 0
    309e:	64 e0       	ldi	r22, 0x04	; 4
    30a0:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>

	LED_ON(DIO_PORTA,DIO_PIN2);
    30a4:	80 e0       	ldi	r24, 0x00	; 0
    30a6:	62 e0       	ldi	r22, 0x02	; 2
    30a8:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
	LED_ON(DIO_PORTA,DIO_PIN5);
    30ac:	80 e0       	ldi	r24, 0x00	; 0
    30ae:	65 e0       	ldi	r22, 0x05	; 5
    30b0:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	a6 e9       	ldi	r26, 0x96	; 150
    30ba:	b3 e4       	ldi	r27, 0x43	; 67
    30bc:	8f a3       	std	Y+39, r24	; 0x27
    30be:	98 a7       	std	Y+40, r25	; 0x28
    30c0:	a9 a7       	std	Y+41, r26	; 0x29
    30c2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30c4:	6f a1       	ldd	r22, Y+39	; 0x27
    30c6:	78 a5       	ldd	r23, Y+40	; 0x28
    30c8:	89 a5       	ldd	r24, Y+41	; 0x29
    30ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	4a ef       	ldi	r20, 0xFA	; 250
    30d2:	54 e4       	ldi	r21, 0x44	; 68
    30d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30d8:	dc 01       	movw	r26, r24
    30da:	cb 01       	movw	r24, r22
    30dc:	8b a3       	std	Y+35, r24	; 0x23
    30de:	9c a3       	std	Y+36, r25	; 0x24
    30e0:	ad a3       	std	Y+37, r26	; 0x25
    30e2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30e4:	6b a1       	ldd	r22, Y+35	; 0x23
    30e6:	7c a1       	ldd	r23, Y+36	; 0x24
    30e8:	8d a1       	ldd	r24, Y+37	; 0x25
    30ea:	9e a1       	ldd	r25, Y+38	; 0x26
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	40 e8       	ldi	r20, 0x80	; 128
    30f2:	5f e3       	ldi	r21, 0x3F	; 63
    30f4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    30f8:	88 23       	and	r24, r24
    30fa:	2c f4       	brge	.+10     	; 0x3106 <Diverge_LED+0x17a>
		__ticks = 1;
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	9a a3       	std	Y+34, r25	; 0x22
    3102:	89 a3       	std	Y+33, r24	; 0x21
    3104:	3f c0       	rjmp	.+126    	; 0x3184 <Diverge_LED+0x1f8>
	else if (__tmp > 65535)
    3106:	6b a1       	ldd	r22, Y+35	; 0x23
    3108:	7c a1       	ldd	r23, Y+36	; 0x24
    310a:	8d a1       	ldd	r24, Y+37	; 0x25
    310c:	9e a1       	ldd	r25, Y+38	; 0x26
    310e:	20 e0       	ldi	r18, 0x00	; 0
    3110:	3f ef       	ldi	r19, 0xFF	; 255
    3112:	4f e7       	ldi	r20, 0x7F	; 127
    3114:	57 e4       	ldi	r21, 0x47	; 71
    3116:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    311a:	18 16       	cp	r1, r24
    311c:	4c f5       	brge	.+82     	; 0x3170 <Diverge_LED+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    311e:	6f a1       	ldd	r22, Y+39	; 0x27
    3120:	78 a5       	ldd	r23, Y+40	; 0x28
    3122:	89 a5       	ldd	r24, Y+41	; 0x29
    3124:	9a a5       	ldd	r25, Y+42	; 0x2a
    3126:	20 e0       	ldi	r18, 0x00	; 0
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	40 e2       	ldi	r20, 0x20	; 32
    312c:	51 e4       	ldi	r21, 0x41	; 65
    312e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22
    3136:	bc 01       	movw	r22, r24
    3138:	cd 01       	movw	r24, r26
    313a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    313e:	dc 01       	movw	r26, r24
    3140:	cb 01       	movw	r24, r22
    3142:	9a a3       	std	Y+34, r25	; 0x22
    3144:	89 a3       	std	Y+33, r24	; 0x21
    3146:	0f c0       	rjmp	.+30     	; 0x3166 <Diverge_LED+0x1da>
    3148:	88 ec       	ldi	r24, 0xC8	; 200
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	98 a3       	std	Y+32, r25	; 0x20
    314e:	8f 8f       	std	Y+31, r24	; 0x1f
    3150:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3152:	98 a1       	ldd	r25, Y+32	; 0x20
    3154:	01 97       	sbiw	r24, 0x01	; 1
    3156:	f1 f7       	brne	.-4      	; 0x3154 <Diverge_LED+0x1c8>
    3158:	98 a3       	std	Y+32, r25	; 0x20
    315a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    315c:	89 a1       	ldd	r24, Y+33	; 0x21
    315e:	9a a1       	ldd	r25, Y+34	; 0x22
    3160:	01 97       	sbiw	r24, 0x01	; 1
    3162:	9a a3       	std	Y+34, r25	; 0x22
    3164:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3166:	89 a1       	ldd	r24, Y+33	; 0x21
    3168:	9a a1       	ldd	r25, Y+34	; 0x22
    316a:	00 97       	sbiw	r24, 0x00	; 0
    316c:	69 f7       	brne	.-38     	; 0x3148 <Diverge_LED+0x1bc>
    316e:	14 c0       	rjmp	.+40     	; 0x3198 <Diverge_LED+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3170:	6b a1       	ldd	r22, Y+35	; 0x23
    3172:	7c a1       	ldd	r23, Y+36	; 0x24
    3174:	8d a1       	ldd	r24, Y+37	; 0x25
    3176:	9e a1       	ldd	r25, Y+38	; 0x26
    3178:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	9a a3       	std	Y+34, r25	; 0x22
    3182:	89 a3       	std	Y+33, r24	; 0x21
    3184:	89 a1       	ldd	r24, Y+33	; 0x21
    3186:	9a a1       	ldd	r25, Y+34	; 0x22
    3188:	9e 8f       	std	Y+30, r25	; 0x1e
    318a:	8d 8f       	std	Y+29, r24	; 0x1d
    318c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    318e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3190:	01 97       	sbiw	r24, 0x01	; 1
    3192:	f1 f7       	brne	.-4      	; 0x3190 <Diverge_LED+0x204>
    3194:	9e 8f       	std	Y+30, r25	; 0x1e
    3196:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(300);

	LED_OFF(DIO_PORTA,DIO_PIN2);
    3198:	80 e0       	ldi	r24, 0x00	; 0
    319a:	62 e0       	ldi	r22, 0x02	; 2
    319c:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>
	LED_OFF(DIO_PORTA,DIO_PIN5);
    31a0:	80 e0       	ldi	r24, 0x00	; 0
    31a2:	65 e0       	ldi	r22, 0x05	; 5
    31a4:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>

	LED_ON(DIO_PORTA,DIO_PIN1);
    31a8:	80 e0       	ldi	r24, 0x00	; 0
    31aa:	61 e0       	ldi	r22, 0x01	; 1
    31ac:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
	LED_ON(DIO_PORTA,DIO_PIN6);
    31b0:	80 e0       	ldi	r24, 0x00	; 0
    31b2:	66 e0       	ldi	r22, 0x06	; 6
    31b4:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    31b8:	80 e0       	ldi	r24, 0x00	; 0
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	a6 e9       	ldi	r26, 0x96	; 150
    31be:	b3 e4       	ldi	r27, 0x43	; 67
    31c0:	89 8f       	std	Y+25, r24	; 0x19
    31c2:	9a 8f       	std	Y+26, r25	; 0x1a
    31c4:	ab 8f       	std	Y+27, r26	; 0x1b
    31c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31c8:	69 8d       	ldd	r22, Y+25	; 0x19
    31ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31d0:	20 e0       	ldi	r18, 0x00	; 0
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	4a ef       	ldi	r20, 0xFA	; 250
    31d6:	54 e4       	ldi	r21, 0x44	; 68
    31d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31dc:	dc 01       	movw	r26, r24
    31de:	cb 01       	movw	r24, r22
    31e0:	8d 8b       	std	Y+21, r24	; 0x15
    31e2:	9e 8b       	std	Y+22, r25	; 0x16
    31e4:	af 8b       	std	Y+23, r26	; 0x17
    31e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31e8:	6d 89       	ldd	r22, Y+21	; 0x15
    31ea:	7e 89       	ldd	r23, Y+22	; 0x16
    31ec:	8f 89       	ldd	r24, Y+23	; 0x17
    31ee:	98 8d       	ldd	r25, Y+24	; 0x18
    31f0:	20 e0       	ldi	r18, 0x00	; 0
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	40 e8       	ldi	r20, 0x80	; 128
    31f6:	5f e3       	ldi	r21, 0x3F	; 63
    31f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    31fc:	88 23       	and	r24, r24
    31fe:	2c f4       	brge	.+10     	; 0x320a <Diverge_LED+0x27e>
		__ticks = 1;
    3200:	81 e0       	ldi	r24, 0x01	; 1
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	9c 8b       	std	Y+20, r25	; 0x14
    3206:	8b 8b       	std	Y+19, r24	; 0x13
    3208:	3f c0       	rjmp	.+126    	; 0x3288 <Diverge_LED+0x2fc>
	else if (__tmp > 65535)
    320a:	6d 89       	ldd	r22, Y+21	; 0x15
    320c:	7e 89       	ldd	r23, Y+22	; 0x16
    320e:	8f 89       	ldd	r24, Y+23	; 0x17
    3210:	98 8d       	ldd	r25, Y+24	; 0x18
    3212:	20 e0       	ldi	r18, 0x00	; 0
    3214:	3f ef       	ldi	r19, 0xFF	; 255
    3216:	4f e7       	ldi	r20, 0x7F	; 127
    3218:	57 e4       	ldi	r21, 0x47	; 71
    321a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    321e:	18 16       	cp	r1, r24
    3220:	4c f5       	brge	.+82     	; 0x3274 <Diverge_LED+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3222:	69 8d       	ldd	r22, Y+25	; 0x19
    3224:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3226:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3228:	9c 8d       	ldd	r25, Y+28	; 0x1c
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	30 e0       	ldi	r19, 0x00	; 0
    322e:	40 e2       	ldi	r20, 0x20	; 32
    3230:	51 e4       	ldi	r21, 0x41	; 65
    3232:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3236:	dc 01       	movw	r26, r24
    3238:	cb 01       	movw	r24, r22
    323a:	bc 01       	movw	r22, r24
    323c:	cd 01       	movw	r24, r26
    323e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3242:	dc 01       	movw	r26, r24
    3244:	cb 01       	movw	r24, r22
    3246:	9c 8b       	std	Y+20, r25	; 0x14
    3248:	8b 8b       	std	Y+19, r24	; 0x13
    324a:	0f c0       	rjmp	.+30     	; 0x326a <Diverge_LED+0x2de>
    324c:	88 ec       	ldi	r24, 0xC8	; 200
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	9a 8b       	std	Y+18, r25	; 0x12
    3252:	89 8b       	std	Y+17, r24	; 0x11
    3254:	89 89       	ldd	r24, Y+17	; 0x11
    3256:	9a 89       	ldd	r25, Y+18	; 0x12
    3258:	01 97       	sbiw	r24, 0x01	; 1
    325a:	f1 f7       	brne	.-4      	; 0x3258 <Diverge_LED+0x2cc>
    325c:	9a 8b       	std	Y+18, r25	; 0x12
    325e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3260:	8b 89       	ldd	r24, Y+19	; 0x13
    3262:	9c 89       	ldd	r25, Y+20	; 0x14
    3264:	01 97       	sbiw	r24, 0x01	; 1
    3266:	9c 8b       	std	Y+20, r25	; 0x14
    3268:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    326a:	8b 89       	ldd	r24, Y+19	; 0x13
    326c:	9c 89       	ldd	r25, Y+20	; 0x14
    326e:	00 97       	sbiw	r24, 0x00	; 0
    3270:	69 f7       	brne	.-38     	; 0x324c <Diverge_LED+0x2c0>
    3272:	14 c0       	rjmp	.+40     	; 0x329c <Diverge_LED+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3274:	6d 89       	ldd	r22, Y+21	; 0x15
    3276:	7e 89       	ldd	r23, Y+22	; 0x16
    3278:	8f 89       	ldd	r24, Y+23	; 0x17
    327a:	98 8d       	ldd	r25, Y+24	; 0x18
    327c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	9c 8b       	std	Y+20, r25	; 0x14
    3286:	8b 8b       	std	Y+19, r24	; 0x13
    3288:	8b 89       	ldd	r24, Y+19	; 0x13
    328a:	9c 89       	ldd	r25, Y+20	; 0x14
    328c:	98 8b       	std	Y+16, r25	; 0x10
    328e:	8f 87       	std	Y+15, r24	; 0x0f
    3290:	8f 85       	ldd	r24, Y+15	; 0x0f
    3292:	98 89       	ldd	r25, Y+16	; 0x10
    3294:	01 97       	sbiw	r24, 0x01	; 1
    3296:	f1 f7       	brne	.-4      	; 0x3294 <Diverge_LED+0x308>
    3298:	98 8b       	std	Y+16, r25	; 0x10
    329a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(300);

	LED_OFF(DIO_PORTA,DIO_PIN1);
    329c:	80 e0       	ldi	r24, 0x00	; 0
    329e:	61 e0       	ldi	r22, 0x01	; 1
    32a0:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>
	LED_OFF(DIO_PORTA,DIO_PIN6);
    32a4:	80 e0       	ldi	r24, 0x00	; 0
    32a6:	66 e0       	ldi	r22, 0x06	; 6
    32a8:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>

	LED_ON(DIO_PORTA,DIO_PIN0);
    32ac:	80 e0       	ldi	r24, 0x00	; 0
    32ae:	60 e0       	ldi	r22, 0x00	; 0
    32b0:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
	LED_ON(DIO_PORTA,DIO_PIN7);
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	67 e0       	ldi	r22, 0x07	; 7
    32b8:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    32bc:	80 e0       	ldi	r24, 0x00	; 0
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	a6 e9       	ldi	r26, 0x96	; 150
    32c2:	b3 e4       	ldi	r27, 0x43	; 67
    32c4:	8b 87       	std	Y+11, r24	; 0x0b
    32c6:	9c 87       	std	Y+12, r25	; 0x0c
    32c8:	ad 87       	std	Y+13, r26	; 0x0d
    32ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    32d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    32d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    32d4:	20 e0       	ldi	r18, 0x00	; 0
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	4a ef       	ldi	r20, 0xFA	; 250
    32da:	54 e4       	ldi	r21, 0x44	; 68
    32dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32e0:	dc 01       	movw	r26, r24
    32e2:	cb 01       	movw	r24, r22
    32e4:	8f 83       	std	Y+7, r24	; 0x07
    32e6:	98 87       	std	Y+8, r25	; 0x08
    32e8:	a9 87       	std	Y+9, r26	; 0x09
    32ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32ec:	6f 81       	ldd	r22, Y+7	; 0x07
    32ee:	78 85       	ldd	r23, Y+8	; 0x08
    32f0:	89 85       	ldd	r24, Y+9	; 0x09
    32f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    32f4:	20 e0       	ldi	r18, 0x00	; 0
    32f6:	30 e0       	ldi	r19, 0x00	; 0
    32f8:	40 e8       	ldi	r20, 0x80	; 128
    32fa:	5f e3       	ldi	r21, 0x3F	; 63
    32fc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3300:	88 23       	and	r24, r24
    3302:	2c f4       	brge	.+10     	; 0x330e <Diverge_LED+0x382>
		__ticks = 1;
    3304:	81 e0       	ldi	r24, 0x01	; 1
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	9e 83       	std	Y+6, r25	; 0x06
    330a:	8d 83       	std	Y+5, r24	; 0x05
    330c:	3f c0       	rjmp	.+126    	; 0x338c <Diverge_LED+0x400>
	else if (__tmp > 65535)
    330e:	6f 81       	ldd	r22, Y+7	; 0x07
    3310:	78 85       	ldd	r23, Y+8	; 0x08
    3312:	89 85       	ldd	r24, Y+9	; 0x09
    3314:	9a 85       	ldd	r25, Y+10	; 0x0a
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	3f ef       	ldi	r19, 0xFF	; 255
    331a:	4f e7       	ldi	r20, 0x7F	; 127
    331c:	57 e4       	ldi	r21, 0x47	; 71
    331e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3322:	18 16       	cp	r1, r24
    3324:	4c f5       	brge	.+82     	; 0x3378 <Diverge_LED+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3326:	6b 85       	ldd	r22, Y+11	; 0x0b
    3328:	7c 85       	ldd	r23, Y+12	; 0x0c
    332a:	8d 85       	ldd	r24, Y+13	; 0x0d
    332c:	9e 85       	ldd	r25, Y+14	; 0x0e
    332e:	20 e0       	ldi	r18, 0x00	; 0
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	40 e2       	ldi	r20, 0x20	; 32
    3334:	51 e4       	ldi	r21, 0x41	; 65
    3336:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    333a:	dc 01       	movw	r26, r24
    333c:	cb 01       	movw	r24, r22
    333e:	bc 01       	movw	r22, r24
    3340:	cd 01       	movw	r24, r26
    3342:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3346:	dc 01       	movw	r26, r24
    3348:	cb 01       	movw	r24, r22
    334a:	9e 83       	std	Y+6, r25	; 0x06
    334c:	8d 83       	std	Y+5, r24	; 0x05
    334e:	0f c0       	rjmp	.+30     	; 0x336e <Diverge_LED+0x3e2>
    3350:	88 ec       	ldi	r24, 0xC8	; 200
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	9c 83       	std	Y+4, r25	; 0x04
    3356:	8b 83       	std	Y+3, r24	; 0x03
    3358:	8b 81       	ldd	r24, Y+3	; 0x03
    335a:	9c 81       	ldd	r25, Y+4	; 0x04
    335c:	01 97       	sbiw	r24, 0x01	; 1
    335e:	f1 f7       	brne	.-4      	; 0x335c <Diverge_LED+0x3d0>
    3360:	9c 83       	std	Y+4, r25	; 0x04
    3362:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3364:	8d 81       	ldd	r24, Y+5	; 0x05
    3366:	9e 81       	ldd	r25, Y+6	; 0x06
    3368:	01 97       	sbiw	r24, 0x01	; 1
    336a:	9e 83       	std	Y+6, r25	; 0x06
    336c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    336e:	8d 81       	ldd	r24, Y+5	; 0x05
    3370:	9e 81       	ldd	r25, Y+6	; 0x06
    3372:	00 97       	sbiw	r24, 0x00	; 0
    3374:	69 f7       	brne	.-38     	; 0x3350 <Diverge_LED+0x3c4>
    3376:	14 c0       	rjmp	.+40     	; 0x33a0 <Diverge_LED+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3378:	6f 81       	ldd	r22, Y+7	; 0x07
    337a:	78 85       	ldd	r23, Y+8	; 0x08
    337c:	89 85       	ldd	r24, Y+9	; 0x09
    337e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3380:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3384:	dc 01       	movw	r26, r24
    3386:	cb 01       	movw	r24, r22
    3388:	9e 83       	std	Y+6, r25	; 0x06
    338a:	8d 83       	std	Y+5, r24	; 0x05
    338c:	8d 81       	ldd	r24, Y+5	; 0x05
    338e:	9e 81       	ldd	r25, Y+6	; 0x06
    3390:	9a 83       	std	Y+2, r25	; 0x02
    3392:	89 83       	std	Y+1, r24	; 0x01
    3394:	89 81       	ldd	r24, Y+1	; 0x01
    3396:	9a 81       	ldd	r25, Y+2	; 0x02
    3398:	01 97       	sbiw	r24, 0x01	; 1
    339a:	f1 f7       	brne	.-4      	; 0x3398 <Diverge_LED+0x40c>
    339c:	9a 83       	std	Y+2, r25	; 0x02
    339e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);

	LED_OFF(DIO_PORTA,DIO_PIN0);
    33a0:	80 e0       	ldi	r24, 0x00	; 0
    33a2:	60 e0       	ldi	r22, 0x00	; 0
    33a4:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>
	LED_OFF(DIO_PORTA,DIO_PIN7);
    33a8:	80 e0       	ldi	r24, 0x00	; 0
    33aa:	67 e0       	ldi	r22, 0x07	; 7
    33ac:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>

}
    33b0:	e8 96       	adiw	r28, 0x38	; 56
    33b2:	0f b6       	in	r0, 0x3f	; 63
    33b4:	f8 94       	cli
    33b6:	de bf       	out	0x3e, r29	; 62
    33b8:	0f be       	out	0x3f, r0	; 63
    33ba:	cd bf       	out	0x3d, r28	; 61
    33bc:	cf 91       	pop	r28
    33be:	df 91       	pop	r29
    33c0:	08 95       	ret

000033c2 <Ping_pong_LED>:


/*****************************************************************************/
void Ping_pong_LED(void)
{
    33c2:	df 93       	push	r29
    33c4:	cf 93       	push	r28
    33c6:	cd b7       	in	r28, 0x3d	; 61
    33c8:	de b7       	in	r29, 0x3e	; 62
	shift_UP_DOWN();
    33ca:	0e 94 2d 0c 	call	0x185a	; 0x185a <shift_UP_DOWN>
	shift_DOWN_UP();
    33ce:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <shift_DOWN_UP>
}
    33d2:	cf 91       	pop	r28
    33d4:	df 91       	pop	r29
    33d6:	08 95       	ret

000033d8 <Increment_LED>:


/*****************************************************************************/
void Increment_LED(void)
{
    33d8:	0f 93       	push	r16
    33da:	1f 93       	push	r17
    33dc:	df 93       	push	r29
    33de:	cf 93       	push	r28
    33e0:	cd b7       	in	r28, 0x3d	; 61
    33e2:	de b7       	in	r29, 0x3e	; 62
    33e4:	c0 5e       	subi	r28, 0xE0	; 224
    33e6:	d0 40       	sbci	r29, 0x00	; 0
    33e8:	0f b6       	in	r0, 0x3f	; 63
    33ea:	f8 94       	cli
    33ec:	de bf       	out	0x3e, r29	; 62
    33ee:	0f be       	out	0x3f, r0	; 63
    33f0:	cd bf       	out	0x3d, r28	; 61
	LED_ON(DIO_PORTA,DIO_PIN0);
    33f2:	80 e0       	ldi	r24, 0x00	; 0
    33f4:	60 e0       	ldi	r22, 0x00	; 0
    33f6:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    33fa:	fe 01       	movw	r30, r28
    33fc:	e3 52       	subi	r30, 0x23	; 35
    33fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3400:	80 e0       	ldi	r24, 0x00	; 0
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	a6 e9       	ldi	r26, 0x96	; 150
    3406:	b3 e4       	ldi	r27, 0x43	; 67
    3408:	80 83       	st	Z, r24
    340a:	91 83       	std	Z+1, r25	; 0x01
    340c:	a2 83       	std	Z+2, r26	; 0x02
    340e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3410:	8e 01       	movw	r16, r28
    3412:	07 52       	subi	r16, 0x27	; 39
    3414:	1f 4f       	sbci	r17, 0xFF	; 255
    3416:	fe 01       	movw	r30, r28
    3418:	e3 52       	subi	r30, 0x23	; 35
    341a:	ff 4f       	sbci	r31, 0xFF	; 255
    341c:	60 81       	ld	r22, Z
    341e:	71 81       	ldd	r23, Z+1	; 0x01
    3420:	82 81       	ldd	r24, Z+2	; 0x02
    3422:	93 81       	ldd	r25, Z+3	; 0x03
    3424:	20 e0       	ldi	r18, 0x00	; 0
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	4a ef       	ldi	r20, 0xFA	; 250
    342a:	54 e4       	ldi	r21, 0x44	; 68
    342c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3430:	dc 01       	movw	r26, r24
    3432:	cb 01       	movw	r24, r22
    3434:	f8 01       	movw	r30, r16
    3436:	80 83       	st	Z, r24
    3438:	91 83       	std	Z+1, r25	; 0x01
    343a:	a2 83       	std	Z+2, r26	; 0x02
    343c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    343e:	fe 01       	movw	r30, r28
    3440:	e7 52       	subi	r30, 0x27	; 39
    3442:	ff 4f       	sbci	r31, 0xFF	; 255
    3444:	60 81       	ld	r22, Z
    3446:	71 81       	ldd	r23, Z+1	; 0x01
    3448:	82 81       	ldd	r24, Z+2	; 0x02
    344a:	93 81       	ldd	r25, Z+3	; 0x03
    344c:	20 e0       	ldi	r18, 0x00	; 0
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	40 e8       	ldi	r20, 0x80	; 128
    3452:	5f e3       	ldi	r21, 0x3F	; 63
    3454:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3458:	88 23       	and	r24, r24
    345a:	44 f4       	brge	.+16     	; 0x346c <Increment_LED+0x94>
		__ticks = 1;
    345c:	fe 01       	movw	r30, r28
    345e:	e9 52       	subi	r30, 0x29	; 41
    3460:	ff 4f       	sbci	r31, 0xFF	; 255
    3462:	81 e0       	ldi	r24, 0x01	; 1
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	91 83       	std	Z+1, r25	; 0x01
    3468:	80 83       	st	Z, r24
    346a:	64 c0       	rjmp	.+200    	; 0x3534 <Increment_LED+0x15c>
	else if (__tmp > 65535)
    346c:	fe 01       	movw	r30, r28
    346e:	e7 52       	subi	r30, 0x27	; 39
    3470:	ff 4f       	sbci	r31, 0xFF	; 255
    3472:	60 81       	ld	r22, Z
    3474:	71 81       	ldd	r23, Z+1	; 0x01
    3476:	82 81       	ldd	r24, Z+2	; 0x02
    3478:	93 81       	ldd	r25, Z+3	; 0x03
    347a:	20 e0       	ldi	r18, 0x00	; 0
    347c:	3f ef       	ldi	r19, 0xFF	; 255
    347e:	4f e7       	ldi	r20, 0x7F	; 127
    3480:	57 e4       	ldi	r21, 0x47	; 71
    3482:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3486:	18 16       	cp	r1, r24
    3488:	0c f0       	brlt	.+2      	; 0x348c <Increment_LED+0xb4>
    348a:	43 c0       	rjmp	.+134    	; 0x3512 <Increment_LED+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    348c:	fe 01       	movw	r30, r28
    348e:	e3 52       	subi	r30, 0x23	; 35
    3490:	ff 4f       	sbci	r31, 0xFF	; 255
    3492:	60 81       	ld	r22, Z
    3494:	71 81       	ldd	r23, Z+1	; 0x01
    3496:	82 81       	ldd	r24, Z+2	; 0x02
    3498:	93 81       	ldd	r25, Z+3	; 0x03
    349a:	20 e0       	ldi	r18, 0x00	; 0
    349c:	30 e0       	ldi	r19, 0x00	; 0
    349e:	40 e2       	ldi	r20, 0x20	; 32
    34a0:	51 e4       	ldi	r21, 0x41	; 65
    34a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    34a6:	dc 01       	movw	r26, r24
    34a8:	cb 01       	movw	r24, r22
    34aa:	8e 01       	movw	r16, r28
    34ac:	09 52       	subi	r16, 0x29	; 41
    34ae:	1f 4f       	sbci	r17, 0xFF	; 255
    34b0:	bc 01       	movw	r22, r24
    34b2:	cd 01       	movw	r24, r26
    34b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34b8:	dc 01       	movw	r26, r24
    34ba:	cb 01       	movw	r24, r22
    34bc:	f8 01       	movw	r30, r16
    34be:	91 83       	std	Z+1, r25	; 0x01
    34c0:	80 83       	st	Z, r24
    34c2:	1f c0       	rjmp	.+62     	; 0x3502 <Increment_LED+0x12a>
    34c4:	fe 01       	movw	r30, r28
    34c6:	eb 52       	subi	r30, 0x2B	; 43
    34c8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ca:	88 ec       	ldi	r24, 0xC8	; 200
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	91 83       	std	Z+1, r25	; 0x01
    34d0:	80 83       	st	Z, r24
    34d2:	fe 01       	movw	r30, r28
    34d4:	eb 52       	subi	r30, 0x2B	; 43
    34d6:	ff 4f       	sbci	r31, 0xFF	; 255
    34d8:	80 81       	ld	r24, Z
    34da:	91 81       	ldd	r25, Z+1	; 0x01
    34dc:	01 97       	sbiw	r24, 0x01	; 1
    34de:	f1 f7       	brne	.-4      	; 0x34dc <Increment_LED+0x104>
    34e0:	fe 01       	movw	r30, r28
    34e2:	eb 52       	subi	r30, 0x2B	; 43
    34e4:	ff 4f       	sbci	r31, 0xFF	; 255
    34e6:	91 83       	std	Z+1, r25	; 0x01
    34e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34ea:	de 01       	movw	r26, r28
    34ec:	a9 52       	subi	r26, 0x29	; 41
    34ee:	bf 4f       	sbci	r27, 0xFF	; 255
    34f0:	fe 01       	movw	r30, r28
    34f2:	e9 52       	subi	r30, 0x29	; 41
    34f4:	ff 4f       	sbci	r31, 0xFF	; 255
    34f6:	80 81       	ld	r24, Z
    34f8:	91 81       	ldd	r25, Z+1	; 0x01
    34fa:	01 97       	sbiw	r24, 0x01	; 1
    34fc:	11 96       	adiw	r26, 0x01	; 1
    34fe:	9c 93       	st	X, r25
    3500:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3502:	fe 01       	movw	r30, r28
    3504:	e9 52       	subi	r30, 0x29	; 41
    3506:	ff 4f       	sbci	r31, 0xFF	; 255
    3508:	80 81       	ld	r24, Z
    350a:	91 81       	ldd	r25, Z+1	; 0x01
    350c:	00 97       	sbiw	r24, 0x00	; 0
    350e:	d1 f6       	brne	.-76     	; 0x34c4 <Increment_LED+0xec>
    3510:	27 c0       	rjmp	.+78     	; 0x3560 <Increment_LED+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3512:	8e 01       	movw	r16, r28
    3514:	09 52       	subi	r16, 0x29	; 41
    3516:	1f 4f       	sbci	r17, 0xFF	; 255
    3518:	fe 01       	movw	r30, r28
    351a:	e7 52       	subi	r30, 0x27	; 39
    351c:	ff 4f       	sbci	r31, 0xFF	; 255
    351e:	60 81       	ld	r22, Z
    3520:	71 81       	ldd	r23, Z+1	; 0x01
    3522:	82 81       	ldd	r24, Z+2	; 0x02
    3524:	93 81       	ldd	r25, Z+3	; 0x03
    3526:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    352a:	dc 01       	movw	r26, r24
    352c:	cb 01       	movw	r24, r22
    352e:	f8 01       	movw	r30, r16
    3530:	91 83       	std	Z+1, r25	; 0x01
    3532:	80 83       	st	Z, r24
    3534:	de 01       	movw	r26, r28
    3536:	ad 52       	subi	r26, 0x2D	; 45
    3538:	bf 4f       	sbci	r27, 0xFF	; 255
    353a:	fe 01       	movw	r30, r28
    353c:	e9 52       	subi	r30, 0x29	; 41
    353e:	ff 4f       	sbci	r31, 0xFF	; 255
    3540:	80 81       	ld	r24, Z
    3542:	91 81       	ldd	r25, Z+1	; 0x01
    3544:	8d 93       	st	X+, r24
    3546:	9c 93       	st	X, r25
    3548:	fe 01       	movw	r30, r28
    354a:	ed 52       	subi	r30, 0x2D	; 45
    354c:	ff 4f       	sbci	r31, 0xFF	; 255
    354e:	80 81       	ld	r24, Z
    3550:	91 81       	ldd	r25, Z+1	; 0x01
    3552:	01 97       	sbiw	r24, 0x01	; 1
    3554:	f1 f7       	brne	.-4      	; 0x3552 <Increment_LED+0x17a>
    3556:	fe 01       	movw	r30, r28
    3558:	ed 52       	subi	r30, 0x2D	; 45
    355a:	ff 4f       	sbci	r31, 0xFF	; 255
    355c:	91 83       	std	Z+1, r25	; 0x01
    355e:	80 83       	st	Z, r24
	_delay_ms(300);

	LED_ON(DIO_PORTA,DIO_PIN1);
    3560:	80 e0       	ldi	r24, 0x00	; 0
    3562:	61 e0       	ldi	r22, 0x01	; 1
    3564:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    3568:	fe 01       	movw	r30, r28
    356a:	e1 53       	subi	r30, 0x31	; 49
    356c:	ff 4f       	sbci	r31, 0xFF	; 255
    356e:	80 e0       	ldi	r24, 0x00	; 0
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	a6 e9       	ldi	r26, 0x96	; 150
    3574:	b3 e4       	ldi	r27, 0x43	; 67
    3576:	80 83       	st	Z, r24
    3578:	91 83       	std	Z+1, r25	; 0x01
    357a:	a2 83       	std	Z+2, r26	; 0x02
    357c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    357e:	8e 01       	movw	r16, r28
    3580:	05 53       	subi	r16, 0x35	; 53
    3582:	1f 4f       	sbci	r17, 0xFF	; 255
    3584:	fe 01       	movw	r30, r28
    3586:	e1 53       	subi	r30, 0x31	; 49
    3588:	ff 4f       	sbci	r31, 0xFF	; 255
    358a:	60 81       	ld	r22, Z
    358c:	71 81       	ldd	r23, Z+1	; 0x01
    358e:	82 81       	ldd	r24, Z+2	; 0x02
    3590:	93 81       	ldd	r25, Z+3	; 0x03
    3592:	20 e0       	ldi	r18, 0x00	; 0
    3594:	30 e0       	ldi	r19, 0x00	; 0
    3596:	4a ef       	ldi	r20, 0xFA	; 250
    3598:	54 e4       	ldi	r21, 0x44	; 68
    359a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    359e:	dc 01       	movw	r26, r24
    35a0:	cb 01       	movw	r24, r22
    35a2:	f8 01       	movw	r30, r16
    35a4:	80 83       	st	Z, r24
    35a6:	91 83       	std	Z+1, r25	; 0x01
    35a8:	a2 83       	std	Z+2, r26	; 0x02
    35aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35ac:	fe 01       	movw	r30, r28
    35ae:	e5 53       	subi	r30, 0x35	; 53
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	60 81       	ld	r22, Z
    35b4:	71 81       	ldd	r23, Z+1	; 0x01
    35b6:	82 81       	ldd	r24, Z+2	; 0x02
    35b8:	93 81       	ldd	r25, Z+3	; 0x03
    35ba:	20 e0       	ldi	r18, 0x00	; 0
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	40 e8       	ldi	r20, 0x80	; 128
    35c0:	5f e3       	ldi	r21, 0x3F	; 63
    35c2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    35c6:	88 23       	and	r24, r24
    35c8:	44 f4       	brge	.+16     	; 0x35da <Increment_LED+0x202>
		__ticks = 1;
    35ca:	fe 01       	movw	r30, r28
    35cc:	e7 53       	subi	r30, 0x37	; 55
    35ce:	ff 4f       	sbci	r31, 0xFF	; 255
    35d0:	81 e0       	ldi	r24, 0x01	; 1
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	91 83       	std	Z+1, r25	; 0x01
    35d6:	80 83       	st	Z, r24
    35d8:	64 c0       	rjmp	.+200    	; 0x36a2 <Increment_LED+0x2ca>
	else if (__tmp > 65535)
    35da:	fe 01       	movw	r30, r28
    35dc:	e5 53       	subi	r30, 0x35	; 53
    35de:	ff 4f       	sbci	r31, 0xFF	; 255
    35e0:	60 81       	ld	r22, Z
    35e2:	71 81       	ldd	r23, Z+1	; 0x01
    35e4:	82 81       	ldd	r24, Z+2	; 0x02
    35e6:	93 81       	ldd	r25, Z+3	; 0x03
    35e8:	20 e0       	ldi	r18, 0x00	; 0
    35ea:	3f ef       	ldi	r19, 0xFF	; 255
    35ec:	4f e7       	ldi	r20, 0x7F	; 127
    35ee:	57 e4       	ldi	r21, 0x47	; 71
    35f0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    35f4:	18 16       	cp	r1, r24
    35f6:	0c f0       	brlt	.+2      	; 0x35fa <Increment_LED+0x222>
    35f8:	43 c0       	rjmp	.+134    	; 0x3680 <Increment_LED+0x2a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35fa:	fe 01       	movw	r30, r28
    35fc:	e1 53       	subi	r30, 0x31	; 49
    35fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3600:	60 81       	ld	r22, Z
    3602:	71 81       	ldd	r23, Z+1	; 0x01
    3604:	82 81       	ldd	r24, Z+2	; 0x02
    3606:	93 81       	ldd	r25, Z+3	; 0x03
    3608:	20 e0       	ldi	r18, 0x00	; 0
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	40 e2       	ldi	r20, 0x20	; 32
    360e:	51 e4       	ldi	r21, 0x41	; 65
    3610:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3614:	dc 01       	movw	r26, r24
    3616:	cb 01       	movw	r24, r22
    3618:	8e 01       	movw	r16, r28
    361a:	07 53       	subi	r16, 0x37	; 55
    361c:	1f 4f       	sbci	r17, 0xFF	; 255
    361e:	bc 01       	movw	r22, r24
    3620:	cd 01       	movw	r24, r26
    3622:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3626:	dc 01       	movw	r26, r24
    3628:	cb 01       	movw	r24, r22
    362a:	f8 01       	movw	r30, r16
    362c:	91 83       	std	Z+1, r25	; 0x01
    362e:	80 83       	st	Z, r24
    3630:	1f c0       	rjmp	.+62     	; 0x3670 <Increment_LED+0x298>
    3632:	fe 01       	movw	r30, r28
    3634:	e9 53       	subi	r30, 0x39	; 57
    3636:	ff 4f       	sbci	r31, 0xFF	; 255
    3638:	88 ec       	ldi	r24, 0xC8	; 200
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	91 83       	std	Z+1, r25	; 0x01
    363e:	80 83       	st	Z, r24
    3640:	fe 01       	movw	r30, r28
    3642:	e9 53       	subi	r30, 0x39	; 57
    3644:	ff 4f       	sbci	r31, 0xFF	; 255
    3646:	80 81       	ld	r24, Z
    3648:	91 81       	ldd	r25, Z+1	; 0x01
    364a:	01 97       	sbiw	r24, 0x01	; 1
    364c:	f1 f7       	brne	.-4      	; 0x364a <Increment_LED+0x272>
    364e:	fe 01       	movw	r30, r28
    3650:	e9 53       	subi	r30, 0x39	; 57
    3652:	ff 4f       	sbci	r31, 0xFF	; 255
    3654:	91 83       	std	Z+1, r25	; 0x01
    3656:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3658:	de 01       	movw	r26, r28
    365a:	a7 53       	subi	r26, 0x37	; 55
    365c:	bf 4f       	sbci	r27, 0xFF	; 255
    365e:	fe 01       	movw	r30, r28
    3660:	e7 53       	subi	r30, 0x37	; 55
    3662:	ff 4f       	sbci	r31, 0xFF	; 255
    3664:	80 81       	ld	r24, Z
    3666:	91 81       	ldd	r25, Z+1	; 0x01
    3668:	01 97       	sbiw	r24, 0x01	; 1
    366a:	11 96       	adiw	r26, 0x01	; 1
    366c:	9c 93       	st	X, r25
    366e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3670:	fe 01       	movw	r30, r28
    3672:	e7 53       	subi	r30, 0x37	; 55
    3674:	ff 4f       	sbci	r31, 0xFF	; 255
    3676:	80 81       	ld	r24, Z
    3678:	91 81       	ldd	r25, Z+1	; 0x01
    367a:	00 97       	sbiw	r24, 0x00	; 0
    367c:	d1 f6       	brne	.-76     	; 0x3632 <Increment_LED+0x25a>
    367e:	27 c0       	rjmp	.+78     	; 0x36ce <Increment_LED+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3680:	8e 01       	movw	r16, r28
    3682:	07 53       	subi	r16, 0x37	; 55
    3684:	1f 4f       	sbci	r17, 0xFF	; 255
    3686:	fe 01       	movw	r30, r28
    3688:	e5 53       	subi	r30, 0x35	; 53
    368a:	ff 4f       	sbci	r31, 0xFF	; 255
    368c:	60 81       	ld	r22, Z
    368e:	71 81       	ldd	r23, Z+1	; 0x01
    3690:	82 81       	ldd	r24, Z+2	; 0x02
    3692:	93 81       	ldd	r25, Z+3	; 0x03
    3694:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3698:	dc 01       	movw	r26, r24
    369a:	cb 01       	movw	r24, r22
    369c:	f8 01       	movw	r30, r16
    369e:	91 83       	std	Z+1, r25	; 0x01
    36a0:	80 83       	st	Z, r24
    36a2:	de 01       	movw	r26, r28
    36a4:	ab 53       	subi	r26, 0x3B	; 59
    36a6:	bf 4f       	sbci	r27, 0xFF	; 255
    36a8:	fe 01       	movw	r30, r28
    36aa:	e7 53       	subi	r30, 0x37	; 55
    36ac:	ff 4f       	sbci	r31, 0xFF	; 255
    36ae:	80 81       	ld	r24, Z
    36b0:	91 81       	ldd	r25, Z+1	; 0x01
    36b2:	8d 93       	st	X+, r24
    36b4:	9c 93       	st	X, r25
    36b6:	fe 01       	movw	r30, r28
    36b8:	eb 53       	subi	r30, 0x3B	; 59
    36ba:	ff 4f       	sbci	r31, 0xFF	; 255
    36bc:	80 81       	ld	r24, Z
    36be:	91 81       	ldd	r25, Z+1	; 0x01
    36c0:	01 97       	sbiw	r24, 0x01	; 1
    36c2:	f1 f7       	brne	.-4      	; 0x36c0 <Increment_LED+0x2e8>
    36c4:	fe 01       	movw	r30, r28
    36c6:	eb 53       	subi	r30, 0x3B	; 59
    36c8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ca:	91 83       	std	Z+1, r25	; 0x01
    36cc:	80 83       	st	Z, r24
	_delay_ms(300);

	LED_ON(DIO_PORTA,DIO_PIN2);
    36ce:	80 e0       	ldi	r24, 0x00	; 0
    36d0:	62 e0       	ldi	r22, 0x02	; 2
    36d2:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    36d6:	fe 01       	movw	r30, r28
    36d8:	ef 53       	subi	r30, 0x3F	; 63
    36da:	ff 4f       	sbci	r31, 0xFF	; 255
    36dc:	80 e0       	ldi	r24, 0x00	; 0
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	a6 e9       	ldi	r26, 0x96	; 150
    36e2:	b3 e4       	ldi	r27, 0x43	; 67
    36e4:	80 83       	st	Z, r24
    36e6:	91 83       	std	Z+1, r25	; 0x01
    36e8:	a2 83       	std	Z+2, r26	; 0x02
    36ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36ec:	8e 01       	movw	r16, r28
    36ee:	03 54       	subi	r16, 0x43	; 67
    36f0:	1f 4f       	sbci	r17, 0xFF	; 255
    36f2:	fe 01       	movw	r30, r28
    36f4:	ef 53       	subi	r30, 0x3F	; 63
    36f6:	ff 4f       	sbci	r31, 0xFF	; 255
    36f8:	60 81       	ld	r22, Z
    36fa:	71 81       	ldd	r23, Z+1	; 0x01
    36fc:	82 81       	ldd	r24, Z+2	; 0x02
    36fe:	93 81       	ldd	r25, Z+3	; 0x03
    3700:	20 e0       	ldi	r18, 0x00	; 0
    3702:	30 e0       	ldi	r19, 0x00	; 0
    3704:	4a ef       	ldi	r20, 0xFA	; 250
    3706:	54 e4       	ldi	r21, 0x44	; 68
    3708:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    370c:	dc 01       	movw	r26, r24
    370e:	cb 01       	movw	r24, r22
    3710:	f8 01       	movw	r30, r16
    3712:	80 83       	st	Z, r24
    3714:	91 83       	std	Z+1, r25	; 0x01
    3716:	a2 83       	std	Z+2, r26	; 0x02
    3718:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    371a:	fe 01       	movw	r30, r28
    371c:	e3 54       	subi	r30, 0x43	; 67
    371e:	ff 4f       	sbci	r31, 0xFF	; 255
    3720:	60 81       	ld	r22, Z
    3722:	71 81       	ldd	r23, Z+1	; 0x01
    3724:	82 81       	ldd	r24, Z+2	; 0x02
    3726:	93 81       	ldd	r25, Z+3	; 0x03
    3728:	20 e0       	ldi	r18, 0x00	; 0
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	40 e8       	ldi	r20, 0x80	; 128
    372e:	5f e3       	ldi	r21, 0x3F	; 63
    3730:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3734:	88 23       	and	r24, r24
    3736:	44 f4       	brge	.+16     	; 0x3748 <Increment_LED+0x370>
		__ticks = 1;
    3738:	fe 01       	movw	r30, r28
    373a:	e5 54       	subi	r30, 0x45	; 69
    373c:	ff 4f       	sbci	r31, 0xFF	; 255
    373e:	81 e0       	ldi	r24, 0x01	; 1
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	91 83       	std	Z+1, r25	; 0x01
    3744:	80 83       	st	Z, r24
    3746:	64 c0       	rjmp	.+200    	; 0x3810 <Increment_LED+0x438>
	else if (__tmp > 65535)
    3748:	fe 01       	movw	r30, r28
    374a:	e3 54       	subi	r30, 0x43	; 67
    374c:	ff 4f       	sbci	r31, 0xFF	; 255
    374e:	60 81       	ld	r22, Z
    3750:	71 81       	ldd	r23, Z+1	; 0x01
    3752:	82 81       	ldd	r24, Z+2	; 0x02
    3754:	93 81       	ldd	r25, Z+3	; 0x03
    3756:	20 e0       	ldi	r18, 0x00	; 0
    3758:	3f ef       	ldi	r19, 0xFF	; 255
    375a:	4f e7       	ldi	r20, 0x7F	; 127
    375c:	57 e4       	ldi	r21, 0x47	; 71
    375e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3762:	18 16       	cp	r1, r24
    3764:	0c f0       	brlt	.+2      	; 0x3768 <Increment_LED+0x390>
    3766:	43 c0       	rjmp	.+134    	; 0x37ee <Increment_LED+0x416>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3768:	fe 01       	movw	r30, r28
    376a:	ef 53       	subi	r30, 0x3F	; 63
    376c:	ff 4f       	sbci	r31, 0xFF	; 255
    376e:	60 81       	ld	r22, Z
    3770:	71 81       	ldd	r23, Z+1	; 0x01
    3772:	82 81       	ldd	r24, Z+2	; 0x02
    3774:	93 81       	ldd	r25, Z+3	; 0x03
    3776:	20 e0       	ldi	r18, 0x00	; 0
    3778:	30 e0       	ldi	r19, 0x00	; 0
    377a:	40 e2       	ldi	r20, 0x20	; 32
    377c:	51 e4       	ldi	r21, 0x41	; 65
    377e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3782:	dc 01       	movw	r26, r24
    3784:	cb 01       	movw	r24, r22
    3786:	8e 01       	movw	r16, r28
    3788:	05 54       	subi	r16, 0x45	; 69
    378a:	1f 4f       	sbci	r17, 0xFF	; 255
    378c:	bc 01       	movw	r22, r24
    378e:	cd 01       	movw	r24, r26
    3790:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3794:	dc 01       	movw	r26, r24
    3796:	cb 01       	movw	r24, r22
    3798:	f8 01       	movw	r30, r16
    379a:	91 83       	std	Z+1, r25	; 0x01
    379c:	80 83       	st	Z, r24
    379e:	1f c0       	rjmp	.+62     	; 0x37de <Increment_LED+0x406>
    37a0:	fe 01       	movw	r30, r28
    37a2:	e7 54       	subi	r30, 0x47	; 71
    37a4:	ff 4f       	sbci	r31, 0xFF	; 255
    37a6:	88 ec       	ldi	r24, 0xC8	; 200
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	91 83       	std	Z+1, r25	; 0x01
    37ac:	80 83       	st	Z, r24
    37ae:	fe 01       	movw	r30, r28
    37b0:	e7 54       	subi	r30, 0x47	; 71
    37b2:	ff 4f       	sbci	r31, 0xFF	; 255
    37b4:	80 81       	ld	r24, Z
    37b6:	91 81       	ldd	r25, Z+1	; 0x01
    37b8:	01 97       	sbiw	r24, 0x01	; 1
    37ba:	f1 f7       	brne	.-4      	; 0x37b8 <Increment_LED+0x3e0>
    37bc:	fe 01       	movw	r30, r28
    37be:	e7 54       	subi	r30, 0x47	; 71
    37c0:	ff 4f       	sbci	r31, 0xFF	; 255
    37c2:	91 83       	std	Z+1, r25	; 0x01
    37c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37c6:	de 01       	movw	r26, r28
    37c8:	a5 54       	subi	r26, 0x45	; 69
    37ca:	bf 4f       	sbci	r27, 0xFF	; 255
    37cc:	fe 01       	movw	r30, r28
    37ce:	e5 54       	subi	r30, 0x45	; 69
    37d0:	ff 4f       	sbci	r31, 0xFF	; 255
    37d2:	80 81       	ld	r24, Z
    37d4:	91 81       	ldd	r25, Z+1	; 0x01
    37d6:	01 97       	sbiw	r24, 0x01	; 1
    37d8:	11 96       	adiw	r26, 0x01	; 1
    37da:	9c 93       	st	X, r25
    37dc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37de:	fe 01       	movw	r30, r28
    37e0:	e5 54       	subi	r30, 0x45	; 69
    37e2:	ff 4f       	sbci	r31, 0xFF	; 255
    37e4:	80 81       	ld	r24, Z
    37e6:	91 81       	ldd	r25, Z+1	; 0x01
    37e8:	00 97       	sbiw	r24, 0x00	; 0
    37ea:	d1 f6       	brne	.-76     	; 0x37a0 <Increment_LED+0x3c8>
    37ec:	27 c0       	rjmp	.+78     	; 0x383c <Increment_LED+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37ee:	8e 01       	movw	r16, r28
    37f0:	05 54       	subi	r16, 0x45	; 69
    37f2:	1f 4f       	sbci	r17, 0xFF	; 255
    37f4:	fe 01       	movw	r30, r28
    37f6:	e3 54       	subi	r30, 0x43	; 67
    37f8:	ff 4f       	sbci	r31, 0xFF	; 255
    37fa:	60 81       	ld	r22, Z
    37fc:	71 81       	ldd	r23, Z+1	; 0x01
    37fe:	82 81       	ldd	r24, Z+2	; 0x02
    3800:	93 81       	ldd	r25, Z+3	; 0x03
    3802:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3806:	dc 01       	movw	r26, r24
    3808:	cb 01       	movw	r24, r22
    380a:	f8 01       	movw	r30, r16
    380c:	91 83       	std	Z+1, r25	; 0x01
    380e:	80 83       	st	Z, r24
    3810:	de 01       	movw	r26, r28
    3812:	a9 54       	subi	r26, 0x49	; 73
    3814:	bf 4f       	sbci	r27, 0xFF	; 255
    3816:	fe 01       	movw	r30, r28
    3818:	e5 54       	subi	r30, 0x45	; 69
    381a:	ff 4f       	sbci	r31, 0xFF	; 255
    381c:	80 81       	ld	r24, Z
    381e:	91 81       	ldd	r25, Z+1	; 0x01
    3820:	8d 93       	st	X+, r24
    3822:	9c 93       	st	X, r25
    3824:	fe 01       	movw	r30, r28
    3826:	e9 54       	subi	r30, 0x49	; 73
    3828:	ff 4f       	sbci	r31, 0xFF	; 255
    382a:	80 81       	ld	r24, Z
    382c:	91 81       	ldd	r25, Z+1	; 0x01
    382e:	01 97       	sbiw	r24, 0x01	; 1
    3830:	f1 f7       	brne	.-4      	; 0x382e <Increment_LED+0x456>
    3832:	fe 01       	movw	r30, r28
    3834:	e9 54       	subi	r30, 0x49	; 73
    3836:	ff 4f       	sbci	r31, 0xFF	; 255
    3838:	91 83       	std	Z+1, r25	; 0x01
    383a:	80 83       	st	Z, r24
	_delay_ms(300);

	LED_ON(DIO_PORTA,DIO_PIN3);
    383c:	80 e0       	ldi	r24, 0x00	; 0
    383e:	63 e0       	ldi	r22, 0x03	; 3
    3840:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    3844:	fe 01       	movw	r30, r28
    3846:	ed 54       	subi	r30, 0x4D	; 77
    3848:	ff 4f       	sbci	r31, 0xFF	; 255
    384a:	80 e0       	ldi	r24, 0x00	; 0
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	a6 e9       	ldi	r26, 0x96	; 150
    3850:	b3 e4       	ldi	r27, 0x43	; 67
    3852:	80 83       	st	Z, r24
    3854:	91 83       	std	Z+1, r25	; 0x01
    3856:	a2 83       	std	Z+2, r26	; 0x02
    3858:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    385a:	8e 01       	movw	r16, r28
    385c:	01 55       	subi	r16, 0x51	; 81
    385e:	1f 4f       	sbci	r17, 0xFF	; 255
    3860:	fe 01       	movw	r30, r28
    3862:	ed 54       	subi	r30, 0x4D	; 77
    3864:	ff 4f       	sbci	r31, 0xFF	; 255
    3866:	60 81       	ld	r22, Z
    3868:	71 81       	ldd	r23, Z+1	; 0x01
    386a:	82 81       	ldd	r24, Z+2	; 0x02
    386c:	93 81       	ldd	r25, Z+3	; 0x03
    386e:	20 e0       	ldi	r18, 0x00	; 0
    3870:	30 e0       	ldi	r19, 0x00	; 0
    3872:	4a ef       	ldi	r20, 0xFA	; 250
    3874:	54 e4       	ldi	r21, 0x44	; 68
    3876:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    387a:	dc 01       	movw	r26, r24
    387c:	cb 01       	movw	r24, r22
    387e:	f8 01       	movw	r30, r16
    3880:	80 83       	st	Z, r24
    3882:	91 83       	std	Z+1, r25	; 0x01
    3884:	a2 83       	std	Z+2, r26	; 0x02
    3886:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3888:	fe 01       	movw	r30, r28
    388a:	e1 55       	subi	r30, 0x51	; 81
    388c:	ff 4f       	sbci	r31, 0xFF	; 255
    388e:	60 81       	ld	r22, Z
    3890:	71 81       	ldd	r23, Z+1	; 0x01
    3892:	82 81       	ldd	r24, Z+2	; 0x02
    3894:	93 81       	ldd	r25, Z+3	; 0x03
    3896:	20 e0       	ldi	r18, 0x00	; 0
    3898:	30 e0       	ldi	r19, 0x00	; 0
    389a:	40 e8       	ldi	r20, 0x80	; 128
    389c:	5f e3       	ldi	r21, 0x3F	; 63
    389e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    38a2:	88 23       	and	r24, r24
    38a4:	44 f4       	brge	.+16     	; 0x38b6 <Increment_LED+0x4de>
		__ticks = 1;
    38a6:	fe 01       	movw	r30, r28
    38a8:	e3 55       	subi	r30, 0x53	; 83
    38aa:	ff 4f       	sbci	r31, 0xFF	; 255
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	91 83       	std	Z+1, r25	; 0x01
    38b2:	80 83       	st	Z, r24
    38b4:	64 c0       	rjmp	.+200    	; 0x397e <Increment_LED+0x5a6>
	else if (__tmp > 65535)
    38b6:	fe 01       	movw	r30, r28
    38b8:	e1 55       	subi	r30, 0x51	; 81
    38ba:	ff 4f       	sbci	r31, 0xFF	; 255
    38bc:	60 81       	ld	r22, Z
    38be:	71 81       	ldd	r23, Z+1	; 0x01
    38c0:	82 81       	ldd	r24, Z+2	; 0x02
    38c2:	93 81       	ldd	r25, Z+3	; 0x03
    38c4:	20 e0       	ldi	r18, 0x00	; 0
    38c6:	3f ef       	ldi	r19, 0xFF	; 255
    38c8:	4f e7       	ldi	r20, 0x7F	; 127
    38ca:	57 e4       	ldi	r21, 0x47	; 71
    38cc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    38d0:	18 16       	cp	r1, r24
    38d2:	0c f0       	brlt	.+2      	; 0x38d6 <Increment_LED+0x4fe>
    38d4:	43 c0       	rjmp	.+134    	; 0x395c <Increment_LED+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38d6:	fe 01       	movw	r30, r28
    38d8:	ed 54       	subi	r30, 0x4D	; 77
    38da:	ff 4f       	sbci	r31, 0xFF	; 255
    38dc:	60 81       	ld	r22, Z
    38de:	71 81       	ldd	r23, Z+1	; 0x01
    38e0:	82 81       	ldd	r24, Z+2	; 0x02
    38e2:	93 81       	ldd	r25, Z+3	; 0x03
    38e4:	20 e0       	ldi	r18, 0x00	; 0
    38e6:	30 e0       	ldi	r19, 0x00	; 0
    38e8:	40 e2       	ldi	r20, 0x20	; 32
    38ea:	51 e4       	ldi	r21, 0x41	; 65
    38ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38f0:	dc 01       	movw	r26, r24
    38f2:	cb 01       	movw	r24, r22
    38f4:	8e 01       	movw	r16, r28
    38f6:	03 55       	subi	r16, 0x53	; 83
    38f8:	1f 4f       	sbci	r17, 0xFF	; 255
    38fa:	bc 01       	movw	r22, r24
    38fc:	cd 01       	movw	r24, r26
    38fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3902:	dc 01       	movw	r26, r24
    3904:	cb 01       	movw	r24, r22
    3906:	f8 01       	movw	r30, r16
    3908:	91 83       	std	Z+1, r25	; 0x01
    390a:	80 83       	st	Z, r24
    390c:	1f c0       	rjmp	.+62     	; 0x394c <Increment_LED+0x574>
    390e:	fe 01       	movw	r30, r28
    3910:	e5 55       	subi	r30, 0x55	; 85
    3912:	ff 4f       	sbci	r31, 0xFF	; 255
    3914:	88 ec       	ldi	r24, 0xC8	; 200
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	91 83       	std	Z+1, r25	; 0x01
    391a:	80 83       	st	Z, r24
    391c:	fe 01       	movw	r30, r28
    391e:	e5 55       	subi	r30, 0x55	; 85
    3920:	ff 4f       	sbci	r31, 0xFF	; 255
    3922:	80 81       	ld	r24, Z
    3924:	91 81       	ldd	r25, Z+1	; 0x01
    3926:	01 97       	sbiw	r24, 0x01	; 1
    3928:	f1 f7       	brne	.-4      	; 0x3926 <Increment_LED+0x54e>
    392a:	fe 01       	movw	r30, r28
    392c:	e5 55       	subi	r30, 0x55	; 85
    392e:	ff 4f       	sbci	r31, 0xFF	; 255
    3930:	91 83       	std	Z+1, r25	; 0x01
    3932:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3934:	de 01       	movw	r26, r28
    3936:	a3 55       	subi	r26, 0x53	; 83
    3938:	bf 4f       	sbci	r27, 0xFF	; 255
    393a:	fe 01       	movw	r30, r28
    393c:	e3 55       	subi	r30, 0x53	; 83
    393e:	ff 4f       	sbci	r31, 0xFF	; 255
    3940:	80 81       	ld	r24, Z
    3942:	91 81       	ldd	r25, Z+1	; 0x01
    3944:	01 97       	sbiw	r24, 0x01	; 1
    3946:	11 96       	adiw	r26, 0x01	; 1
    3948:	9c 93       	st	X, r25
    394a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    394c:	fe 01       	movw	r30, r28
    394e:	e3 55       	subi	r30, 0x53	; 83
    3950:	ff 4f       	sbci	r31, 0xFF	; 255
    3952:	80 81       	ld	r24, Z
    3954:	91 81       	ldd	r25, Z+1	; 0x01
    3956:	00 97       	sbiw	r24, 0x00	; 0
    3958:	d1 f6       	brne	.-76     	; 0x390e <Increment_LED+0x536>
    395a:	27 c0       	rjmp	.+78     	; 0x39aa <Increment_LED+0x5d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    395c:	8e 01       	movw	r16, r28
    395e:	03 55       	subi	r16, 0x53	; 83
    3960:	1f 4f       	sbci	r17, 0xFF	; 255
    3962:	fe 01       	movw	r30, r28
    3964:	e1 55       	subi	r30, 0x51	; 81
    3966:	ff 4f       	sbci	r31, 0xFF	; 255
    3968:	60 81       	ld	r22, Z
    396a:	71 81       	ldd	r23, Z+1	; 0x01
    396c:	82 81       	ldd	r24, Z+2	; 0x02
    396e:	93 81       	ldd	r25, Z+3	; 0x03
    3970:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3974:	dc 01       	movw	r26, r24
    3976:	cb 01       	movw	r24, r22
    3978:	f8 01       	movw	r30, r16
    397a:	91 83       	std	Z+1, r25	; 0x01
    397c:	80 83       	st	Z, r24
    397e:	de 01       	movw	r26, r28
    3980:	a7 55       	subi	r26, 0x57	; 87
    3982:	bf 4f       	sbci	r27, 0xFF	; 255
    3984:	fe 01       	movw	r30, r28
    3986:	e3 55       	subi	r30, 0x53	; 83
    3988:	ff 4f       	sbci	r31, 0xFF	; 255
    398a:	80 81       	ld	r24, Z
    398c:	91 81       	ldd	r25, Z+1	; 0x01
    398e:	8d 93       	st	X+, r24
    3990:	9c 93       	st	X, r25
    3992:	fe 01       	movw	r30, r28
    3994:	e7 55       	subi	r30, 0x57	; 87
    3996:	ff 4f       	sbci	r31, 0xFF	; 255
    3998:	80 81       	ld	r24, Z
    399a:	91 81       	ldd	r25, Z+1	; 0x01
    399c:	01 97       	sbiw	r24, 0x01	; 1
    399e:	f1 f7       	brne	.-4      	; 0x399c <Increment_LED+0x5c4>
    39a0:	fe 01       	movw	r30, r28
    39a2:	e7 55       	subi	r30, 0x57	; 87
    39a4:	ff 4f       	sbci	r31, 0xFF	; 255
    39a6:	91 83       	std	Z+1, r25	; 0x01
    39a8:	80 83       	st	Z, r24
	_delay_ms(300);

	LED_ON(DIO_PORTA,DIO_PIN4);
    39aa:	80 e0       	ldi	r24, 0x00	; 0
    39ac:	64 e0       	ldi	r22, 0x04	; 4
    39ae:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    39b2:	fe 01       	movw	r30, r28
    39b4:	eb 55       	subi	r30, 0x5B	; 91
    39b6:	ff 4f       	sbci	r31, 0xFF	; 255
    39b8:	80 e0       	ldi	r24, 0x00	; 0
    39ba:	90 e0       	ldi	r25, 0x00	; 0
    39bc:	a6 e9       	ldi	r26, 0x96	; 150
    39be:	b3 e4       	ldi	r27, 0x43	; 67
    39c0:	80 83       	st	Z, r24
    39c2:	91 83       	std	Z+1, r25	; 0x01
    39c4:	a2 83       	std	Z+2, r26	; 0x02
    39c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39c8:	8e 01       	movw	r16, r28
    39ca:	0f 55       	subi	r16, 0x5F	; 95
    39cc:	1f 4f       	sbci	r17, 0xFF	; 255
    39ce:	fe 01       	movw	r30, r28
    39d0:	eb 55       	subi	r30, 0x5B	; 91
    39d2:	ff 4f       	sbci	r31, 0xFF	; 255
    39d4:	60 81       	ld	r22, Z
    39d6:	71 81       	ldd	r23, Z+1	; 0x01
    39d8:	82 81       	ldd	r24, Z+2	; 0x02
    39da:	93 81       	ldd	r25, Z+3	; 0x03
    39dc:	20 e0       	ldi	r18, 0x00	; 0
    39de:	30 e0       	ldi	r19, 0x00	; 0
    39e0:	4a ef       	ldi	r20, 0xFA	; 250
    39e2:	54 e4       	ldi	r21, 0x44	; 68
    39e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    39e8:	dc 01       	movw	r26, r24
    39ea:	cb 01       	movw	r24, r22
    39ec:	f8 01       	movw	r30, r16
    39ee:	80 83       	st	Z, r24
    39f0:	91 83       	std	Z+1, r25	; 0x01
    39f2:	a2 83       	std	Z+2, r26	; 0x02
    39f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39f6:	fe 01       	movw	r30, r28
    39f8:	ef 55       	subi	r30, 0x5F	; 95
    39fa:	ff 4f       	sbci	r31, 0xFF	; 255
    39fc:	60 81       	ld	r22, Z
    39fe:	71 81       	ldd	r23, Z+1	; 0x01
    3a00:	82 81       	ldd	r24, Z+2	; 0x02
    3a02:	93 81       	ldd	r25, Z+3	; 0x03
    3a04:	20 e0       	ldi	r18, 0x00	; 0
    3a06:	30 e0       	ldi	r19, 0x00	; 0
    3a08:	40 e8       	ldi	r20, 0x80	; 128
    3a0a:	5f e3       	ldi	r21, 0x3F	; 63
    3a0c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3a10:	88 23       	and	r24, r24
    3a12:	44 f4       	brge	.+16     	; 0x3a24 <Increment_LED+0x64c>
		__ticks = 1;
    3a14:	fe 01       	movw	r30, r28
    3a16:	e1 56       	subi	r30, 0x61	; 97
    3a18:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1a:	81 e0       	ldi	r24, 0x01	; 1
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	91 83       	std	Z+1, r25	; 0x01
    3a20:	80 83       	st	Z, r24
    3a22:	64 c0       	rjmp	.+200    	; 0x3aec <Increment_LED+0x714>
	else if (__tmp > 65535)
    3a24:	fe 01       	movw	r30, r28
    3a26:	ef 55       	subi	r30, 0x5F	; 95
    3a28:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2a:	60 81       	ld	r22, Z
    3a2c:	71 81       	ldd	r23, Z+1	; 0x01
    3a2e:	82 81       	ldd	r24, Z+2	; 0x02
    3a30:	93 81       	ldd	r25, Z+3	; 0x03
    3a32:	20 e0       	ldi	r18, 0x00	; 0
    3a34:	3f ef       	ldi	r19, 0xFF	; 255
    3a36:	4f e7       	ldi	r20, 0x7F	; 127
    3a38:	57 e4       	ldi	r21, 0x47	; 71
    3a3a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3a3e:	18 16       	cp	r1, r24
    3a40:	0c f0       	brlt	.+2      	; 0x3a44 <Increment_LED+0x66c>
    3a42:	43 c0       	rjmp	.+134    	; 0x3aca <Increment_LED+0x6f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a44:	fe 01       	movw	r30, r28
    3a46:	eb 55       	subi	r30, 0x5B	; 91
    3a48:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4a:	60 81       	ld	r22, Z
    3a4c:	71 81       	ldd	r23, Z+1	; 0x01
    3a4e:	82 81       	ldd	r24, Z+2	; 0x02
    3a50:	93 81       	ldd	r25, Z+3	; 0x03
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	40 e2       	ldi	r20, 0x20	; 32
    3a58:	51 e4       	ldi	r21, 0x41	; 65
    3a5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a5e:	dc 01       	movw	r26, r24
    3a60:	cb 01       	movw	r24, r22
    3a62:	8e 01       	movw	r16, r28
    3a64:	01 56       	subi	r16, 0x61	; 97
    3a66:	1f 4f       	sbci	r17, 0xFF	; 255
    3a68:	bc 01       	movw	r22, r24
    3a6a:	cd 01       	movw	r24, r26
    3a6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a70:	dc 01       	movw	r26, r24
    3a72:	cb 01       	movw	r24, r22
    3a74:	f8 01       	movw	r30, r16
    3a76:	91 83       	std	Z+1, r25	; 0x01
    3a78:	80 83       	st	Z, r24
    3a7a:	1f c0       	rjmp	.+62     	; 0x3aba <Increment_LED+0x6e2>
    3a7c:	fe 01       	movw	r30, r28
    3a7e:	e3 56       	subi	r30, 0x63	; 99
    3a80:	ff 4f       	sbci	r31, 0xFF	; 255
    3a82:	88 ec       	ldi	r24, 0xC8	; 200
    3a84:	90 e0       	ldi	r25, 0x00	; 0
    3a86:	91 83       	std	Z+1, r25	; 0x01
    3a88:	80 83       	st	Z, r24
    3a8a:	fe 01       	movw	r30, r28
    3a8c:	e3 56       	subi	r30, 0x63	; 99
    3a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a90:	80 81       	ld	r24, Z
    3a92:	91 81       	ldd	r25, Z+1	; 0x01
    3a94:	01 97       	sbiw	r24, 0x01	; 1
    3a96:	f1 f7       	brne	.-4      	; 0x3a94 <Increment_LED+0x6bc>
    3a98:	fe 01       	movw	r30, r28
    3a9a:	e3 56       	subi	r30, 0x63	; 99
    3a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9e:	91 83       	std	Z+1, r25	; 0x01
    3aa0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aa2:	de 01       	movw	r26, r28
    3aa4:	a1 56       	subi	r26, 0x61	; 97
    3aa6:	bf 4f       	sbci	r27, 0xFF	; 255
    3aa8:	fe 01       	movw	r30, r28
    3aaa:	e1 56       	subi	r30, 0x61	; 97
    3aac:	ff 4f       	sbci	r31, 0xFF	; 255
    3aae:	80 81       	ld	r24, Z
    3ab0:	91 81       	ldd	r25, Z+1	; 0x01
    3ab2:	01 97       	sbiw	r24, 0x01	; 1
    3ab4:	11 96       	adiw	r26, 0x01	; 1
    3ab6:	9c 93       	st	X, r25
    3ab8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aba:	fe 01       	movw	r30, r28
    3abc:	e1 56       	subi	r30, 0x61	; 97
    3abe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac0:	80 81       	ld	r24, Z
    3ac2:	91 81       	ldd	r25, Z+1	; 0x01
    3ac4:	00 97       	sbiw	r24, 0x00	; 0
    3ac6:	d1 f6       	brne	.-76     	; 0x3a7c <Increment_LED+0x6a4>
    3ac8:	27 c0       	rjmp	.+78     	; 0x3b18 <Increment_LED+0x740>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aca:	8e 01       	movw	r16, r28
    3acc:	01 56       	subi	r16, 0x61	; 97
    3ace:	1f 4f       	sbci	r17, 0xFF	; 255
    3ad0:	fe 01       	movw	r30, r28
    3ad2:	ef 55       	subi	r30, 0x5F	; 95
    3ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad6:	60 81       	ld	r22, Z
    3ad8:	71 81       	ldd	r23, Z+1	; 0x01
    3ada:	82 81       	ldd	r24, Z+2	; 0x02
    3adc:	93 81       	ldd	r25, Z+3	; 0x03
    3ade:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3ae2:	dc 01       	movw	r26, r24
    3ae4:	cb 01       	movw	r24, r22
    3ae6:	f8 01       	movw	r30, r16
    3ae8:	91 83       	std	Z+1, r25	; 0x01
    3aea:	80 83       	st	Z, r24
    3aec:	de 01       	movw	r26, r28
    3aee:	a5 56       	subi	r26, 0x65	; 101
    3af0:	bf 4f       	sbci	r27, 0xFF	; 255
    3af2:	fe 01       	movw	r30, r28
    3af4:	e1 56       	subi	r30, 0x61	; 97
    3af6:	ff 4f       	sbci	r31, 0xFF	; 255
    3af8:	80 81       	ld	r24, Z
    3afa:	91 81       	ldd	r25, Z+1	; 0x01
    3afc:	8d 93       	st	X+, r24
    3afe:	9c 93       	st	X, r25
    3b00:	fe 01       	movw	r30, r28
    3b02:	e5 56       	subi	r30, 0x65	; 101
    3b04:	ff 4f       	sbci	r31, 0xFF	; 255
    3b06:	80 81       	ld	r24, Z
    3b08:	91 81       	ldd	r25, Z+1	; 0x01
    3b0a:	01 97       	sbiw	r24, 0x01	; 1
    3b0c:	f1 f7       	brne	.-4      	; 0x3b0a <Increment_LED+0x732>
    3b0e:	fe 01       	movw	r30, r28
    3b10:	e5 56       	subi	r30, 0x65	; 101
    3b12:	ff 4f       	sbci	r31, 0xFF	; 255
    3b14:	91 83       	std	Z+1, r25	; 0x01
    3b16:	80 83       	st	Z, r24
	_delay_ms(300);

	LED_ON(DIO_PORTA,DIO_PIN5);
    3b18:	80 e0       	ldi	r24, 0x00	; 0
    3b1a:	65 e0       	ldi	r22, 0x05	; 5
    3b1c:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    3b20:	fe 01       	movw	r30, r28
    3b22:	e9 56       	subi	r30, 0x69	; 105
    3b24:	ff 4f       	sbci	r31, 0xFF	; 255
    3b26:	80 e0       	ldi	r24, 0x00	; 0
    3b28:	90 e0       	ldi	r25, 0x00	; 0
    3b2a:	a6 e9       	ldi	r26, 0x96	; 150
    3b2c:	b3 e4       	ldi	r27, 0x43	; 67
    3b2e:	80 83       	st	Z, r24
    3b30:	91 83       	std	Z+1, r25	; 0x01
    3b32:	a2 83       	std	Z+2, r26	; 0x02
    3b34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b36:	8e 01       	movw	r16, r28
    3b38:	0d 56       	subi	r16, 0x6D	; 109
    3b3a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b3c:	fe 01       	movw	r30, r28
    3b3e:	e9 56       	subi	r30, 0x69	; 105
    3b40:	ff 4f       	sbci	r31, 0xFF	; 255
    3b42:	60 81       	ld	r22, Z
    3b44:	71 81       	ldd	r23, Z+1	; 0x01
    3b46:	82 81       	ldd	r24, Z+2	; 0x02
    3b48:	93 81       	ldd	r25, Z+3	; 0x03
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	30 e0       	ldi	r19, 0x00	; 0
    3b4e:	4a ef       	ldi	r20, 0xFA	; 250
    3b50:	54 e4       	ldi	r21, 0x44	; 68
    3b52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b56:	dc 01       	movw	r26, r24
    3b58:	cb 01       	movw	r24, r22
    3b5a:	f8 01       	movw	r30, r16
    3b5c:	80 83       	st	Z, r24
    3b5e:	91 83       	std	Z+1, r25	; 0x01
    3b60:	a2 83       	std	Z+2, r26	; 0x02
    3b62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b64:	fe 01       	movw	r30, r28
    3b66:	ed 56       	subi	r30, 0x6D	; 109
    3b68:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6a:	60 81       	ld	r22, Z
    3b6c:	71 81       	ldd	r23, Z+1	; 0x01
    3b6e:	82 81       	ldd	r24, Z+2	; 0x02
    3b70:	93 81       	ldd	r25, Z+3	; 0x03
    3b72:	20 e0       	ldi	r18, 0x00	; 0
    3b74:	30 e0       	ldi	r19, 0x00	; 0
    3b76:	40 e8       	ldi	r20, 0x80	; 128
    3b78:	5f e3       	ldi	r21, 0x3F	; 63
    3b7a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3b7e:	88 23       	and	r24, r24
    3b80:	44 f4       	brge	.+16     	; 0x3b92 <Increment_LED+0x7ba>
		__ticks = 1;
    3b82:	fe 01       	movw	r30, r28
    3b84:	ef 56       	subi	r30, 0x6F	; 111
    3b86:	ff 4f       	sbci	r31, 0xFF	; 255
    3b88:	81 e0       	ldi	r24, 0x01	; 1
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	91 83       	std	Z+1, r25	; 0x01
    3b8e:	80 83       	st	Z, r24
    3b90:	64 c0       	rjmp	.+200    	; 0x3c5a <Increment_LED+0x882>
	else if (__tmp > 65535)
    3b92:	fe 01       	movw	r30, r28
    3b94:	ed 56       	subi	r30, 0x6D	; 109
    3b96:	ff 4f       	sbci	r31, 0xFF	; 255
    3b98:	60 81       	ld	r22, Z
    3b9a:	71 81       	ldd	r23, Z+1	; 0x01
    3b9c:	82 81       	ldd	r24, Z+2	; 0x02
    3b9e:	93 81       	ldd	r25, Z+3	; 0x03
    3ba0:	20 e0       	ldi	r18, 0x00	; 0
    3ba2:	3f ef       	ldi	r19, 0xFF	; 255
    3ba4:	4f e7       	ldi	r20, 0x7F	; 127
    3ba6:	57 e4       	ldi	r21, 0x47	; 71
    3ba8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3bac:	18 16       	cp	r1, r24
    3bae:	0c f0       	brlt	.+2      	; 0x3bb2 <Increment_LED+0x7da>
    3bb0:	43 c0       	rjmp	.+134    	; 0x3c38 <Increment_LED+0x860>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bb2:	fe 01       	movw	r30, r28
    3bb4:	e9 56       	subi	r30, 0x69	; 105
    3bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb8:	60 81       	ld	r22, Z
    3bba:	71 81       	ldd	r23, Z+1	; 0x01
    3bbc:	82 81       	ldd	r24, Z+2	; 0x02
    3bbe:	93 81       	ldd	r25, Z+3	; 0x03
    3bc0:	20 e0       	ldi	r18, 0x00	; 0
    3bc2:	30 e0       	ldi	r19, 0x00	; 0
    3bc4:	40 e2       	ldi	r20, 0x20	; 32
    3bc6:	51 e4       	ldi	r21, 0x41	; 65
    3bc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3bcc:	dc 01       	movw	r26, r24
    3bce:	cb 01       	movw	r24, r22
    3bd0:	8e 01       	movw	r16, r28
    3bd2:	0f 56       	subi	r16, 0x6F	; 111
    3bd4:	1f 4f       	sbci	r17, 0xFF	; 255
    3bd6:	bc 01       	movw	r22, r24
    3bd8:	cd 01       	movw	r24, r26
    3bda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3bde:	dc 01       	movw	r26, r24
    3be0:	cb 01       	movw	r24, r22
    3be2:	f8 01       	movw	r30, r16
    3be4:	91 83       	std	Z+1, r25	; 0x01
    3be6:	80 83       	st	Z, r24
    3be8:	1f c0       	rjmp	.+62     	; 0x3c28 <Increment_LED+0x850>
    3bea:	fe 01       	movw	r30, r28
    3bec:	e1 57       	subi	r30, 0x71	; 113
    3bee:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf0:	88 ec       	ldi	r24, 0xC8	; 200
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	91 83       	std	Z+1, r25	; 0x01
    3bf6:	80 83       	st	Z, r24
    3bf8:	fe 01       	movw	r30, r28
    3bfa:	e1 57       	subi	r30, 0x71	; 113
    3bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfe:	80 81       	ld	r24, Z
    3c00:	91 81       	ldd	r25, Z+1	; 0x01
    3c02:	01 97       	sbiw	r24, 0x01	; 1
    3c04:	f1 f7       	brne	.-4      	; 0x3c02 <Increment_LED+0x82a>
    3c06:	fe 01       	movw	r30, r28
    3c08:	e1 57       	subi	r30, 0x71	; 113
    3c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0c:	91 83       	std	Z+1, r25	; 0x01
    3c0e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c10:	de 01       	movw	r26, r28
    3c12:	af 56       	subi	r26, 0x6F	; 111
    3c14:	bf 4f       	sbci	r27, 0xFF	; 255
    3c16:	fe 01       	movw	r30, r28
    3c18:	ef 56       	subi	r30, 0x6F	; 111
    3c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1c:	80 81       	ld	r24, Z
    3c1e:	91 81       	ldd	r25, Z+1	; 0x01
    3c20:	01 97       	sbiw	r24, 0x01	; 1
    3c22:	11 96       	adiw	r26, 0x01	; 1
    3c24:	9c 93       	st	X, r25
    3c26:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c28:	fe 01       	movw	r30, r28
    3c2a:	ef 56       	subi	r30, 0x6F	; 111
    3c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2e:	80 81       	ld	r24, Z
    3c30:	91 81       	ldd	r25, Z+1	; 0x01
    3c32:	00 97       	sbiw	r24, 0x00	; 0
    3c34:	d1 f6       	brne	.-76     	; 0x3bea <Increment_LED+0x812>
    3c36:	27 c0       	rjmp	.+78     	; 0x3c86 <Increment_LED+0x8ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c38:	8e 01       	movw	r16, r28
    3c3a:	0f 56       	subi	r16, 0x6F	; 111
    3c3c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c3e:	fe 01       	movw	r30, r28
    3c40:	ed 56       	subi	r30, 0x6D	; 109
    3c42:	ff 4f       	sbci	r31, 0xFF	; 255
    3c44:	60 81       	ld	r22, Z
    3c46:	71 81       	ldd	r23, Z+1	; 0x01
    3c48:	82 81       	ldd	r24, Z+2	; 0x02
    3c4a:	93 81       	ldd	r25, Z+3	; 0x03
    3c4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c50:	dc 01       	movw	r26, r24
    3c52:	cb 01       	movw	r24, r22
    3c54:	f8 01       	movw	r30, r16
    3c56:	91 83       	std	Z+1, r25	; 0x01
    3c58:	80 83       	st	Z, r24
    3c5a:	de 01       	movw	r26, r28
    3c5c:	a3 57       	subi	r26, 0x73	; 115
    3c5e:	bf 4f       	sbci	r27, 0xFF	; 255
    3c60:	fe 01       	movw	r30, r28
    3c62:	ef 56       	subi	r30, 0x6F	; 111
    3c64:	ff 4f       	sbci	r31, 0xFF	; 255
    3c66:	80 81       	ld	r24, Z
    3c68:	91 81       	ldd	r25, Z+1	; 0x01
    3c6a:	8d 93       	st	X+, r24
    3c6c:	9c 93       	st	X, r25
    3c6e:	fe 01       	movw	r30, r28
    3c70:	e3 57       	subi	r30, 0x73	; 115
    3c72:	ff 4f       	sbci	r31, 0xFF	; 255
    3c74:	80 81       	ld	r24, Z
    3c76:	91 81       	ldd	r25, Z+1	; 0x01
    3c78:	01 97       	sbiw	r24, 0x01	; 1
    3c7a:	f1 f7       	brne	.-4      	; 0x3c78 <Increment_LED+0x8a0>
    3c7c:	fe 01       	movw	r30, r28
    3c7e:	e3 57       	subi	r30, 0x73	; 115
    3c80:	ff 4f       	sbci	r31, 0xFF	; 255
    3c82:	91 83       	std	Z+1, r25	; 0x01
    3c84:	80 83       	st	Z, r24
	_delay_ms(300);

	LED_ON(DIO_PORTA,DIO_PIN6);
    3c86:	80 e0       	ldi	r24, 0x00	; 0
    3c88:	66 e0       	ldi	r22, 0x06	; 6
    3c8a:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    3c8e:	fe 01       	movw	r30, r28
    3c90:	e7 57       	subi	r30, 0x77	; 119
    3c92:	ff 4f       	sbci	r31, 0xFF	; 255
    3c94:	80 e0       	ldi	r24, 0x00	; 0
    3c96:	90 e0       	ldi	r25, 0x00	; 0
    3c98:	a6 e9       	ldi	r26, 0x96	; 150
    3c9a:	b3 e4       	ldi	r27, 0x43	; 67
    3c9c:	80 83       	st	Z, r24
    3c9e:	91 83       	std	Z+1, r25	; 0x01
    3ca0:	a2 83       	std	Z+2, r26	; 0x02
    3ca2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ca4:	8e 01       	movw	r16, r28
    3ca6:	0b 57       	subi	r16, 0x7B	; 123
    3ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    3caa:	fe 01       	movw	r30, r28
    3cac:	e7 57       	subi	r30, 0x77	; 119
    3cae:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb0:	60 81       	ld	r22, Z
    3cb2:	71 81       	ldd	r23, Z+1	; 0x01
    3cb4:	82 81       	ldd	r24, Z+2	; 0x02
    3cb6:	93 81       	ldd	r25, Z+3	; 0x03
    3cb8:	20 e0       	ldi	r18, 0x00	; 0
    3cba:	30 e0       	ldi	r19, 0x00	; 0
    3cbc:	4a ef       	ldi	r20, 0xFA	; 250
    3cbe:	54 e4       	ldi	r21, 0x44	; 68
    3cc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3cc4:	dc 01       	movw	r26, r24
    3cc6:	cb 01       	movw	r24, r22
    3cc8:	f8 01       	movw	r30, r16
    3cca:	80 83       	st	Z, r24
    3ccc:	91 83       	std	Z+1, r25	; 0x01
    3cce:	a2 83       	std	Z+2, r26	; 0x02
    3cd0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cd2:	fe 01       	movw	r30, r28
    3cd4:	eb 57       	subi	r30, 0x7B	; 123
    3cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd8:	60 81       	ld	r22, Z
    3cda:	71 81       	ldd	r23, Z+1	; 0x01
    3cdc:	82 81       	ldd	r24, Z+2	; 0x02
    3cde:	93 81       	ldd	r25, Z+3	; 0x03
    3ce0:	20 e0       	ldi	r18, 0x00	; 0
    3ce2:	30 e0       	ldi	r19, 0x00	; 0
    3ce4:	40 e8       	ldi	r20, 0x80	; 128
    3ce6:	5f e3       	ldi	r21, 0x3F	; 63
    3ce8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3cec:	88 23       	and	r24, r24
    3cee:	44 f4       	brge	.+16     	; 0x3d00 <Increment_LED+0x928>
		__ticks = 1;
    3cf0:	fe 01       	movw	r30, r28
    3cf2:	ed 57       	subi	r30, 0x7D	; 125
    3cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf6:	81 e0       	ldi	r24, 0x01	; 1
    3cf8:	90 e0       	ldi	r25, 0x00	; 0
    3cfa:	91 83       	std	Z+1, r25	; 0x01
    3cfc:	80 83       	st	Z, r24
    3cfe:	64 c0       	rjmp	.+200    	; 0x3dc8 <Increment_LED+0x9f0>
	else if (__tmp > 65535)
    3d00:	fe 01       	movw	r30, r28
    3d02:	eb 57       	subi	r30, 0x7B	; 123
    3d04:	ff 4f       	sbci	r31, 0xFF	; 255
    3d06:	60 81       	ld	r22, Z
    3d08:	71 81       	ldd	r23, Z+1	; 0x01
    3d0a:	82 81       	ldd	r24, Z+2	; 0x02
    3d0c:	93 81       	ldd	r25, Z+3	; 0x03
    3d0e:	20 e0       	ldi	r18, 0x00	; 0
    3d10:	3f ef       	ldi	r19, 0xFF	; 255
    3d12:	4f e7       	ldi	r20, 0x7F	; 127
    3d14:	57 e4       	ldi	r21, 0x47	; 71
    3d16:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3d1a:	18 16       	cp	r1, r24
    3d1c:	0c f0       	brlt	.+2      	; 0x3d20 <Increment_LED+0x948>
    3d1e:	43 c0       	rjmp	.+134    	; 0x3da6 <Increment_LED+0x9ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d20:	fe 01       	movw	r30, r28
    3d22:	e7 57       	subi	r30, 0x77	; 119
    3d24:	ff 4f       	sbci	r31, 0xFF	; 255
    3d26:	60 81       	ld	r22, Z
    3d28:	71 81       	ldd	r23, Z+1	; 0x01
    3d2a:	82 81       	ldd	r24, Z+2	; 0x02
    3d2c:	93 81       	ldd	r25, Z+3	; 0x03
    3d2e:	20 e0       	ldi	r18, 0x00	; 0
    3d30:	30 e0       	ldi	r19, 0x00	; 0
    3d32:	40 e2       	ldi	r20, 0x20	; 32
    3d34:	51 e4       	ldi	r21, 0x41	; 65
    3d36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3d3a:	dc 01       	movw	r26, r24
    3d3c:	cb 01       	movw	r24, r22
    3d3e:	8e 01       	movw	r16, r28
    3d40:	0d 57       	subi	r16, 0x7D	; 125
    3d42:	1f 4f       	sbci	r17, 0xFF	; 255
    3d44:	bc 01       	movw	r22, r24
    3d46:	cd 01       	movw	r24, r26
    3d48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3d4c:	dc 01       	movw	r26, r24
    3d4e:	cb 01       	movw	r24, r22
    3d50:	f8 01       	movw	r30, r16
    3d52:	91 83       	std	Z+1, r25	; 0x01
    3d54:	80 83       	st	Z, r24
    3d56:	1f c0       	rjmp	.+62     	; 0x3d96 <Increment_LED+0x9be>
    3d58:	fe 01       	movw	r30, r28
    3d5a:	ef 57       	subi	r30, 0x7F	; 127
    3d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5e:	88 ec       	ldi	r24, 0xC8	; 200
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	91 83       	std	Z+1, r25	; 0x01
    3d64:	80 83       	st	Z, r24
    3d66:	fe 01       	movw	r30, r28
    3d68:	ef 57       	subi	r30, 0x7F	; 127
    3d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6c:	80 81       	ld	r24, Z
    3d6e:	91 81       	ldd	r25, Z+1	; 0x01
    3d70:	01 97       	sbiw	r24, 0x01	; 1
    3d72:	f1 f7       	brne	.-4      	; 0x3d70 <Increment_LED+0x998>
    3d74:	fe 01       	movw	r30, r28
    3d76:	ef 57       	subi	r30, 0x7F	; 127
    3d78:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7a:	91 83       	std	Z+1, r25	; 0x01
    3d7c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d7e:	de 01       	movw	r26, r28
    3d80:	ad 57       	subi	r26, 0x7D	; 125
    3d82:	bf 4f       	sbci	r27, 0xFF	; 255
    3d84:	fe 01       	movw	r30, r28
    3d86:	ed 57       	subi	r30, 0x7D	; 125
    3d88:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8a:	80 81       	ld	r24, Z
    3d8c:	91 81       	ldd	r25, Z+1	; 0x01
    3d8e:	01 97       	sbiw	r24, 0x01	; 1
    3d90:	11 96       	adiw	r26, 0x01	; 1
    3d92:	9c 93       	st	X, r25
    3d94:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d96:	fe 01       	movw	r30, r28
    3d98:	ed 57       	subi	r30, 0x7D	; 125
    3d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9c:	80 81       	ld	r24, Z
    3d9e:	91 81       	ldd	r25, Z+1	; 0x01
    3da0:	00 97       	sbiw	r24, 0x00	; 0
    3da2:	d1 f6       	brne	.-76     	; 0x3d58 <Increment_LED+0x980>
    3da4:	27 c0       	rjmp	.+78     	; 0x3df4 <Increment_LED+0xa1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3da6:	8e 01       	movw	r16, r28
    3da8:	0d 57       	subi	r16, 0x7D	; 125
    3daa:	1f 4f       	sbci	r17, 0xFF	; 255
    3dac:	fe 01       	movw	r30, r28
    3dae:	eb 57       	subi	r30, 0x7B	; 123
    3db0:	ff 4f       	sbci	r31, 0xFF	; 255
    3db2:	60 81       	ld	r22, Z
    3db4:	71 81       	ldd	r23, Z+1	; 0x01
    3db6:	82 81       	ldd	r24, Z+2	; 0x02
    3db8:	93 81       	ldd	r25, Z+3	; 0x03
    3dba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3dbe:	dc 01       	movw	r26, r24
    3dc0:	cb 01       	movw	r24, r22
    3dc2:	f8 01       	movw	r30, r16
    3dc4:	91 83       	std	Z+1, r25	; 0x01
    3dc6:	80 83       	st	Z, r24
    3dc8:	de 01       	movw	r26, r28
    3dca:	a1 58       	subi	r26, 0x81	; 129
    3dcc:	bf 4f       	sbci	r27, 0xFF	; 255
    3dce:	fe 01       	movw	r30, r28
    3dd0:	ed 57       	subi	r30, 0x7D	; 125
    3dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd4:	80 81       	ld	r24, Z
    3dd6:	91 81       	ldd	r25, Z+1	; 0x01
    3dd8:	8d 93       	st	X+, r24
    3dda:	9c 93       	st	X, r25
    3ddc:	fe 01       	movw	r30, r28
    3dde:	e1 58       	subi	r30, 0x81	; 129
    3de0:	ff 4f       	sbci	r31, 0xFF	; 255
    3de2:	80 81       	ld	r24, Z
    3de4:	91 81       	ldd	r25, Z+1	; 0x01
    3de6:	01 97       	sbiw	r24, 0x01	; 1
    3de8:	f1 f7       	brne	.-4      	; 0x3de6 <Increment_LED+0xa0e>
    3dea:	fe 01       	movw	r30, r28
    3dec:	e1 58       	subi	r30, 0x81	; 129
    3dee:	ff 4f       	sbci	r31, 0xFF	; 255
    3df0:	91 83       	std	Z+1, r25	; 0x01
    3df2:	80 83       	st	Z, r24
	_delay_ms(300);

	LED_ON(DIO_PORTA,DIO_PIN7);
    3df4:	80 e0       	ldi	r24, 0x00	; 0
    3df6:	67 e0       	ldi	r22, 0x07	; 7
    3df8:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LED_ON>
    3dfc:	fe 01       	movw	r30, r28
    3dfe:	e5 58       	subi	r30, 0x85	; 133
    3e00:	ff 4f       	sbci	r31, 0xFF	; 255
    3e02:	80 e0       	ldi	r24, 0x00	; 0
    3e04:	90 e0       	ldi	r25, 0x00	; 0
    3e06:	a6 e9       	ldi	r26, 0x96	; 150
    3e08:	b3 e4       	ldi	r27, 0x43	; 67
    3e0a:	80 83       	st	Z, r24
    3e0c:	91 83       	std	Z+1, r25	; 0x01
    3e0e:	a2 83       	std	Z+2, r26	; 0x02
    3e10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e12:	8e 01       	movw	r16, r28
    3e14:	09 58       	subi	r16, 0x89	; 137
    3e16:	1f 4f       	sbci	r17, 0xFF	; 255
    3e18:	fe 01       	movw	r30, r28
    3e1a:	e5 58       	subi	r30, 0x85	; 133
    3e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1e:	60 81       	ld	r22, Z
    3e20:	71 81       	ldd	r23, Z+1	; 0x01
    3e22:	82 81       	ldd	r24, Z+2	; 0x02
    3e24:	93 81       	ldd	r25, Z+3	; 0x03
    3e26:	20 e0       	ldi	r18, 0x00	; 0
    3e28:	30 e0       	ldi	r19, 0x00	; 0
    3e2a:	4a ef       	ldi	r20, 0xFA	; 250
    3e2c:	54 e4       	ldi	r21, 0x44	; 68
    3e2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3e32:	dc 01       	movw	r26, r24
    3e34:	cb 01       	movw	r24, r22
    3e36:	f8 01       	movw	r30, r16
    3e38:	80 83       	st	Z, r24
    3e3a:	91 83       	std	Z+1, r25	; 0x01
    3e3c:	a2 83       	std	Z+2, r26	; 0x02
    3e3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e40:	fe 01       	movw	r30, r28
    3e42:	e9 58       	subi	r30, 0x89	; 137
    3e44:	ff 4f       	sbci	r31, 0xFF	; 255
    3e46:	60 81       	ld	r22, Z
    3e48:	71 81       	ldd	r23, Z+1	; 0x01
    3e4a:	82 81       	ldd	r24, Z+2	; 0x02
    3e4c:	93 81       	ldd	r25, Z+3	; 0x03
    3e4e:	20 e0       	ldi	r18, 0x00	; 0
    3e50:	30 e0       	ldi	r19, 0x00	; 0
    3e52:	40 e8       	ldi	r20, 0x80	; 128
    3e54:	5f e3       	ldi	r21, 0x3F	; 63
    3e56:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3e5a:	88 23       	and	r24, r24
    3e5c:	44 f4       	brge	.+16     	; 0x3e6e <Increment_LED+0xa96>
		__ticks = 1;
    3e5e:	fe 01       	movw	r30, r28
    3e60:	eb 58       	subi	r30, 0x8B	; 139
    3e62:	ff 4f       	sbci	r31, 0xFF	; 255
    3e64:	81 e0       	ldi	r24, 0x01	; 1
    3e66:	90 e0       	ldi	r25, 0x00	; 0
    3e68:	91 83       	std	Z+1, r25	; 0x01
    3e6a:	80 83       	st	Z, r24
    3e6c:	64 c0       	rjmp	.+200    	; 0x3f36 <Increment_LED+0xb5e>
	else if (__tmp > 65535)
    3e6e:	fe 01       	movw	r30, r28
    3e70:	e9 58       	subi	r30, 0x89	; 137
    3e72:	ff 4f       	sbci	r31, 0xFF	; 255
    3e74:	60 81       	ld	r22, Z
    3e76:	71 81       	ldd	r23, Z+1	; 0x01
    3e78:	82 81       	ldd	r24, Z+2	; 0x02
    3e7a:	93 81       	ldd	r25, Z+3	; 0x03
    3e7c:	20 e0       	ldi	r18, 0x00	; 0
    3e7e:	3f ef       	ldi	r19, 0xFF	; 255
    3e80:	4f e7       	ldi	r20, 0x7F	; 127
    3e82:	57 e4       	ldi	r21, 0x47	; 71
    3e84:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3e88:	18 16       	cp	r1, r24
    3e8a:	0c f0       	brlt	.+2      	; 0x3e8e <Increment_LED+0xab6>
    3e8c:	43 c0       	rjmp	.+134    	; 0x3f14 <Increment_LED+0xb3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e8e:	fe 01       	movw	r30, r28
    3e90:	e5 58       	subi	r30, 0x85	; 133
    3e92:	ff 4f       	sbci	r31, 0xFF	; 255
    3e94:	60 81       	ld	r22, Z
    3e96:	71 81       	ldd	r23, Z+1	; 0x01
    3e98:	82 81       	ldd	r24, Z+2	; 0x02
    3e9a:	93 81       	ldd	r25, Z+3	; 0x03
    3e9c:	20 e0       	ldi	r18, 0x00	; 0
    3e9e:	30 e0       	ldi	r19, 0x00	; 0
    3ea0:	40 e2       	ldi	r20, 0x20	; 32
    3ea2:	51 e4       	ldi	r21, 0x41	; 65
    3ea4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ea8:	dc 01       	movw	r26, r24
    3eaa:	cb 01       	movw	r24, r22
    3eac:	8e 01       	movw	r16, r28
    3eae:	0b 58       	subi	r16, 0x8B	; 139
    3eb0:	1f 4f       	sbci	r17, 0xFF	; 255
    3eb2:	bc 01       	movw	r22, r24
    3eb4:	cd 01       	movw	r24, r26
    3eb6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3eba:	dc 01       	movw	r26, r24
    3ebc:	cb 01       	movw	r24, r22
    3ebe:	f8 01       	movw	r30, r16
    3ec0:	91 83       	std	Z+1, r25	; 0x01
    3ec2:	80 83       	st	Z, r24
    3ec4:	1f c0       	rjmp	.+62     	; 0x3f04 <Increment_LED+0xb2c>
    3ec6:	fe 01       	movw	r30, r28
    3ec8:	ed 58       	subi	r30, 0x8D	; 141
    3eca:	ff 4f       	sbci	r31, 0xFF	; 255
    3ecc:	88 ec       	ldi	r24, 0xC8	; 200
    3ece:	90 e0       	ldi	r25, 0x00	; 0
    3ed0:	91 83       	std	Z+1, r25	; 0x01
    3ed2:	80 83       	st	Z, r24
    3ed4:	fe 01       	movw	r30, r28
    3ed6:	ed 58       	subi	r30, 0x8D	; 141
    3ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eda:	80 81       	ld	r24, Z
    3edc:	91 81       	ldd	r25, Z+1	; 0x01
    3ede:	01 97       	sbiw	r24, 0x01	; 1
    3ee0:	f1 f7       	brne	.-4      	; 0x3ede <Increment_LED+0xb06>
    3ee2:	fe 01       	movw	r30, r28
    3ee4:	ed 58       	subi	r30, 0x8D	; 141
    3ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee8:	91 83       	std	Z+1, r25	; 0x01
    3eea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eec:	de 01       	movw	r26, r28
    3eee:	ab 58       	subi	r26, 0x8B	; 139
    3ef0:	bf 4f       	sbci	r27, 0xFF	; 255
    3ef2:	fe 01       	movw	r30, r28
    3ef4:	eb 58       	subi	r30, 0x8B	; 139
    3ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef8:	80 81       	ld	r24, Z
    3efa:	91 81       	ldd	r25, Z+1	; 0x01
    3efc:	01 97       	sbiw	r24, 0x01	; 1
    3efe:	11 96       	adiw	r26, 0x01	; 1
    3f00:	9c 93       	st	X, r25
    3f02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f04:	fe 01       	movw	r30, r28
    3f06:	eb 58       	subi	r30, 0x8B	; 139
    3f08:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0a:	80 81       	ld	r24, Z
    3f0c:	91 81       	ldd	r25, Z+1	; 0x01
    3f0e:	00 97       	sbiw	r24, 0x00	; 0
    3f10:	d1 f6       	brne	.-76     	; 0x3ec6 <Increment_LED+0xaee>
    3f12:	27 c0       	rjmp	.+78     	; 0x3f62 <Increment_LED+0xb8a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f14:	8e 01       	movw	r16, r28
    3f16:	0b 58       	subi	r16, 0x8B	; 139
    3f18:	1f 4f       	sbci	r17, 0xFF	; 255
    3f1a:	fe 01       	movw	r30, r28
    3f1c:	e9 58       	subi	r30, 0x89	; 137
    3f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f20:	60 81       	ld	r22, Z
    3f22:	71 81       	ldd	r23, Z+1	; 0x01
    3f24:	82 81       	ldd	r24, Z+2	; 0x02
    3f26:	93 81       	ldd	r25, Z+3	; 0x03
    3f28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3f2c:	dc 01       	movw	r26, r24
    3f2e:	cb 01       	movw	r24, r22
    3f30:	f8 01       	movw	r30, r16
    3f32:	91 83       	std	Z+1, r25	; 0x01
    3f34:	80 83       	st	Z, r24
    3f36:	de 01       	movw	r26, r28
    3f38:	af 58       	subi	r26, 0x8F	; 143
    3f3a:	bf 4f       	sbci	r27, 0xFF	; 255
    3f3c:	fe 01       	movw	r30, r28
    3f3e:	eb 58       	subi	r30, 0x8B	; 139
    3f40:	ff 4f       	sbci	r31, 0xFF	; 255
    3f42:	80 81       	ld	r24, Z
    3f44:	91 81       	ldd	r25, Z+1	; 0x01
    3f46:	8d 93       	st	X+, r24
    3f48:	9c 93       	st	X, r25
    3f4a:	fe 01       	movw	r30, r28
    3f4c:	ef 58       	subi	r30, 0x8F	; 143
    3f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f50:	80 81       	ld	r24, Z
    3f52:	91 81       	ldd	r25, Z+1	; 0x01
    3f54:	01 97       	sbiw	r24, 0x01	; 1
    3f56:	f1 f7       	brne	.-4      	; 0x3f54 <Increment_LED+0xb7c>
    3f58:	fe 01       	movw	r30, r28
    3f5a:	ef 58       	subi	r30, 0x8F	; 143
    3f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5e:	91 83       	std	Z+1, r25	; 0x01
    3f60:	80 83       	st	Z, r24
	_delay_ms(300);

	LED_OFF(DIO_PORTA,DIO_PIN7);
    3f62:	80 e0       	ldi	r24, 0x00	; 0
    3f64:	67 e0       	ldi	r22, 0x07	; 7
    3f66:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>
    3f6a:	fe 01       	movw	r30, r28
    3f6c:	e3 59       	subi	r30, 0x93	; 147
    3f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f70:	80 e0       	ldi	r24, 0x00	; 0
    3f72:	90 e0       	ldi	r25, 0x00	; 0
    3f74:	a6 e9       	ldi	r26, 0x96	; 150
    3f76:	b3 e4       	ldi	r27, 0x43	; 67
    3f78:	80 83       	st	Z, r24
    3f7a:	91 83       	std	Z+1, r25	; 0x01
    3f7c:	a2 83       	std	Z+2, r26	; 0x02
    3f7e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f80:	8e 01       	movw	r16, r28
    3f82:	07 59       	subi	r16, 0x97	; 151
    3f84:	1f 4f       	sbci	r17, 0xFF	; 255
    3f86:	fe 01       	movw	r30, r28
    3f88:	e3 59       	subi	r30, 0x93	; 147
    3f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8c:	60 81       	ld	r22, Z
    3f8e:	71 81       	ldd	r23, Z+1	; 0x01
    3f90:	82 81       	ldd	r24, Z+2	; 0x02
    3f92:	93 81       	ldd	r25, Z+3	; 0x03
    3f94:	20 e0       	ldi	r18, 0x00	; 0
    3f96:	30 e0       	ldi	r19, 0x00	; 0
    3f98:	4a ef       	ldi	r20, 0xFA	; 250
    3f9a:	54 e4       	ldi	r21, 0x44	; 68
    3f9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3fa0:	dc 01       	movw	r26, r24
    3fa2:	cb 01       	movw	r24, r22
    3fa4:	f8 01       	movw	r30, r16
    3fa6:	80 83       	st	Z, r24
    3fa8:	91 83       	std	Z+1, r25	; 0x01
    3faa:	a2 83       	std	Z+2, r26	; 0x02
    3fac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3fae:	fe 01       	movw	r30, r28
    3fb0:	e7 59       	subi	r30, 0x97	; 151
    3fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb4:	60 81       	ld	r22, Z
    3fb6:	71 81       	ldd	r23, Z+1	; 0x01
    3fb8:	82 81       	ldd	r24, Z+2	; 0x02
    3fba:	93 81       	ldd	r25, Z+3	; 0x03
    3fbc:	20 e0       	ldi	r18, 0x00	; 0
    3fbe:	30 e0       	ldi	r19, 0x00	; 0
    3fc0:	40 e8       	ldi	r20, 0x80	; 128
    3fc2:	5f e3       	ldi	r21, 0x3F	; 63
    3fc4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3fc8:	88 23       	and	r24, r24
    3fca:	44 f4       	brge	.+16     	; 0x3fdc <Increment_LED+0xc04>
		__ticks = 1;
    3fcc:	fe 01       	movw	r30, r28
    3fce:	e9 59       	subi	r30, 0x99	; 153
    3fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd2:	81 e0       	ldi	r24, 0x01	; 1
    3fd4:	90 e0       	ldi	r25, 0x00	; 0
    3fd6:	91 83       	std	Z+1, r25	; 0x01
    3fd8:	80 83       	st	Z, r24
    3fda:	64 c0       	rjmp	.+200    	; 0x40a4 <Increment_LED+0xccc>
	else if (__tmp > 65535)
    3fdc:	fe 01       	movw	r30, r28
    3fde:	e7 59       	subi	r30, 0x97	; 151
    3fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe2:	60 81       	ld	r22, Z
    3fe4:	71 81       	ldd	r23, Z+1	; 0x01
    3fe6:	82 81       	ldd	r24, Z+2	; 0x02
    3fe8:	93 81       	ldd	r25, Z+3	; 0x03
    3fea:	20 e0       	ldi	r18, 0x00	; 0
    3fec:	3f ef       	ldi	r19, 0xFF	; 255
    3fee:	4f e7       	ldi	r20, 0x7F	; 127
    3ff0:	57 e4       	ldi	r21, 0x47	; 71
    3ff2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3ff6:	18 16       	cp	r1, r24
    3ff8:	0c f0       	brlt	.+2      	; 0x3ffc <Increment_LED+0xc24>
    3ffa:	43 c0       	rjmp	.+134    	; 0x4082 <Increment_LED+0xcaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ffc:	fe 01       	movw	r30, r28
    3ffe:	e3 59       	subi	r30, 0x93	; 147
    4000:	ff 4f       	sbci	r31, 0xFF	; 255
    4002:	60 81       	ld	r22, Z
    4004:	71 81       	ldd	r23, Z+1	; 0x01
    4006:	82 81       	ldd	r24, Z+2	; 0x02
    4008:	93 81       	ldd	r25, Z+3	; 0x03
    400a:	20 e0       	ldi	r18, 0x00	; 0
    400c:	30 e0       	ldi	r19, 0x00	; 0
    400e:	40 e2       	ldi	r20, 0x20	; 32
    4010:	51 e4       	ldi	r21, 0x41	; 65
    4012:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4016:	dc 01       	movw	r26, r24
    4018:	cb 01       	movw	r24, r22
    401a:	8e 01       	movw	r16, r28
    401c:	09 59       	subi	r16, 0x99	; 153
    401e:	1f 4f       	sbci	r17, 0xFF	; 255
    4020:	bc 01       	movw	r22, r24
    4022:	cd 01       	movw	r24, r26
    4024:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4028:	dc 01       	movw	r26, r24
    402a:	cb 01       	movw	r24, r22
    402c:	f8 01       	movw	r30, r16
    402e:	91 83       	std	Z+1, r25	; 0x01
    4030:	80 83       	st	Z, r24
    4032:	1f c0       	rjmp	.+62     	; 0x4072 <Increment_LED+0xc9a>
    4034:	fe 01       	movw	r30, r28
    4036:	eb 59       	subi	r30, 0x9B	; 155
    4038:	ff 4f       	sbci	r31, 0xFF	; 255
    403a:	88 ec       	ldi	r24, 0xC8	; 200
    403c:	90 e0       	ldi	r25, 0x00	; 0
    403e:	91 83       	std	Z+1, r25	; 0x01
    4040:	80 83       	st	Z, r24
    4042:	fe 01       	movw	r30, r28
    4044:	eb 59       	subi	r30, 0x9B	; 155
    4046:	ff 4f       	sbci	r31, 0xFF	; 255
    4048:	80 81       	ld	r24, Z
    404a:	91 81       	ldd	r25, Z+1	; 0x01
    404c:	01 97       	sbiw	r24, 0x01	; 1
    404e:	f1 f7       	brne	.-4      	; 0x404c <Increment_LED+0xc74>
    4050:	fe 01       	movw	r30, r28
    4052:	eb 59       	subi	r30, 0x9B	; 155
    4054:	ff 4f       	sbci	r31, 0xFF	; 255
    4056:	91 83       	std	Z+1, r25	; 0x01
    4058:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    405a:	de 01       	movw	r26, r28
    405c:	a9 59       	subi	r26, 0x99	; 153
    405e:	bf 4f       	sbci	r27, 0xFF	; 255
    4060:	fe 01       	movw	r30, r28
    4062:	e9 59       	subi	r30, 0x99	; 153
    4064:	ff 4f       	sbci	r31, 0xFF	; 255
    4066:	80 81       	ld	r24, Z
    4068:	91 81       	ldd	r25, Z+1	; 0x01
    406a:	01 97       	sbiw	r24, 0x01	; 1
    406c:	11 96       	adiw	r26, 0x01	; 1
    406e:	9c 93       	st	X, r25
    4070:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4072:	fe 01       	movw	r30, r28
    4074:	e9 59       	subi	r30, 0x99	; 153
    4076:	ff 4f       	sbci	r31, 0xFF	; 255
    4078:	80 81       	ld	r24, Z
    407a:	91 81       	ldd	r25, Z+1	; 0x01
    407c:	00 97       	sbiw	r24, 0x00	; 0
    407e:	d1 f6       	brne	.-76     	; 0x4034 <Increment_LED+0xc5c>
    4080:	27 c0       	rjmp	.+78     	; 0x40d0 <Increment_LED+0xcf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4082:	8e 01       	movw	r16, r28
    4084:	09 59       	subi	r16, 0x99	; 153
    4086:	1f 4f       	sbci	r17, 0xFF	; 255
    4088:	fe 01       	movw	r30, r28
    408a:	e7 59       	subi	r30, 0x97	; 151
    408c:	ff 4f       	sbci	r31, 0xFF	; 255
    408e:	60 81       	ld	r22, Z
    4090:	71 81       	ldd	r23, Z+1	; 0x01
    4092:	82 81       	ldd	r24, Z+2	; 0x02
    4094:	93 81       	ldd	r25, Z+3	; 0x03
    4096:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    409a:	dc 01       	movw	r26, r24
    409c:	cb 01       	movw	r24, r22
    409e:	f8 01       	movw	r30, r16
    40a0:	91 83       	std	Z+1, r25	; 0x01
    40a2:	80 83       	st	Z, r24
    40a4:	de 01       	movw	r26, r28
    40a6:	ad 59       	subi	r26, 0x9D	; 157
    40a8:	bf 4f       	sbci	r27, 0xFF	; 255
    40aa:	fe 01       	movw	r30, r28
    40ac:	e9 59       	subi	r30, 0x99	; 153
    40ae:	ff 4f       	sbci	r31, 0xFF	; 255
    40b0:	80 81       	ld	r24, Z
    40b2:	91 81       	ldd	r25, Z+1	; 0x01
    40b4:	8d 93       	st	X+, r24
    40b6:	9c 93       	st	X, r25
    40b8:	fe 01       	movw	r30, r28
    40ba:	ed 59       	subi	r30, 0x9D	; 157
    40bc:	ff 4f       	sbci	r31, 0xFF	; 255
    40be:	80 81       	ld	r24, Z
    40c0:	91 81       	ldd	r25, Z+1	; 0x01
    40c2:	01 97       	sbiw	r24, 0x01	; 1
    40c4:	f1 f7       	brne	.-4      	; 0x40c2 <Increment_LED+0xcea>
    40c6:	fe 01       	movw	r30, r28
    40c8:	ed 59       	subi	r30, 0x9D	; 157
    40ca:	ff 4f       	sbci	r31, 0xFF	; 255
    40cc:	91 83       	std	Z+1, r25	; 0x01
    40ce:	80 83       	st	Z, r24
	_delay_ms(300);

	LED_OFF(DIO_PORTA,DIO_PIN6);
    40d0:	80 e0       	ldi	r24, 0x00	; 0
    40d2:	66 e0       	ldi	r22, 0x06	; 6
    40d4:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>
    40d8:	fe 01       	movw	r30, r28
    40da:	e1 5a       	subi	r30, 0xA1	; 161
    40dc:	ff 4f       	sbci	r31, 0xFF	; 255
    40de:	80 e0       	ldi	r24, 0x00	; 0
    40e0:	90 e0       	ldi	r25, 0x00	; 0
    40e2:	a6 e9       	ldi	r26, 0x96	; 150
    40e4:	b3 e4       	ldi	r27, 0x43	; 67
    40e6:	80 83       	st	Z, r24
    40e8:	91 83       	std	Z+1, r25	; 0x01
    40ea:	a2 83       	std	Z+2, r26	; 0x02
    40ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40ee:	8e 01       	movw	r16, r28
    40f0:	05 5a       	subi	r16, 0xA5	; 165
    40f2:	1f 4f       	sbci	r17, 0xFF	; 255
    40f4:	fe 01       	movw	r30, r28
    40f6:	e1 5a       	subi	r30, 0xA1	; 161
    40f8:	ff 4f       	sbci	r31, 0xFF	; 255
    40fa:	60 81       	ld	r22, Z
    40fc:	71 81       	ldd	r23, Z+1	; 0x01
    40fe:	82 81       	ldd	r24, Z+2	; 0x02
    4100:	93 81       	ldd	r25, Z+3	; 0x03
    4102:	20 e0       	ldi	r18, 0x00	; 0
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	4a ef       	ldi	r20, 0xFA	; 250
    4108:	54 e4       	ldi	r21, 0x44	; 68
    410a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    410e:	dc 01       	movw	r26, r24
    4110:	cb 01       	movw	r24, r22
    4112:	f8 01       	movw	r30, r16
    4114:	80 83       	st	Z, r24
    4116:	91 83       	std	Z+1, r25	; 0x01
    4118:	a2 83       	std	Z+2, r26	; 0x02
    411a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    411c:	fe 01       	movw	r30, r28
    411e:	e5 5a       	subi	r30, 0xA5	; 165
    4120:	ff 4f       	sbci	r31, 0xFF	; 255
    4122:	60 81       	ld	r22, Z
    4124:	71 81       	ldd	r23, Z+1	; 0x01
    4126:	82 81       	ldd	r24, Z+2	; 0x02
    4128:	93 81       	ldd	r25, Z+3	; 0x03
    412a:	20 e0       	ldi	r18, 0x00	; 0
    412c:	30 e0       	ldi	r19, 0x00	; 0
    412e:	40 e8       	ldi	r20, 0x80	; 128
    4130:	5f e3       	ldi	r21, 0x3F	; 63
    4132:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4136:	88 23       	and	r24, r24
    4138:	44 f4       	brge	.+16     	; 0x414a <Increment_LED+0xd72>
		__ticks = 1;
    413a:	fe 01       	movw	r30, r28
    413c:	e7 5a       	subi	r30, 0xA7	; 167
    413e:	ff 4f       	sbci	r31, 0xFF	; 255
    4140:	81 e0       	ldi	r24, 0x01	; 1
    4142:	90 e0       	ldi	r25, 0x00	; 0
    4144:	91 83       	std	Z+1, r25	; 0x01
    4146:	80 83       	st	Z, r24
    4148:	64 c0       	rjmp	.+200    	; 0x4212 <Increment_LED+0xe3a>
	else if (__tmp > 65535)
    414a:	fe 01       	movw	r30, r28
    414c:	e5 5a       	subi	r30, 0xA5	; 165
    414e:	ff 4f       	sbci	r31, 0xFF	; 255
    4150:	60 81       	ld	r22, Z
    4152:	71 81       	ldd	r23, Z+1	; 0x01
    4154:	82 81       	ldd	r24, Z+2	; 0x02
    4156:	93 81       	ldd	r25, Z+3	; 0x03
    4158:	20 e0       	ldi	r18, 0x00	; 0
    415a:	3f ef       	ldi	r19, 0xFF	; 255
    415c:	4f e7       	ldi	r20, 0x7F	; 127
    415e:	57 e4       	ldi	r21, 0x47	; 71
    4160:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4164:	18 16       	cp	r1, r24
    4166:	0c f0       	brlt	.+2      	; 0x416a <Increment_LED+0xd92>
    4168:	43 c0       	rjmp	.+134    	; 0x41f0 <Increment_LED+0xe18>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    416a:	fe 01       	movw	r30, r28
    416c:	e1 5a       	subi	r30, 0xA1	; 161
    416e:	ff 4f       	sbci	r31, 0xFF	; 255
    4170:	60 81       	ld	r22, Z
    4172:	71 81       	ldd	r23, Z+1	; 0x01
    4174:	82 81       	ldd	r24, Z+2	; 0x02
    4176:	93 81       	ldd	r25, Z+3	; 0x03
    4178:	20 e0       	ldi	r18, 0x00	; 0
    417a:	30 e0       	ldi	r19, 0x00	; 0
    417c:	40 e2       	ldi	r20, 0x20	; 32
    417e:	51 e4       	ldi	r21, 0x41	; 65
    4180:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4184:	dc 01       	movw	r26, r24
    4186:	cb 01       	movw	r24, r22
    4188:	8e 01       	movw	r16, r28
    418a:	07 5a       	subi	r16, 0xA7	; 167
    418c:	1f 4f       	sbci	r17, 0xFF	; 255
    418e:	bc 01       	movw	r22, r24
    4190:	cd 01       	movw	r24, r26
    4192:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4196:	dc 01       	movw	r26, r24
    4198:	cb 01       	movw	r24, r22
    419a:	f8 01       	movw	r30, r16
    419c:	91 83       	std	Z+1, r25	; 0x01
    419e:	80 83       	st	Z, r24
    41a0:	1f c0       	rjmp	.+62     	; 0x41e0 <Increment_LED+0xe08>
    41a2:	fe 01       	movw	r30, r28
    41a4:	e9 5a       	subi	r30, 0xA9	; 169
    41a6:	ff 4f       	sbci	r31, 0xFF	; 255
    41a8:	88 ec       	ldi	r24, 0xC8	; 200
    41aa:	90 e0       	ldi	r25, 0x00	; 0
    41ac:	91 83       	std	Z+1, r25	; 0x01
    41ae:	80 83       	st	Z, r24
    41b0:	fe 01       	movw	r30, r28
    41b2:	e9 5a       	subi	r30, 0xA9	; 169
    41b4:	ff 4f       	sbci	r31, 0xFF	; 255
    41b6:	80 81       	ld	r24, Z
    41b8:	91 81       	ldd	r25, Z+1	; 0x01
    41ba:	01 97       	sbiw	r24, 0x01	; 1
    41bc:	f1 f7       	brne	.-4      	; 0x41ba <Increment_LED+0xde2>
    41be:	fe 01       	movw	r30, r28
    41c0:	e9 5a       	subi	r30, 0xA9	; 169
    41c2:	ff 4f       	sbci	r31, 0xFF	; 255
    41c4:	91 83       	std	Z+1, r25	; 0x01
    41c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41c8:	de 01       	movw	r26, r28
    41ca:	a7 5a       	subi	r26, 0xA7	; 167
    41cc:	bf 4f       	sbci	r27, 0xFF	; 255
    41ce:	fe 01       	movw	r30, r28
    41d0:	e7 5a       	subi	r30, 0xA7	; 167
    41d2:	ff 4f       	sbci	r31, 0xFF	; 255
    41d4:	80 81       	ld	r24, Z
    41d6:	91 81       	ldd	r25, Z+1	; 0x01
    41d8:	01 97       	sbiw	r24, 0x01	; 1
    41da:	11 96       	adiw	r26, 0x01	; 1
    41dc:	9c 93       	st	X, r25
    41de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41e0:	fe 01       	movw	r30, r28
    41e2:	e7 5a       	subi	r30, 0xA7	; 167
    41e4:	ff 4f       	sbci	r31, 0xFF	; 255
    41e6:	80 81       	ld	r24, Z
    41e8:	91 81       	ldd	r25, Z+1	; 0x01
    41ea:	00 97       	sbiw	r24, 0x00	; 0
    41ec:	d1 f6       	brne	.-76     	; 0x41a2 <Increment_LED+0xdca>
    41ee:	27 c0       	rjmp	.+78     	; 0x423e <Increment_LED+0xe66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41f0:	8e 01       	movw	r16, r28
    41f2:	07 5a       	subi	r16, 0xA7	; 167
    41f4:	1f 4f       	sbci	r17, 0xFF	; 255
    41f6:	fe 01       	movw	r30, r28
    41f8:	e5 5a       	subi	r30, 0xA5	; 165
    41fa:	ff 4f       	sbci	r31, 0xFF	; 255
    41fc:	60 81       	ld	r22, Z
    41fe:	71 81       	ldd	r23, Z+1	; 0x01
    4200:	82 81       	ldd	r24, Z+2	; 0x02
    4202:	93 81       	ldd	r25, Z+3	; 0x03
    4204:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4208:	dc 01       	movw	r26, r24
    420a:	cb 01       	movw	r24, r22
    420c:	f8 01       	movw	r30, r16
    420e:	91 83       	std	Z+1, r25	; 0x01
    4210:	80 83       	st	Z, r24
    4212:	de 01       	movw	r26, r28
    4214:	ab 5a       	subi	r26, 0xAB	; 171
    4216:	bf 4f       	sbci	r27, 0xFF	; 255
    4218:	fe 01       	movw	r30, r28
    421a:	e7 5a       	subi	r30, 0xA7	; 167
    421c:	ff 4f       	sbci	r31, 0xFF	; 255
    421e:	80 81       	ld	r24, Z
    4220:	91 81       	ldd	r25, Z+1	; 0x01
    4222:	8d 93       	st	X+, r24
    4224:	9c 93       	st	X, r25
    4226:	fe 01       	movw	r30, r28
    4228:	eb 5a       	subi	r30, 0xAB	; 171
    422a:	ff 4f       	sbci	r31, 0xFF	; 255
    422c:	80 81       	ld	r24, Z
    422e:	91 81       	ldd	r25, Z+1	; 0x01
    4230:	01 97       	sbiw	r24, 0x01	; 1
    4232:	f1 f7       	brne	.-4      	; 0x4230 <Increment_LED+0xe58>
    4234:	fe 01       	movw	r30, r28
    4236:	eb 5a       	subi	r30, 0xAB	; 171
    4238:	ff 4f       	sbci	r31, 0xFF	; 255
    423a:	91 83       	std	Z+1, r25	; 0x01
    423c:	80 83       	st	Z, r24
	_delay_ms(300);

	LED_OFF(DIO_PORTA,DIO_PIN5);
    423e:	80 e0       	ldi	r24, 0x00	; 0
    4240:	65 e0       	ldi	r22, 0x05	; 5
    4242:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>
    4246:	fe 01       	movw	r30, r28
    4248:	ef 5a       	subi	r30, 0xAF	; 175
    424a:	ff 4f       	sbci	r31, 0xFF	; 255
    424c:	80 e0       	ldi	r24, 0x00	; 0
    424e:	90 e0       	ldi	r25, 0x00	; 0
    4250:	a6 e9       	ldi	r26, 0x96	; 150
    4252:	b3 e4       	ldi	r27, 0x43	; 67
    4254:	80 83       	st	Z, r24
    4256:	91 83       	std	Z+1, r25	; 0x01
    4258:	a2 83       	std	Z+2, r26	; 0x02
    425a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    425c:	8e 01       	movw	r16, r28
    425e:	03 5b       	subi	r16, 0xB3	; 179
    4260:	1f 4f       	sbci	r17, 0xFF	; 255
    4262:	fe 01       	movw	r30, r28
    4264:	ef 5a       	subi	r30, 0xAF	; 175
    4266:	ff 4f       	sbci	r31, 0xFF	; 255
    4268:	60 81       	ld	r22, Z
    426a:	71 81       	ldd	r23, Z+1	; 0x01
    426c:	82 81       	ldd	r24, Z+2	; 0x02
    426e:	93 81       	ldd	r25, Z+3	; 0x03
    4270:	20 e0       	ldi	r18, 0x00	; 0
    4272:	30 e0       	ldi	r19, 0x00	; 0
    4274:	4a ef       	ldi	r20, 0xFA	; 250
    4276:	54 e4       	ldi	r21, 0x44	; 68
    4278:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    427c:	dc 01       	movw	r26, r24
    427e:	cb 01       	movw	r24, r22
    4280:	f8 01       	movw	r30, r16
    4282:	80 83       	st	Z, r24
    4284:	91 83       	std	Z+1, r25	; 0x01
    4286:	a2 83       	std	Z+2, r26	; 0x02
    4288:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    428a:	fe 01       	movw	r30, r28
    428c:	e3 5b       	subi	r30, 0xB3	; 179
    428e:	ff 4f       	sbci	r31, 0xFF	; 255
    4290:	60 81       	ld	r22, Z
    4292:	71 81       	ldd	r23, Z+1	; 0x01
    4294:	82 81       	ldd	r24, Z+2	; 0x02
    4296:	93 81       	ldd	r25, Z+3	; 0x03
    4298:	20 e0       	ldi	r18, 0x00	; 0
    429a:	30 e0       	ldi	r19, 0x00	; 0
    429c:	40 e8       	ldi	r20, 0x80	; 128
    429e:	5f e3       	ldi	r21, 0x3F	; 63
    42a0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    42a4:	88 23       	and	r24, r24
    42a6:	44 f4       	brge	.+16     	; 0x42b8 <Increment_LED+0xee0>
		__ticks = 1;
    42a8:	fe 01       	movw	r30, r28
    42aa:	e5 5b       	subi	r30, 0xB5	; 181
    42ac:	ff 4f       	sbci	r31, 0xFF	; 255
    42ae:	81 e0       	ldi	r24, 0x01	; 1
    42b0:	90 e0       	ldi	r25, 0x00	; 0
    42b2:	91 83       	std	Z+1, r25	; 0x01
    42b4:	80 83       	st	Z, r24
    42b6:	64 c0       	rjmp	.+200    	; 0x4380 <Increment_LED+0xfa8>
	else if (__tmp > 65535)
    42b8:	fe 01       	movw	r30, r28
    42ba:	e3 5b       	subi	r30, 0xB3	; 179
    42bc:	ff 4f       	sbci	r31, 0xFF	; 255
    42be:	60 81       	ld	r22, Z
    42c0:	71 81       	ldd	r23, Z+1	; 0x01
    42c2:	82 81       	ldd	r24, Z+2	; 0x02
    42c4:	93 81       	ldd	r25, Z+3	; 0x03
    42c6:	20 e0       	ldi	r18, 0x00	; 0
    42c8:	3f ef       	ldi	r19, 0xFF	; 255
    42ca:	4f e7       	ldi	r20, 0x7F	; 127
    42cc:	57 e4       	ldi	r21, 0x47	; 71
    42ce:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    42d2:	18 16       	cp	r1, r24
    42d4:	0c f0       	brlt	.+2      	; 0x42d8 <Increment_LED+0xf00>
    42d6:	43 c0       	rjmp	.+134    	; 0x435e <Increment_LED+0xf86>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42d8:	fe 01       	movw	r30, r28
    42da:	ef 5a       	subi	r30, 0xAF	; 175
    42dc:	ff 4f       	sbci	r31, 0xFF	; 255
    42de:	60 81       	ld	r22, Z
    42e0:	71 81       	ldd	r23, Z+1	; 0x01
    42e2:	82 81       	ldd	r24, Z+2	; 0x02
    42e4:	93 81       	ldd	r25, Z+3	; 0x03
    42e6:	20 e0       	ldi	r18, 0x00	; 0
    42e8:	30 e0       	ldi	r19, 0x00	; 0
    42ea:	40 e2       	ldi	r20, 0x20	; 32
    42ec:	51 e4       	ldi	r21, 0x41	; 65
    42ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    42f2:	dc 01       	movw	r26, r24
    42f4:	cb 01       	movw	r24, r22
    42f6:	8e 01       	movw	r16, r28
    42f8:	05 5b       	subi	r16, 0xB5	; 181
    42fa:	1f 4f       	sbci	r17, 0xFF	; 255
    42fc:	bc 01       	movw	r22, r24
    42fe:	cd 01       	movw	r24, r26
    4300:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4304:	dc 01       	movw	r26, r24
    4306:	cb 01       	movw	r24, r22
    4308:	f8 01       	movw	r30, r16
    430a:	91 83       	std	Z+1, r25	; 0x01
    430c:	80 83       	st	Z, r24
    430e:	1f c0       	rjmp	.+62     	; 0x434e <Increment_LED+0xf76>
    4310:	fe 01       	movw	r30, r28
    4312:	e7 5b       	subi	r30, 0xB7	; 183
    4314:	ff 4f       	sbci	r31, 0xFF	; 255
    4316:	88 ec       	ldi	r24, 0xC8	; 200
    4318:	90 e0       	ldi	r25, 0x00	; 0
    431a:	91 83       	std	Z+1, r25	; 0x01
    431c:	80 83       	st	Z, r24
    431e:	fe 01       	movw	r30, r28
    4320:	e7 5b       	subi	r30, 0xB7	; 183
    4322:	ff 4f       	sbci	r31, 0xFF	; 255
    4324:	80 81       	ld	r24, Z
    4326:	91 81       	ldd	r25, Z+1	; 0x01
    4328:	01 97       	sbiw	r24, 0x01	; 1
    432a:	f1 f7       	brne	.-4      	; 0x4328 <Increment_LED+0xf50>
    432c:	fe 01       	movw	r30, r28
    432e:	e7 5b       	subi	r30, 0xB7	; 183
    4330:	ff 4f       	sbci	r31, 0xFF	; 255
    4332:	91 83       	std	Z+1, r25	; 0x01
    4334:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4336:	de 01       	movw	r26, r28
    4338:	a5 5b       	subi	r26, 0xB5	; 181
    433a:	bf 4f       	sbci	r27, 0xFF	; 255
    433c:	fe 01       	movw	r30, r28
    433e:	e5 5b       	subi	r30, 0xB5	; 181
    4340:	ff 4f       	sbci	r31, 0xFF	; 255
    4342:	80 81       	ld	r24, Z
    4344:	91 81       	ldd	r25, Z+1	; 0x01
    4346:	01 97       	sbiw	r24, 0x01	; 1
    4348:	11 96       	adiw	r26, 0x01	; 1
    434a:	9c 93       	st	X, r25
    434c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    434e:	fe 01       	movw	r30, r28
    4350:	e5 5b       	subi	r30, 0xB5	; 181
    4352:	ff 4f       	sbci	r31, 0xFF	; 255
    4354:	80 81       	ld	r24, Z
    4356:	91 81       	ldd	r25, Z+1	; 0x01
    4358:	00 97       	sbiw	r24, 0x00	; 0
    435a:	d1 f6       	brne	.-76     	; 0x4310 <Increment_LED+0xf38>
    435c:	27 c0       	rjmp	.+78     	; 0x43ac <Increment_LED+0xfd4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    435e:	8e 01       	movw	r16, r28
    4360:	05 5b       	subi	r16, 0xB5	; 181
    4362:	1f 4f       	sbci	r17, 0xFF	; 255
    4364:	fe 01       	movw	r30, r28
    4366:	e3 5b       	subi	r30, 0xB3	; 179
    4368:	ff 4f       	sbci	r31, 0xFF	; 255
    436a:	60 81       	ld	r22, Z
    436c:	71 81       	ldd	r23, Z+1	; 0x01
    436e:	82 81       	ldd	r24, Z+2	; 0x02
    4370:	93 81       	ldd	r25, Z+3	; 0x03
    4372:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4376:	dc 01       	movw	r26, r24
    4378:	cb 01       	movw	r24, r22
    437a:	f8 01       	movw	r30, r16
    437c:	91 83       	std	Z+1, r25	; 0x01
    437e:	80 83       	st	Z, r24
    4380:	de 01       	movw	r26, r28
    4382:	a9 5b       	subi	r26, 0xB9	; 185
    4384:	bf 4f       	sbci	r27, 0xFF	; 255
    4386:	fe 01       	movw	r30, r28
    4388:	e5 5b       	subi	r30, 0xB5	; 181
    438a:	ff 4f       	sbci	r31, 0xFF	; 255
    438c:	80 81       	ld	r24, Z
    438e:	91 81       	ldd	r25, Z+1	; 0x01
    4390:	8d 93       	st	X+, r24
    4392:	9c 93       	st	X, r25
    4394:	fe 01       	movw	r30, r28
    4396:	e9 5b       	subi	r30, 0xB9	; 185
    4398:	ff 4f       	sbci	r31, 0xFF	; 255
    439a:	80 81       	ld	r24, Z
    439c:	91 81       	ldd	r25, Z+1	; 0x01
    439e:	01 97       	sbiw	r24, 0x01	; 1
    43a0:	f1 f7       	brne	.-4      	; 0x439e <Increment_LED+0xfc6>
    43a2:	fe 01       	movw	r30, r28
    43a4:	e9 5b       	subi	r30, 0xB9	; 185
    43a6:	ff 4f       	sbci	r31, 0xFF	; 255
    43a8:	91 83       	std	Z+1, r25	; 0x01
    43aa:	80 83       	st	Z, r24
	_delay_ms(300);

	LED_OFF(DIO_PORTA,DIO_PIN4);
    43ac:	80 e0       	ldi	r24, 0x00	; 0
    43ae:	64 e0       	ldi	r22, 0x04	; 4
    43b0:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>
    43b4:	fe 01       	movw	r30, r28
    43b6:	ed 5b       	subi	r30, 0xBD	; 189
    43b8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ba:	80 e0       	ldi	r24, 0x00	; 0
    43bc:	90 e0       	ldi	r25, 0x00	; 0
    43be:	a6 e9       	ldi	r26, 0x96	; 150
    43c0:	b3 e4       	ldi	r27, 0x43	; 67
    43c2:	80 83       	st	Z, r24
    43c4:	91 83       	std	Z+1, r25	; 0x01
    43c6:	a2 83       	std	Z+2, r26	; 0x02
    43c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43ca:	8e 01       	movw	r16, r28
    43cc:	01 5c       	subi	r16, 0xC1	; 193
    43ce:	1f 4f       	sbci	r17, 0xFF	; 255
    43d0:	fe 01       	movw	r30, r28
    43d2:	ed 5b       	subi	r30, 0xBD	; 189
    43d4:	ff 4f       	sbci	r31, 0xFF	; 255
    43d6:	60 81       	ld	r22, Z
    43d8:	71 81       	ldd	r23, Z+1	; 0x01
    43da:	82 81       	ldd	r24, Z+2	; 0x02
    43dc:	93 81       	ldd	r25, Z+3	; 0x03
    43de:	20 e0       	ldi	r18, 0x00	; 0
    43e0:	30 e0       	ldi	r19, 0x00	; 0
    43e2:	4a ef       	ldi	r20, 0xFA	; 250
    43e4:	54 e4       	ldi	r21, 0x44	; 68
    43e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    43ea:	dc 01       	movw	r26, r24
    43ec:	cb 01       	movw	r24, r22
    43ee:	f8 01       	movw	r30, r16
    43f0:	80 83       	st	Z, r24
    43f2:	91 83       	std	Z+1, r25	; 0x01
    43f4:	a2 83       	std	Z+2, r26	; 0x02
    43f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    43f8:	fe 01       	movw	r30, r28
    43fa:	ff 96       	adiw	r30, 0x3f	; 63
    43fc:	60 81       	ld	r22, Z
    43fe:	71 81       	ldd	r23, Z+1	; 0x01
    4400:	82 81       	ldd	r24, Z+2	; 0x02
    4402:	93 81       	ldd	r25, Z+3	; 0x03
    4404:	20 e0       	ldi	r18, 0x00	; 0
    4406:	30 e0       	ldi	r19, 0x00	; 0
    4408:	40 e8       	ldi	r20, 0x80	; 128
    440a:	5f e3       	ldi	r21, 0x3F	; 63
    440c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    4410:	88 23       	and	r24, r24
    4412:	2c f4       	brge	.+10     	; 0x441e <Increment_LED+0x1046>
		__ticks = 1;
    4414:	81 e0       	ldi	r24, 0x01	; 1
    4416:	90 e0       	ldi	r25, 0x00	; 0
    4418:	9e af       	std	Y+62, r25	; 0x3e
    441a:	8d af       	std	Y+61, r24	; 0x3d
    441c:	46 c0       	rjmp	.+140    	; 0x44aa <Increment_LED+0x10d2>
	else if (__tmp > 65535)
    441e:	fe 01       	movw	r30, r28
    4420:	ff 96       	adiw	r30, 0x3f	; 63
    4422:	60 81       	ld	r22, Z
    4424:	71 81       	ldd	r23, Z+1	; 0x01
    4426:	82 81       	ldd	r24, Z+2	; 0x02
    4428:	93 81       	ldd	r25, Z+3	; 0x03
    442a:	20 e0       	ldi	r18, 0x00	; 0
    442c:	3f ef       	ldi	r19, 0xFF	; 255
    442e:	4f e7       	ldi	r20, 0x7F	; 127
    4430:	57 e4       	ldi	r21, 0x47	; 71
    4432:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4436:	18 16       	cp	r1, r24
    4438:	64 f5       	brge	.+88     	; 0x4492 <Increment_LED+0x10ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    443a:	fe 01       	movw	r30, r28
    443c:	ed 5b       	subi	r30, 0xBD	; 189
    443e:	ff 4f       	sbci	r31, 0xFF	; 255
    4440:	60 81       	ld	r22, Z
    4442:	71 81       	ldd	r23, Z+1	; 0x01
    4444:	82 81       	ldd	r24, Z+2	; 0x02
    4446:	93 81       	ldd	r25, Z+3	; 0x03
    4448:	20 e0       	ldi	r18, 0x00	; 0
    444a:	30 e0       	ldi	r19, 0x00	; 0
    444c:	40 e2       	ldi	r20, 0x20	; 32
    444e:	51 e4       	ldi	r21, 0x41	; 65
    4450:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4454:	dc 01       	movw	r26, r24
    4456:	cb 01       	movw	r24, r22
    4458:	bc 01       	movw	r22, r24
    445a:	cd 01       	movw	r24, r26
    445c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4460:	dc 01       	movw	r26, r24
    4462:	cb 01       	movw	r24, r22
    4464:	9e af       	std	Y+62, r25	; 0x3e
    4466:	8d af       	std	Y+61, r24	; 0x3d
    4468:	0f c0       	rjmp	.+30     	; 0x4488 <Increment_LED+0x10b0>
    446a:	88 ec       	ldi	r24, 0xC8	; 200
    446c:	90 e0       	ldi	r25, 0x00	; 0
    446e:	9c af       	std	Y+60, r25	; 0x3c
    4470:	8b af       	std	Y+59, r24	; 0x3b
    4472:	8b ad       	ldd	r24, Y+59	; 0x3b
    4474:	9c ad       	ldd	r25, Y+60	; 0x3c
    4476:	01 97       	sbiw	r24, 0x01	; 1
    4478:	f1 f7       	brne	.-4      	; 0x4476 <Increment_LED+0x109e>
    447a:	9c af       	std	Y+60, r25	; 0x3c
    447c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    447e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4480:	9e ad       	ldd	r25, Y+62	; 0x3e
    4482:	01 97       	sbiw	r24, 0x01	; 1
    4484:	9e af       	std	Y+62, r25	; 0x3e
    4486:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4488:	8d ad       	ldd	r24, Y+61	; 0x3d
    448a:	9e ad       	ldd	r25, Y+62	; 0x3e
    448c:	00 97       	sbiw	r24, 0x00	; 0
    448e:	69 f7       	brne	.-38     	; 0x446a <Increment_LED+0x1092>
    4490:	16 c0       	rjmp	.+44     	; 0x44be <Increment_LED+0x10e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4492:	fe 01       	movw	r30, r28
    4494:	ff 96       	adiw	r30, 0x3f	; 63
    4496:	60 81       	ld	r22, Z
    4498:	71 81       	ldd	r23, Z+1	; 0x01
    449a:	82 81       	ldd	r24, Z+2	; 0x02
    449c:	93 81       	ldd	r25, Z+3	; 0x03
    449e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    44a2:	dc 01       	movw	r26, r24
    44a4:	cb 01       	movw	r24, r22
    44a6:	9e af       	std	Y+62, r25	; 0x3e
    44a8:	8d af       	std	Y+61, r24	; 0x3d
    44aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    44ac:	9e ad       	ldd	r25, Y+62	; 0x3e
    44ae:	9a af       	std	Y+58, r25	; 0x3a
    44b0:	89 af       	std	Y+57, r24	; 0x39
    44b2:	89 ad       	ldd	r24, Y+57	; 0x39
    44b4:	9a ad       	ldd	r25, Y+58	; 0x3a
    44b6:	01 97       	sbiw	r24, 0x01	; 1
    44b8:	f1 f7       	brne	.-4      	; 0x44b6 <Increment_LED+0x10de>
    44ba:	9a af       	std	Y+58, r25	; 0x3a
    44bc:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(300);

	LED_OFF(DIO_PORTA,DIO_PIN3);
    44be:	80 e0       	ldi	r24, 0x00	; 0
    44c0:	63 e0       	ldi	r22, 0x03	; 3
    44c2:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>
    44c6:	80 e0       	ldi	r24, 0x00	; 0
    44c8:	90 e0       	ldi	r25, 0x00	; 0
    44ca:	a6 e9       	ldi	r26, 0x96	; 150
    44cc:	b3 e4       	ldi	r27, 0x43	; 67
    44ce:	8d ab       	std	Y+53, r24	; 0x35
    44d0:	9e ab       	std	Y+54, r25	; 0x36
    44d2:	af ab       	std	Y+55, r26	; 0x37
    44d4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44d6:	6d a9       	ldd	r22, Y+53	; 0x35
    44d8:	7e a9       	ldd	r23, Y+54	; 0x36
    44da:	8f a9       	ldd	r24, Y+55	; 0x37
    44dc:	98 ad       	ldd	r25, Y+56	; 0x38
    44de:	20 e0       	ldi	r18, 0x00	; 0
    44e0:	30 e0       	ldi	r19, 0x00	; 0
    44e2:	4a ef       	ldi	r20, 0xFA	; 250
    44e4:	54 e4       	ldi	r21, 0x44	; 68
    44e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    44ea:	dc 01       	movw	r26, r24
    44ec:	cb 01       	movw	r24, r22
    44ee:	89 ab       	std	Y+49, r24	; 0x31
    44f0:	9a ab       	std	Y+50, r25	; 0x32
    44f2:	ab ab       	std	Y+51, r26	; 0x33
    44f4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    44f6:	69 a9       	ldd	r22, Y+49	; 0x31
    44f8:	7a a9       	ldd	r23, Y+50	; 0x32
    44fa:	8b a9       	ldd	r24, Y+51	; 0x33
    44fc:	9c a9       	ldd	r25, Y+52	; 0x34
    44fe:	20 e0       	ldi	r18, 0x00	; 0
    4500:	30 e0       	ldi	r19, 0x00	; 0
    4502:	40 e8       	ldi	r20, 0x80	; 128
    4504:	5f e3       	ldi	r21, 0x3F	; 63
    4506:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    450a:	88 23       	and	r24, r24
    450c:	2c f4       	brge	.+10     	; 0x4518 <Increment_LED+0x1140>
		__ticks = 1;
    450e:	81 e0       	ldi	r24, 0x01	; 1
    4510:	90 e0       	ldi	r25, 0x00	; 0
    4512:	98 ab       	std	Y+48, r25	; 0x30
    4514:	8f a7       	std	Y+47, r24	; 0x2f
    4516:	3f c0       	rjmp	.+126    	; 0x4596 <Increment_LED+0x11be>
	else if (__tmp > 65535)
    4518:	69 a9       	ldd	r22, Y+49	; 0x31
    451a:	7a a9       	ldd	r23, Y+50	; 0x32
    451c:	8b a9       	ldd	r24, Y+51	; 0x33
    451e:	9c a9       	ldd	r25, Y+52	; 0x34
    4520:	20 e0       	ldi	r18, 0x00	; 0
    4522:	3f ef       	ldi	r19, 0xFF	; 255
    4524:	4f e7       	ldi	r20, 0x7F	; 127
    4526:	57 e4       	ldi	r21, 0x47	; 71
    4528:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    452c:	18 16       	cp	r1, r24
    452e:	4c f5       	brge	.+82     	; 0x4582 <Increment_LED+0x11aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4530:	6d a9       	ldd	r22, Y+53	; 0x35
    4532:	7e a9       	ldd	r23, Y+54	; 0x36
    4534:	8f a9       	ldd	r24, Y+55	; 0x37
    4536:	98 ad       	ldd	r25, Y+56	; 0x38
    4538:	20 e0       	ldi	r18, 0x00	; 0
    453a:	30 e0       	ldi	r19, 0x00	; 0
    453c:	40 e2       	ldi	r20, 0x20	; 32
    453e:	51 e4       	ldi	r21, 0x41	; 65
    4540:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4544:	dc 01       	movw	r26, r24
    4546:	cb 01       	movw	r24, r22
    4548:	bc 01       	movw	r22, r24
    454a:	cd 01       	movw	r24, r26
    454c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4550:	dc 01       	movw	r26, r24
    4552:	cb 01       	movw	r24, r22
    4554:	98 ab       	std	Y+48, r25	; 0x30
    4556:	8f a7       	std	Y+47, r24	; 0x2f
    4558:	0f c0       	rjmp	.+30     	; 0x4578 <Increment_LED+0x11a0>
    455a:	88 ec       	ldi	r24, 0xC8	; 200
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	9e a7       	std	Y+46, r25	; 0x2e
    4560:	8d a7       	std	Y+45, r24	; 0x2d
    4562:	8d a5       	ldd	r24, Y+45	; 0x2d
    4564:	9e a5       	ldd	r25, Y+46	; 0x2e
    4566:	01 97       	sbiw	r24, 0x01	; 1
    4568:	f1 f7       	brne	.-4      	; 0x4566 <Increment_LED+0x118e>
    456a:	9e a7       	std	Y+46, r25	; 0x2e
    456c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    456e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4570:	98 a9       	ldd	r25, Y+48	; 0x30
    4572:	01 97       	sbiw	r24, 0x01	; 1
    4574:	98 ab       	std	Y+48, r25	; 0x30
    4576:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4578:	8f a5       	ldd	r24, Y+47	; 0x2f
    457a:	98 a9       	ldd	r25, Y+48	; 0x30
    457c:	00 97       	sbiw	r24, 0x00	; 0
    457e:	69 f7       	brne	.-38     	; 0x455a <Increment_LED+0x1182>
    4580:	14 c0       	rjmp	.+40     	; 0x45aa <Increment_LED+0x11d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4582:	69 a9       	ldd	r22, Y+49	; 0x31
    4584:	7a a9       	ldd	r23, Y+50	; 0x32
    4586:	8b a9       	ldd	r24, Y+51	; 0x33
    4588:	9c a9       	ldd	r25, Y+52	; 0x34
    458a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    458e:	dc 01       	movw	r26, r24
    4590:	cb 01       	movw	r24, r22
    4592:	98 ab       	std	Y+48, r25	; 0x30
    4594:	8f a7       	std	Y+47, r24	; 0x2f
    4596:	8f a5       	ldd	r24, Y+47	; 0x2f
    4598:	98 a9       	ldd	r25, Y+48	; 0x30
    459a:	9c a7       	std	Y+44, r25	; 0x2c
    459c:	8b a7       	std	Y+43, r24	; 0x2b
    459e:	8b a5       	ldd	r24, Y+43	; 0x2b
    45a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    45a2:	01 97       	sbiw	r24, 0x01	; 1
    45a4:	f1 f7       	brne	.-4      	; 0x45a2 <Increment_LED+0x11ca>
    45a6:	9c a7       	std	Y+44, r25	; 0x2c
    45a8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(300);

	LED_OFF(DIO_PORTA,DIO_PIN2);
    45aa:	80 e0       	ldi	r24, 0x00	; 0
    45ac:	62 e0       	ldi	r22, 0x02	; 2
    45ae:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>
    45b2:	80 e0       	ldi	r24, 0x00	; 0
    45b4:	90 e0       	ldi	r25, 0x00	; 0
    45b6:	a6 e9       	ldi	r26, 0x96	; 150
    45b8:	b3 e4       	ldi	r27, 0x43	; 67
    45ba:	8f a3       	std	Y+39, r24	; 0x27
    45bc:	98 a7       	std	Y+40, r25	; 0x28
    45be:	a9 a7       	std	Y+41, r26	; 0x29
    45c0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45c2:	6f a1       	ldd	r22, Y+39	; 0x27
    45c4:	78 a5       	ldd	r23, Y+40	; 0x28
    45c6:	89 a5       	ldd	r24, Y+41	; 0x29
    45c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    45ca:	20 e0       	ldi	r18, 0x00	; 0
    45cc:	30 e0       	ldi	r19, 0x00	; 0
    45ce:	4a ef       	ldi	r20, 0xFA	; 250
    45d0:	54 e4       	ldi	r21, 0x44	; 68
    45d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    45d6:	dc 01       	movw	r26, r24
    45d8:	cb 01       	movw	r24, r22
    45da:	8b a3       	std	Y+35, r24	; 0x23
    45dc:	9c a3       	std	Y+36, r25	; 0x24
    45de:	ad a3       	std	Y+37, r26	; 0x25
    45e0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    45e2:	6b a1       	ldd	r22, Y+35	; 0x23
    45e4:	7c a1       	ldd	r23, Y+36	; 0x24
    45e6:	8d a1       	ldd	r24, Y+37	; 0x25
    45e8:	9e a1       	ldd	r25, Y+38	; 0x26
    45ea:	20 e0       	ldi	r18, 0x00	; 0
    45ec:	30 e0       	ldi	r19, 0x00	; 0
    45ee:	40 e8       	ldi	r20, 0x80	; 128
    45f0:	5f e3       	ldi	r21, 0x3F	; 63
    45f2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    45f6:	88 23       	and	r24, r24
    45f8:	2c f4       	brge	.+10     	; 0x4604 <Increment_LED+0x122c>
		__ticks = 1;
    45fa:	81 e0       	ldi	r24, 0x01	; 1
    45fc:	90 e0       	ldi	r25, 0x00	; 0
    45fe:	9a a3       	std	Y+34, r25	; 0x22
    4600:	89 a3       	std	Y+33, r24	; 0x21
    4602:	3f c0       	rjmp	.+126    	; 0x4682 <Increment_LED+0x12aa>
	else if (__tmp > 65535)
    4604:	6b a1       	ldd	r22, Y+35	; 0x23
    4606:	7c a1       	ldd	r23, Y+36	; 0x24
    4608:	8d a1       	ldd	r24, Y+37	; 0x25
    460a:	9e a1       	ldd	r25, Y+38	; 0x26
    460c:	20 e0       	ldi	r18, 0x00	; 0
    460e:	3f ef       	ldi	r19, 0xFF	; 255
    4610:	4f e7       	ldi	r20, 0x7F	; 127
    4612:	57 e4       	ldi	r21, 0x47	; 71
    4614:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4618:	18 16       	cp	r1, r24
    461a:	4c f5       	brge	.+82     	; 0x466e <Increment_LED+0x1296>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    461c:	6f a1       	ldd	r22, Y+39	; 0x27
    461e:	78 a5       	ldd	r23, Y+40	; 0x28
    4620:	89 a5       	ldd	r24, Y+41	; 0x29
    4622:	9a a5       	ldd	r25, Y+42	; 0x2a
    4624:	20 e0       	ldi	r18, 0x00	; 0
    4626:	30 e0       	ldi	r19, 0x00	; 0
    4628:	40 e2       	ldi	r20, 0x20	; 32
    462a:	51 e4       	ldi	r21, 0x41	; 65
    462c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4630:	dc 01       	movw	r26, r24
    4632:	cb 01       	movw	r24, r22
    4634:	bc 01       	movw	r22, r24
    4636:	cd 01       	movw	r24, r26
    4638:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    463c:	dc 01       	movw	r26, r24
    463e:	cb 01       	movw	r24, r22
    4640:	9a a3       	std	Y+34, r25	; 0x22
    4642:	89 a3       	std	Y+33, r24	; 0x21
    4644:	0f c0       	rjmp	.+30     	; 0x4664 <Increment_LED+0x128c>
    4646:	88 ec       	ldi	r24, 0xC8	; 200
    4648:	90 e0       	ldi	r25, 0x00	; 0
    464a:	98 a3       	std	Y+32, r25	; 0x20
    464c:	8f 8f       	std	Y+31, r24	; 0x1f
    464e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4650:	98 a1       	ldd	r25, Y+32	; 0x20
    4652:	01 97       	sbiw	r24, 0x01	; 1
    4654:	f1 f7       	brne	.-4      	; 0x4652 <Increment_LED+0x127a>
    4656:	98 a3       	std	Y+32, r25	; 0x20
    4658:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    465a:	89 a1       	ldd	r24, Y+33	; 0x21
    465c:	9a a1       	ldd	r25, Y+34	; 0x22
    465e:	01 97       	sbiw	r24, 0x01	; 1
    4660:	9a a3       	std	Y+34, r25	; 0x22
    4662:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4664:	89 a1       	ldd	r24, Y+33	; 0x21
    4666:	9a a1       	ldd	r25, Y+34	; 0x22
    4668:	00 97       	sbiw	r24, 0x00	; 0
    466a:	69 f7       	brne	.-38     	; 0x4646 <Increment_LED+0x126e>
    466c:	14 c0       	rjmp	.+40     	; 0x4696 <Increment_LED+0x12be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    466e:	6b a1       	ldd	r22, Y+35	; 0x23
    4670:	7c a1       	ldd	r23, Y+36	; 0x24
    4672:	8d a1       	ldd	r24, Y+37	; 0x25
    4674:	9e a1       	ldd	r25, Y+38	; 0x26
    4676:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    467a:	dc 01       	movw	r26, r24
    467c:	cb 01       	movw	r24, r22
    467e:	9a a3       	std	Y+34, r25	; 0x22
    4680:	89 a3       	std	Y+33, r24	; 0x21
    4682:	89 a1       	ldd	r24, Y+33	; 0x21
    4684:	9a a1       	ldd	r25, Y+34	; 0x22
    4686:	9e 8f       	std	Y+30, r25	; 0x1e
    4688:	8d 8f       	std	Y+29, r24	; 0x1d
    468a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    468c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    468e:	01 97       	sbiw	r24, 0x01	; 1
    4690:	f1 f7       	brne	.-4      	; 0x468e <Increment_LED+0x12b6>
    4692:	9e 8f       	std	Y+30, r25	; 0x1e
    4694:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(300);

	LED_OFF(DIO_PORTA,DIO_PIN1);
    4696:	80 e0       	ldi	r24, 0x00	; 0
    4698:	61 e0       	ldi	r22, 0x01	; 1
    469a:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>
    469e:	80 e0       	ldi	r24, 0x00	; 0
    46a0:	90 e0       	ldi	r25, 0x00	; 0
    46a2:	a6 e9       	ldi	r26, 0x96	; 150
    46a4:	b3 e4       	ldi	r27, 0x43	; 67
    46a6:	89 8f       	std	Y+25, r24	; 0x19
    46a8:	9a 8f       	std	Y+26, r25	; 0x1a
    46aa:	ab 8f       	std	Y+27, r26	; 0x1b
    46ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46ae:	69 8d       	ldd	r22, Y+25	; 0x19
    46b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46b6:	20 e0       	ldi	r18, 0x00	; 0
    46b8:	30 e0       	ldi	r19, 0x00	; 0
    46ba:	4a ef       	ldi	r20, 0xFA	; 250
    46bc:	54 e4       	ldi	r21, 0x44	; 68
    46be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    46c2:	dc 01       	movw	r26, r24
    46c4:	cb 01       	movw	r24, r22
    46c6:	8d 8b       	std	Y+21, r24	; 0x15
    46c8:	9e 8b       	std	Y+22, r25	; 0x16
    46ca:	af 8b       	std	Y+23, r26	; 0x17
    46cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    46ce:	6d 89       	ldd	r22, Y+21	; 0x15
    46d0:	7e 89       	ldd	r23, Y+22	; 0x16
    46d2:	8f 89       	ldd	r24, Y+23	; 0x17
    46d4:	98 8d       	ldd	r25, Y+24	; 0x18
    46d6:	20 e0       	ldi	r18, 0x00	; 0
    46d8:	30 e0       	ldi	r19, 0x00	; 0
    46da:	40 e8       	ldi	r20, 0x80	; 128
    46dc:	5f e3       	ldi	r21, 0x3F	; 63
    46de:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    46e2:	88 23       	and	r24, r24
    46e4:	2c f4       	brge	.+10     	; 0x46f0 <Increment_LED+0x1318>
		__ticks = 1;
    46e6:	81 e0       	ldi	r24, 0x01	; 1
    46e8:	90 e0       	ldi	r25, 0x00	; 0
    46ea:	9c 8b       	std	Y+20, r25	; 0x14
    46ec:	8b 8b       	std	Y+19, r24	; 0x13
    46ee:	3f c0       	rjmp	.+126    	; 0x476e <Increment_LED+0x1396>
	else if (__tmp > 65535)
    46f0:	6d 89       	ldd	r22, Y+21	; 0x15
    46f2:	7e 89       	ldd	r23, Y+22	; 0x16
    46f4:	8f 89       	ldd	r24, Y+23	; 0x17
    46f6:	98 8d       	ldd	r25, Y+24	; 0x18
    46f8:	20 e0       	ldi	r18, 0x00	; 0
    46fa:	3f ef       	ldi	r19, 0xFF	; 255
    46fc:	4f e7       	ldi	r20, 0x7F	; 127
    46fe:	57 e4       	ldi	r21, 0x47	; 71
    4700:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    4704:	18 16       	cp	r1, r24
    4706:	4c f5       	brge	.+82     	; 0x475a <Increment_LED+0x1382>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4708:	69 8d       	ldd	r22, Y+25	; 0x19
    470a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    470c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    470e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4710:	20 e0       	ldi	r18, 0x00	; 0
    4712:	30 e0       	ldi	r19, 0x00	; 0
    4714:	40 e2       	ldi	r20, 0x20	; 32
    4716:	51 e4       	ldi	r21, 0x41	; 65
    4718:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    471c:	dc 01       	movw	r26, r24
    471e:	cb 01       	movw	r24, r22
    4720:	bc 01       	movw	r22, r24
    4722:	cd 01       	movw	r24, r26
    4724:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4728:	dc 01       	movw	r26, r24
    472a:	cb 01       	movw	r24, r22
    472c:	9c 8b       	std	Y+20, r25	; 0x14
    472e:	8b 8b       	std	Y+19, r24	; 0x13
    4730:	0f c0       	rjmp	.+30     	; 0x4750 <Increment_LED+0x1378>
    4732:	88 ec       	ldi	r24, 0xC8	; 200
    4734:	90 e0       	ldi	r25, 0x00	; 0
    4736:	9a 8b       	std	Y+18, r25	; 0x12
    4738:	89 8b       	std	Y+17, r24	; 0x11
    473a:	89 89       	ldd	r24, Y+17	; 0x11
    473c:	9a 89       	ldd	r25, Y+18	; 0x12
    473e:	01 97       	sbiw	r24, 0x01	; 1
    4740:	f1 f7       	brne	.-4      	; 0x473e <Increment_LED+0x1366>
    4742:	9a 8b       	std	Y+18, r25	; 0x12
    4744:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4746:	8b 89       	ldd	r24, Y+19	; 0x13
    4748:	9c 89       	ldd	r25, Y+20	; 0x14
    474a:	01 97       	sbiw	r24, 0x01	; 1
    474c:	9c 8b       	std	Y+20, r25	; 0x14
    474e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4750:	8b 89       	ldd	r24, Y+19	; 0x13
    4752:	9c 89       	ldd	r25, Y+20	; 0x14
    4754:	00 97       	sbiw	r24, 0x00	; 0
    4756:	69 f7       	brne	.-38     	; 0x4732 <Increment_LED+0x135a>
    4758:	14 c0       	rjmp	.+40     	; 0x4782 <Increment_LED+0x13aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    475a:	6d 89       	ldd	r22, Y+21	; 0x15
    475c:	7e 89       	ldd	r23, Y+22	; 0x16
    475e:	8f 89       	ldd	r24, Y+23	; 0x17
    4760:	98 8d       	ldd	r25, Y+24	; 0x18
    4762:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4766:	dc 01       	movw	r26, r24
    4768:	cb 01       	movw	r24, r22
    476a:	9c 8b       	std	Y+20, r25	; 0x14
    476c:	8b 8b       	std	Y+19, r24	; 0x13
    476e:	8b 89       	ldd	r24, Y+19	; 0x13
    4770:	9c 89       	ldd	r25, Y+20	; 0x14
    4772:	98 8b       	std	Y+16, r25	; 0x10
    4774:	8f 87       	std	Y+15, r24	; 0x0f
    4776:	8f 85       	ldd	r24, Y+15	; 0x0f
    4778:	98 89       	ldd	r25, Y+16	; 0x10
    477a:	01 97       	sbiw	r24, 0x01	; 1
    477c:	f1 f7       	brne	.-4      	; 0x477a <Increment_LED+0x13a2>
    477e:	98 8b       	std	Y+16, r25	; 0x10
    4780:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(300);

	LED_OFF(DIO_PORTA,DIO_PIN0);
    4782:	80 e0       	ldi	r24, 0x00	; 0
    4784:	60 e0       	ldi	r22, 0x00	; 0
    4786:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <LED_OFF>
    478a:	80 e0       	ldi	r24, 0x00	; 0
    478c:	90 e0       	ldi	r25, 0x00	; 0
    478e:	a6 e9       	ldi	r26, 0x96	; 150
    4790:	b3 e4       	ldi	r27, 0x43	; 67
    4792:	8b 87       	std	Y+11, r24	; 0x0b
    4794:	9c 87       	std	Y+12, r25	; 0x0c
    4796:	ad 87       	std	Y+13, r26	; 0x0d
    4798:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    479a:	6b 85       	ldd	r22, Y+11	; 0x0b
    479c:	7c 85       	ldd	r23, Y+12	; 0x0c
    479e:	8d 85       	ldd	r24, Y+13	; 0x0d
    47a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    47a2:	20 e0       	ldi	r18, 0x00	; 0
    47a4:	30 e0       	ldi	r19, 0x00	; 0
    47a6:	4a ef       	ldi	r20, 0xFA	; 250
    47a8:	54 e4       	ldi	r21, 0x44	; 68
    47aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    47ae:	dc 01       	movw	r26, r24
    47b0:	cb 01       	movw	r24, r22
    47b2:	8f 83       	std	Y+7, r24	; 0x07
    47b4:	98 87       	std	Y+8, r25	; 0x08
    47b6:	a9 87       	std	Y+9, r26	; 0x09
    47b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47ba:	6f 81       	ldd	r22, Y+7	; 0x07
    47bc:	78 85       	ldd	r23, Y+8	; 0x08
    47be:	89 85       	ldd	r24, Y+9	; 0x09
    47c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    47c2:	20 e0       	ldi	r18, 0x00	; 0
    47c4:	30 e0       	ldi	r19, 0x00	; 0
    47c6:	40 e8       	ldi	r20, 0x80	; 128
    47c8:	5f e3       	ldi	r21, 0x3F	; 63
    47ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    47ce:	88 23       	and	r24, r24
    47d0:	2c f4       	brge	.+10     	; 0x47dc <Increment_LED+0x1404>
		__ticks = 1;
    47d2:	81 e0       	ldi	r24, 0x01	; 1
    47d4:	90 e0       	ldi	r25, 0x00	; 0
    47d6:	9e 83       	std	Y+6, r25	; 0x06
    47d8:	8d 83       	std	Y+5, r24	; 0x05
    47da:	3f c0       	rjmp	.+126    	; 0x485a <Increment_LED+0x1482>
	else if (__tmp > 65535)
    47dc:	6f 81       	ldd	r22, Y+7	; 0x07
    47de:	78 85       	ldd	r23, Y+8	; 0x08
    47e0:	89 85       	ldd	r24, Y+9	; 0x09
    47e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    47e4:	20 e0       	ldi	r18, 0x00	; 0
    47e6:	3f ef       	ldi	r19, 0xFF	; 255
    47e8:	4f e7       	ldi	r20, 0x7F	; 127
    47ea:	57 e4       	ldi	r21, 0x47	; 71
    47ec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    47f0:	18 16       	cp	r1, r24
    47f2:	4c f5       	brge	.+82     	; 0x4846 <Increment_LED+0x146e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    47f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    47f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    47fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    47fc:	20 e0       	ldi	r18, 0x00	; 0
    47fe:	30 e0       	ldi	r19, 0x00	; 0
    4800:	40 e2       	ldi	r20, 0x20	; 32
    4802:	51 e4       	ldi	r21, 0x41	; 65
    4804:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    4808:	dc 01       	movw	r26, r24
    480a:	cb 01       	movw	r24, r22
    480c:	bc 01       	movw	r22, r24
    480e:	cd 01       	movw	r24, r26
    4810:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4814:	dc 01       	movw	r26, r24
    4816:	cb 01       	movw	r24, r22
    4818:	9e 83       	std	Y+6, r25	; 0x06
    481a:	8d 83       	std	Y+5, r24	; 0x05
    481c:	0f c0       	rjmp	.+30     	; 0x483c <Increment_LED+0x1464>
    481e:	88 ec       	ldi	r24, 0xC8	; 200
    4820:	90 e0       	ldi	r25, 0x00	; 0
    4822:	9c 83       	std	Y+4, r25	; 0x04
    4824:	8b 83       	std	Y+3, r24	; 0x03
    4826:	8b 81       	ldd	r24, Y+3	; 0x03
    4828:	9c 81       	ldd	r25, Y+4	; 0x04
    482a:	01 97       	sbiw	r24, 0x01	; 1
    482c:	f1 f7       	brne	.-4      	; 0x482a <Increment_LED+0x1452>
    482e:	9c 83       	std	Y+4, r25	; 0x04
    4830:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4832:	8d 81       	ldd	r24, Y+5	; 0x05
    4834:	9e 81       	ldd	r25, Y+6	; 0x06
    4836:	01 97       	sbiw	r24, 0x01	; 1
    4838:	9e 83       	std	Y+6, r25	; 0x06
    483a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    483c:	8d 81       	ldd	r24, Y+5	; 0x05
    483e:	9e 81       	ldd	r25, Y+6	; 0x06
    4840:	00 97       	sbiw	r24, 0x00	; 0
    4842:	69 f7       	brne	.-38     	; 0x481e <Increment_LED+0x1446>
    4844:	14 c0       	rjmp	.+40     	; 0x486e <Increment_LED+0x1496>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4846:	6f 81       	ldd	r22, Y+7	; 0x07
    4848:	78 85       	ldd	r23, Y+8	; 0x08
    484a:	89 85       	ldd	r24, Y+9	; 0x09
    484c:	9a 85       	ldd	r25, Y+10	; 0x0a
    484e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    4852:	dc 01       	movw	r26, r24
    4854:	cb 01       	movw	r24, r22
    4856:	9e 83       	std	Y+6, r25	; 0x06
    4858:	8d 83       	std	Y+5, r24	; 0x05
    485a:	8d 81       	ldd	r24, Y+5	; 0x05
    485c:	9e 81       	ldd	r25, Y+6	; 0x06
    485e:	9a 83       	std	Y+2, r25	; 0x02
    4860:	89 83       	std	Y+1, r24	; 0x01
    4862:	89 81       	ldd	r24, Y+1	; 0x01
    4864:	9a 81       	ldd	r25, Y+2	; 0x02
    4866:	01 97       	sbiw	r24, 0x01	; 1
    4868:	f1 f7       	brne	.-4      	; 0x4866 <Increment_LED+0x148e>
    486a:	9a 83       	std	Y+2, r25	; 0x02
    486c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
}
    486e:	c0 52       	subi	r28, 0x20	; 32
    4870:	df 4f       	sbci	r29, 0xFF	; 255
    4872:	0f b6       	in	r0, 0x3f	; 63
    4874:	f8 94       	cli
    4876:	de bf       	out	0x3e, r29	; 62
    4878:	0f be       	out	0x3f, r0	; 63
    487a:	cd bf       	out	0x3d, r28	; 61
    487c:	cf 91       	pop	r28
    487e:	df 91       	pop	r29
    4880:	1f 91       	pop	r17
    4882:	0f 91       	pop	r16
    4884:	08 95       	ret

00004886 <Converge_Diverge_LED>:


/*****************************************************************************/
void Converge_Diverge_LED(void)
{
    4886:	df 93       	push	r29
    4888:	cf 93       	push	r28
    488a:	cd b7       	in	r28, 0x3d	; 61
    488c:	de b7       	in	r29, 0x3e	; 62
	Converge_LED();
    488e:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <Converge_LED>
	Diverge_LED();
    4892:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <Diverge_LED>
}
    4896:	cf 91       	pop	r28
    4898:	df 91       	pop	r29
    489a:	08 95       	ret

0000489c <DIP_Init>:


/*****************************************************************************/
void DIP_Init()
{
    489c:	df 93       	push	r29
    489e:	cf 93       	push	r28
    48a0:	cd b7       	in	r28, 0x3d	; 61
    48a2:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_PORTC , DIO_PIN0 , DIO_PIN_INPUT_PULLUP);
    48a4:	82 e0       	ldi	r24, 0x02	; 2
    48a6:	60 e0       	ldi	r22, 0x00	; 0
    48a8:	42 e0       	ldi	r20, 0x02	; 2
    48aa:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTC , DIO_PIN1 , DIO_PIN_INPUT_PULLUP);
    48ae:	82 e0       	ldi	r24, 0x02	; 2
    48b0:	61 e0       	ldi	r22, 0x01	; 1
    48b2:	42 e0       	ldi	r20, 0x02	; 2
    48b4:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTC , DIO_PIN2 , DIO_PIN_INPUT_PULLUP);
    48b8:	82 e0       	ldi	r24, 0x02	; 2
    48ba:	62 e0       	ldi	r22, 0x02	; 2
    48bc:	42 e0       	ldi	r20, 0x02	; 2
    48be:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_voidSetPinDirection>
}
    48c2:	cf 91       	pop	r28
    48c4:	df 91       	pop	r29
    48c6:	08 95       	ret

000048c8 <__prologue_saves__>:
    48c8:	2f 92       	push	r2
    48ca:	3f 92       	push	r3
    48cc:	4f 92       	push	r4
    48ce:	5f 92       	push	r5
    48d0:	6f 92       	push	r6
    48d2:	7f 92       	push	r7
    48d4:	8f 92       	push	r8
    48d6:	9f 92       	push	r9
    48d8:	af 92       	push	r10
    48da:	bf 92       	push	r11
    48dc:	cf 92       	push	r12
    48de:	df 92       	push	r13
    48e0:	ef 92       	push	r14
    48e2:	ff 92       	push	r15
    48e4:	0f 93       	push	r16
    48e6:	1f 93       	push	r17
    48e8:	cf 93       	push	r28
    48ea:	df 93       	push	r29
    48ec:	cd b7       	in	r28, 0x3d	; 61
    48ee:	de b7       	in	r29, 0x3e	; 62
    48f0:	ca 1b       	sub	r28, r26
    48f2:	db 0b       	sbc	r29, r27
    48f4:	0f b6       	in	r0, 0x3f	; 63
    48f6:	f8 94       	cli
    48f8:	de bf       	out	0x3e, r29	; 62
    48fa:	0f be       	out	0x3f, r0	; 63
    48fc:	cd bf       	out	0x3d, r28	; 61
    48fe:	09 94       	ijmp

00004900 <__epilogue_restores__>:
    4900:	2a 88       	ldd	r2, Y+18	; 0x12
    4902:	39 88       	ldd	r3, Y+17	; 0x11
    4904:	48 88       	ldd	r4, Y+16	; 0x10
    4906:	5f 84       	ldd	r5, Y+15	; 0x0f
    4908:	6e 84       	ldd	r6, Y+14	; 0x0e
    490a:	7d 84       	ldd	r7, Y+13	; 0x0d
    490c:	8c 84       	ldd	r8, Y+12	; 0x0c
    490e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4910:	aa 84       	ldd	r10, Y+10	; 0x0a
    4912:	b9 84       	ldd	r11, Y+9	; 0x09
    4914:	c8 84       	ldd	r12, Y+8	; 0x08
    4916:	df 80       	ldd	r13, Y+7	; 0x07
    4918:	ee 80       	ldd	r14, Y+6	; 0x06
    491a:	fd 80       	ldd	r15, Y+5	; 0x05
    491c:	0c 81       	ldd	r16, Y+4	; 0x04
    491e:	1b 81       	ldd	r17, Y+3	; 0x03
    4920:	aa 81       	ldd	r26, Y+2	; 0x02
    4922:	b9 81       	ldd	r27, Y+1	; 0x01
    4924:	ce 0f       	add	r28, r30
    4926:	d1 1d       	adc	r29, r1
    4928:	0f b6       	in	r0, 0x3f	; 63
    492a:	f8 94       	cli
    492c:	de bf       	out	0x3e, r29	; 62
    492e:	0f be       	out	0x3f, r0	; 63
    4930:	cd bf       	out	0x3d, r28	; 61
    4932:	ed 01       	movw	r28, r26
    4934:	08 95       	ret

00004936 <_exit>:
    4936:	f8 94       	cli

00004938 <__stop_program>:
    4938:	ff cf       	rjmp	.-2      	; 0x4938 <__stop_program>
